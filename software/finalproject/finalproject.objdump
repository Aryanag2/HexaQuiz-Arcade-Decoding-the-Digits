
finalproject.elf:     file format elf32-littlenios2
finalproject.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08000230

Program Header:
    LOAD off    0x00001000 vaddr 0x08000000 paddr 0x08000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08000020 paddr 0x08000020 align 2**12
         filesz 0x0000eeac memsz 0x0000eeac flags r-x
    LOAD off    0x0000fecc vaddr 0x0800eecc paddr 0x08010b28 align 2**12
         filesz 0x00001c5c memsz 0x00001c5c flags rw-
    LOAD off    0x00012784 vaddr 0x08012784 paddr 0x08012784 align 2**12
         filesz 0x00000000 memsz 0x00000160 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08000000  08000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  08000020  08000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000e8e8  08000230  08000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000003b4  0800eb18  0800eb18  0000fb18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001c5c  0800eecc  08010b28  0000fecc  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000160  08012784  08012784  00012784  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000200  00000200  00011b28  2**0
                  CONTENTS
  7 .sdram        00000000  080128e4  080128e4  00011b28  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00011b28  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000b80  00000000  00000000  00011b50  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00016733  00000000  00000000  000126d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000062f7  00000000  00000000  00028e03  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000084fe  00000000  00000000  0002f0fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00001890  00000000  00000000  000375f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003375  00000000  00000000  00038e88  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00015095  00000000  00000000  0003c1fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  00051294  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001408  00000000  00000000  000512d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0005516a  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  0005516d  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00055179  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0005517a  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0005517b  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0005517f  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00055183  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  00055187  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  00055192  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  0005519d  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000009  00000000  00000000  000551a8  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000025  00000000  00000000  000551b1  2**0
                  CONTENTS, READONLY
 30 .jdi          0000501f  00000000  00000000  000551d6  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     0009d11a  00000000  00000000  0005a1f5  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08000000 l    d  .entry	00000000 .entry
08000020 l    d  .exceptions	00000000 .exceptions
08000230 l    d  .text	00000000 .text
0800eb18 l    d  .rodata	00000000 .rodata
0800eecc l    d  .rwdata	00000000 .rwdata
08012784 l    d  .bss	00000000 .bss
00000200 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
080128e4 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../finalproject_bsp//obj/HAL/src/crt0.o
08000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 text_mode_vga_color.c
08010ae8 l     O .rwdata	00000004 vga_ctrl
0800eecc l     O .rwdata	00000170 colors
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0800ec12 l     O .rodata	00000010 zeroes.4389
0800ec22 l     O .rodata	00000010 blanks.4388
00000000 l    df *ABS*	00000000 dtoa.c
08003964 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 impure.c
0800f03c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
0800f480 l     O .rwdata	00000020 lc_ctype_charset
0800f460 l     O .rwdata	00000020 lc_message_charset
0800f4a0 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 mprec.c
0800ec54 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0800ed78 l     O .rodata	00000010 zeroes.4333
0800ed88 l     O .rodata	00000010 blanks.4332
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_load.c
0800c75c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
08010b00 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0800c9ec l     F .text	00000034 alt_dev_reg
0800f8e0 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0800cce0 l     F .text	0000020c altera_avalon_jtag_uart_irq
0800ceec l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0800d524 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
0800d89c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
0800d9d0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0800d9fc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0800de5c l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0800dfbc l     F .text	0000003c alt_get_errno
0800dff8 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
080127b8 g     O .bss	00000004 alt_instruction_exception_handler
08006c68 g     F .text	00000074 _mprec_log10
08006d54 g     F .text	0000008c __any_on
0800ec60 g     O .rodata	00000028 __mprec_tinytens
0800c848 g     F .text	0000007c alt_main
080127e4 g     O .bss	00000100 alt_irq
08010b28 g       *ABS*	00000000 __flash_rwdata_start
0800b134 g     F .text	00000088 .hidden __eqdf2
080128e4 g       *ABS*	00000000 __alt_heap_start
08005214 g     F .text	0000007c _setlocale_r
0800c8e8 g     F .text	00000024 __malloc_unlock
08000b48 g     F .text	0000026c textVGAColorScreenSaver
08008a04 g     F .text	0000015c memmove
08005d28 g     F .text	000000a8 _Balloc
0800b1bc g     F .text	000000dc .hidden __gtdf2
0800e468 g     F .text	00000024 altera_nios2_gen2_irq_init
08000000 g     F .entry	0000000c __reset
08000020 g       *ABS*	00000000 __flash_exceptions_start
0801279c g     O .bss	00000004 errno
08007154 g     F .text	000013a0 ___svfiprintf_internal_r
080127a4 g     O .bss	00000004 alt_argv
08018ae8 g       *ABS*	00000000 _gp
0800c9bc g     F .text	00000030 usleep
08000298 g     F .text	00000050 textVGAColorClr
08010968 g     O .rwdata	00000180 alt_fd_list
0800e48c g     F .text	00000090 alt_find_dev
08005be0 g     F .text	00000148 memcpy
0800c574 g     F .text	000000dc .hidden __floatsidf
0800df40 g     F .text	0000007c alt_io_redirect
0800b298 g     F .text	000000f4 .hidden __ltdf2
0800eb18 g       *ABS*	00000000 __DTOR_END__
0800e6e8 g     F .text	0000009c alt_exception_cause_generated_bad_addr
08006de0 g     F .text	00000074 __fpclassifyd
08006bc4 g     F .text	000000a4 __ratio
0800d0e4 g     F .text	0000021c altera_avalon_jtag_uart_read
00000200 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
080013ec g     F .text	00000064 .hidden __udivsi3
0800ecb0 g     O .rodata	000000c8 __mprec_tens
08005290 g     F .text	0000000c __locale_charset
08012798 g     O .bss	00000004 __malloc_top_pad
08010af4 g     O .rwdata	00000004 __mb_cur_max
080052c0 g     F .text	0000000c _localeconv_r
0800615c g     F .text	0000003c __i2b
08006e54 g     F .text	00000054 _sbrk_r
08010b14 g     O .rwdata	00000004 alt_max_fd
08012794 g     O .bss	00000004 __malloc_max_sbrked_mem
08009eb8 g     F .text	000008ac .hidden __adddf3
0800696c g     F .text	0000010c __b2d
080098f4 g     F .text	000005c4 .hidden __umoddi3
08010aec g     O .rwdata	00000004 _global_impure_ptr
08008c88 g     F .text	00000564 _realloc_r
080128e4 g       *ABS*	00000000 __bss_end
0800dd6c g     F .text	000000f0 alt_iic_isr_register
0800e360 g     F .text	00000108 alt_tick
080092f8 g     F .text	000005fc .hidden __udivdi3
0800ec88 g     O .rodata	00000028 __mprec_bigtens
08005f40 g     F .text	00000104 __s2b
0800c650 g     F .text	000000a8 .hidden __floatunsidf
080066ac g     F .text	00000060 __mcmp
0800dd20 g     F .text	0000004c alt_ic_irq_enabled
0800e2c4 g     F .text	0000009c alt_alarm_stop
080127ac g     O .bss	00000004 alt_irq_active
080000fc g     F .exceptions	000000d4 alt_irq_handler
08010940 g     O .rwdata	00000028 alt_dev_null
0800d9b0 g     F .text	00000020 alt_dcache_flush_all
08006044 g     F .text	00000068 __hi0bits
0800c4f4 g     F .text	00000080 .hidden __fixdfsi
08000db4 g     F .text	00000540 textVGAColorHexQuiz
08010b28 g       *ABS*	00000000 __ram_rwdata_end
08010b0c g     O .rwdata	00000008 alt_dev_list
0800eecc g       *ABS*	00000000 __ram_rodata_end
0800b298 g     F .text	000000f4 .hidden __ledf2
08006424 g     F .text	00000140 __pow5mult
0801278c g     O .bss	00000004 __nlocale_changed
08001450 g     F .text	00000058 .hidden __umodsi3
080128e4 g       *ABS*	00000000 end
0800cc20 g     F .text	000000c0 altera_avalon_jtag_uart_init
080001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
0800eb18 g       *ABS*	00000000 __CTOR_LIST__
0c000000 g       *ABS*	00000000 __alt_stack_pointer
0800d59c g     F .text	0000007c alt_avalon_timer_sc_init
0800c6f8 g     F .text	00000064 .hidden __clzsi2
0800d300 g     F .text	00000224 altera_avalon_jtag_uart_write
08005afc g     F .text	000000e4 memchr
0800154c g     F .text	00000058 _sprintf_r
080086f4 g     F .text	00000310 _free_r
0800529c g     F .text	00000010 __locale_mb_cur_max
0800e964 g     F .text	00000180 __call_exitprocs
08012788 g     O .bss	00000004 __mlocale_changed
08010af8 g     O .rwdata	00000004 __malloc_sbrk_base
08000230 g     F .text	0000003c _start
080127b0 g     O .bss	00000004 _alt_tick_rate
080014e8 g     F .text	00000064 rand
08006564 g     F .text	00000148 __lshift
080127b4 g     O .bss	00000004 _alt_nticks
0800ca58 g     F .text	00000064 alt_sys_init
08006f84 g     F .text	000001d0 __ssprint_r
0800e84c g     F .text	00000118 __register_exitproc
08006198 g     F .text	0000028c __multiply
0800cf8c g     F .text	00000068 altera_avalon_jtag_uart_close
080014a8 g     F .text	00000028 .hidden __mulsi3
0800eecc g       *ABS*	00000000 __ram_rwdata_start
0800eb18 g       *ABS*	00000000 __ram_rodata_start
080127bc g     O .bss	00000028 __malloc_current_mallinfo
08006a78 g     F .text	0000014c __d2b
0800cabc g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0800e624 g     F .text	000000c4 alt_get_fd
0800d744 g     F .text	00000158 alt_busy_sleep
0800e7d0 g     F .text	0000007c memcmp
0800cb7c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
080128e4 g       *ABS*	00000000 __alt_stack_base
0800cbcc g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0800a764 g     F .text	000009d0 .hidden __divdf3
08006cdc g     F .text	00000078 __copybits
0800f4d8 g     O .rwdata	00000408 __malloc_av_
0800b38c g     F .text	0000086c .hidden __muldf3
0800e51c g     F .text	00000108 alt_find_file
0800da38 g     F .text	000000a4 alt_dev_llist_insert
0800c8c4 g     F .text	00000024 __malloc_lock
0800c90c g     F .text	000000b0 sbrk
080016a8 g     F .text	000022bc ___svfprintf_internal_r
080084f4 g     F .text	000000dc _calloc_r
08012784 g       *ABS*	00000000 __bss_start
08008b60 g     F .text	00000128 memset
0800026c g     F .text	0000002c main
080127a8 g     O .bss	00000004 alt_envp
08012790 g     O .bss	00000004 __malloc_max_total_mem
0800cb1c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
080014d0 g     F .text	00000018 srand
0c000000 g       *ABS*	00000000 __alt_heap_limit
08003b8c g     F .text	00001688 _dtoa_r
080052f0 g     F .text	0000080c _malloc_r
08010b18 g     O .rwdata	00000004 alt_errno
080012f4 g     F .text	00000084 .hidden __divsi3
080003f8 g     F .text	00000750 setColorPalette
080085d0 g     F .text	00000124 _malloc_trim_r
0800eb18 g       *ABS*	00000000 __CTOR_END__
08006ea8 g     F .text	000000dc strcmp
0800eb18 g       *ABS*	00000000 __flash_rodata_start
0800eb18 g       *ABS*	00000000 __DTOR_LIST__
0800b134 g     F .text	00000088 .hidden __nedf2
0800ca20 g     F .text	00000038 alt_irq_init
0800e240 g     F .text	00000084 alt_release_fd
080015a4 g     F .text	0000006c sprintf
0800ed98 g     O .rodata	00000100 .hidden __clz_tab
08012784 g     O .bss	00000004 _PathLocale
0800e784 g     F .text	00000014 atexit
080052cc g     F .text	00000018 setlocale
08010af0 g     O .rwdata	00000004 _impure_ptr
080127a0 g     O .bss	00000004 alt_argc
0800db3c g     F .text	00000060 _do_dtors
080052b8 g     F .text	00000008 __locale_cjk_lang
08000020 g       .exceptions	00000000 alt_irq_entry
08006908 g     F .text	00000064 __ulp
08010b04 g     O .rwdata	00000008 alt_fs_list
08000020 g       *ABS*	00000000 __ram_exceptions_start
080052e4 g     F .text	0000000c localeconv
0800dbbc g     F .text	00000050 alt_ic_isr_register
08010b28 g       *ABS*	00000000 _edata
080128e4 g       *ABS*	00000000 _end
08000230 g       *ABS*	00000000 __ram_exceptions_end
0800cff4 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
080002e8 g     F .text	00000110 textVGADrawColorText
0800dc94 g     F .text	0000008c alt_ic_irq_disable
08010afc g     O .rwdata	00000004 __malloc_trim_threshold
080052ac g     F .text	0000000c __locale_msgcharset
0800e798 g     F .text	00000038 exit
0800670c g     F .text	000001fc __mdiff
08001378 g     F .text	00000074 .hidden __modsi3
0c000000 g       *ABS*	00000000 __alt_data_end
08000020 g     F .exceptions	00000000 alt_exception
08000000 g       *ABS*	00000000 __alt_mem_sdram
0800eae4 g     F .text	00000034 _exit
0800d618 g     F .text	0000012c alt_alarm_start
080091ec g     F .text	0000010c .hidden __muldi3
08001610 g     F .text	00000098 strlen
0800e0e4 g     F .text	0000015c open
0800b1bc g     F .text	000000dc .hidden __gedf2
0800db9c g     F .text	00000020 alt_icache_flush_all
08010b1c g     O .rwdata	00000004 alt_priority_mask
0800dc0c g     F .text	00000088 alt_ic_irq_enable
0800bbf8 g     F .text	000008fc .hidden __subdf3
080060ac g     F .text	000000b0 __lo0bits
08010b20 g     O .rwdata	00000008 alt_alarm_list
0800dadc g     F .text	00000060 _do_ctors
0800d8d8 g     F .text	000000d8 close
0800c7c4 g     F .text	00000084 alt_load
08005df8 g     F .text	00000148 __multadd
08005dd0 g     F .text	00000028 _Bfree



Disassembly of section .entry:

08000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8000000:	00420034 	movhi	at,2048
    ori r1, r1, %lo(_start)
 8000004:	08408c14 	ori	at,at,560
    jmp r1
 8000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

08000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 8000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 8000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 8000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 800002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 8000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 800003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 8000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 8000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 8000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 800004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 8000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 800005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 8000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 800006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 800007c:	10000326 	beq	r2,zero,800008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 8000080:	20000226 	beq	r4,zero,800008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8000084:	80000fc0 	call	80000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8000088:	00000706 	br	80000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 800008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 8000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 8000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 8000098:	80001d00 	call	80001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 800009c:	1000021e 	bne	r2,zero,80000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 80000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 80000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 80000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 80000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 80000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 80000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 80000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 80000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 80000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 80000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 80000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 80000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 80000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 80000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 80000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 80000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 80000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 80000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 80000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 80000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 80000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 80000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 80000f8:	ef80083a 	eret

080000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 80000fc:	defff904 	addi	sp,sp,-28
 8000100:	dfc00615 	stw	ra,24(sp)
 8000104:	df000515 	stw	fp,20(sp)
 8000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 800010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8000110:	0005313a 	rdctl	r2,ipending
 8000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 8000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 800011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 8000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8000124:	00800044 	movi	r2,1
 8000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 800012c:	e0fffb17 	ldw	r3,-20(fp)
 8000130:	e0bffc17 	ldw	r2,-16(fp)
 8000134:	1884703a 	and	r2,r3,r2
 8000138:	10001426 	beq	r2,zero,800018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 800013c:	00820074 	movhi	r2,2049
 8000140:	1089f904 	addi	r2,r2,10212
 8000144:	e0fffd17 	ldw	r3,-12(fp)
 8000148:	180690fa 	slli	r3,r3,3
 800014c:	10c5883a 	add	r2,r2,r3
 8000150:	10c00017 	ldw	r3,0(r2)
 8000154:	00820074 	movhi	r2,2049
 8000158:	1089f904 	addi	r2,r2,10212
 800015c:	e13ffd17 	ldw	r4,-12(fp)
 8000160:	200890fa 	slli	r4,r4,3
 8000164:	1105883a 	add	r2,r2,r4
 8000168:	10800104 	addi	r2,r2,4
 800016c:	10800017 	ldw	r2,0(r2)
 8000170:	1009883a 	mov	r4,r2
 8000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 8000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 800017c:	0005313a 	rdctl	r2,ipending
 8000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 8000184:	e0bfff17 	ldw	r2,-4(fp)
 8000188:	00000706 	br	80001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 800018c:	e0bffc17 	ldw	r2,-16(fp)
 8000190:	1085883a 	add	r2,r2,r2
 8000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 8000198:	e0bffd17 	ldw	r2,-12(fp)
 800019c:	10800044 	addi	r2,r2,1
 80001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 80001a4:	003fe106 	br	800012c <__alt_data_end+0xfc00012c>

    active = alt_irq_pending ();
 80001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 80001ac:	e0bffb17 	ldw	r2,-20(fp)
 80001b0:	103fdb1e 	bne	r2,zero,8000120 <__alt_data_end+0xfc000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 80001b4:	0001883a 	nop
}
 80001b8:	0001883a 	nop
 80001bc:	e037883a 	mov	sp,fp
 80001c0:	dfc00117 	ldw	ra,4(sp)
 80001c4:	df000017 	ldw	fp,0(sp)
 80001c8:	dec00204 	addi	sp,sp,8
 80001cc:	f800283a 	ret

080001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 80001d0:	defffb04 	addi	sp,sp,-20
 80001d4:	dfc00415 	stw	ra,16(sp)
 80001d8:	df000315 	stw	fp,12(sp)
 80001dc:	df000304 	addi	fp,sp,12
 80001e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 80001e4:	00bfffc4 	movi	r2,-1
 80001e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 80001ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 80001f0:	d0a73417 	ldw	r2,-25392(gp)
 80001f4:	10000726 	beq	r2,zero,8000214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 80001f8:	d0a73417 	ldw	r2,-25392(gp)
 80001fc:	e0fffd17 	ldw	r3,-12(fp)
 8000200:	e1bffe17 	ldw	r6,-8(fp)
 8000204:	e17fff17 	ldw	r5,-4(fp)
 8000208:	1809883a 	mov	r4,r3
 800020c:	103ee83a 	callr	r2
 8000210:	00000206 	br	800021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 8000214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 8000218:	0005883a 	mov	r2,zero
}
 800021c:	e037883a 	mov	sp,fp
 8000220:	dfc00117 	ldw	ra,4(sp)
 8000224:	df000017 	ldw	fp,0(sp)
 8000228:	dec00204 	addi	sp,sp,8
 800022c:	f800283a 	ret

Disassembly of section .text:

08000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 8000230:	06c30034 	movhi	sp,3072
    ori sp, sp, %lo(__alt_stack_pointer)
 8000234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 8000238:	06820074 	movhi	gp,2049
    ori gp, gp, %lo(_gp)
 800023c:	d6a2ba14 	ori	gp,gp,35560
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 8000240:	00820074 	movhi	r2,2049
    ori r2, r2, %lo(__bss_start)
 8000244:	1089e114 	ori	r2,r2,10116

    movhi r3, %hi(__bss_end)
 8000248:	00c20074 	movhi	r3,2049
    ori r3, r3, %lo(__bss_end)
 800024c:	18ca3914 	ori	r3,r3,10468

    beq r2, r3, 1f
 8000250:	10c00326 	beq	r2,r3,8000260 <_start+0x30>

0:
    stw zero, (r2)
 8000254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 8000258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 800025c:	10fffd36 	bltu	r2,r3,8000254 <__alt_data_end+0xfc000254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 8000260:	800c7c40 	call	800c7c4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 8000264:	800c8480 	call	800c848 <alt_main>

08000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 8000268:	003fff06 	br	8000268 <__alt_data_end+0xfc000268>

0800026c <main>:
//#include <text_mode_vga_color.h>
int main (void){
 800026c:	defffe04 	addi	sp,sp,-8
 8000270:	dfc00115 	stw	ra,4(sp)
 8000274:	df000015 	stw	fp,0(sp)
 8000278:	d839883a 	mov	fp,sp
	textVGAColorHexQuiz();
 800027c:	8000db40 	call	8000db4 <textVGAColorHexQuiz>
 8000280:	0005883a 	mov	r2,zero

}
 8000284:	e037883a 	mov	sp,fp
 8000288:	dfc00117 	ldw	ra,4(sp)
 800028c:	df000017 	ldw	fp,0(sp)
 8000290:	dec00204 	addi	sp,sp,8
 8000294:	f800283a 	ret

08000298 <textVGAColorClr>:
#include <string.h>
#include <alt_types.h>
#include "text_mode_vga_color.h"

void textVGAColorClr()
{
 8000298:	defffe04 	addi	sp,sp,-8
 800029c:	df000115 	stw	fp,4(sp)
 80002a0:	df000104 	addi	fp,sp,4
	for (int i = 0; i<(ROWS*COLUMNS) * 2; i++)
 80002a4:	e03fff15 	stw	zero,-4(fp)
 80002a8:	00000706 	br	80002c8 <textVGAColorClr+0x30>
	{
		vga_ctrl->VRAM[i] = 0x00;
 80002ac:	d0e00017 	ldw	r3,-32768(gp)
 80002b0:	e0bfff17 	ldw	r2,-4(fp)
 80002b4:	1885883a 	add	r2,r3,r2
 80002b8:	10000005 	stb	zero,0(r2)
#include <alt_types.h>
#include "text_mode_vga_color.h"

void textVGAColorClr()
{
	for (int i = 0; i<(ROWS*COLUMNS) * 2; i++)
 80002bc:	e0bfff17 	ldw	r2,-4(fp)
 80002c0:	10800044 	addi	r2,r2,1
 80002c4:	e0bfff15 	stw	r2,-4(fp)
 80002c8:	e0bfff17 	ldw	r2,-4(fp)
 80002cc:	1084b010 	cmplti	r2,r2,4800
 80002d0:	103ff61e 	bne	r2,zero,80002ac <__alt_data_end+0xfc0002ac>
	{
		vga_ctrl->VRAM[i] = 0x00;
	}
}
 80002d4:	0001883a 	nop
 80002d8:	e037883a 	mov	sp,fp
 80002dc:	df000017 	ldw	fp,0(sp)
 80002e0:	dec00104 	addi	sp,sp,4
 80002e4:	f800283a 	ret

080002e8 <textVGADrawColorText>:

void textVGADrawColorText(char* str, int x, int y, alt_u8 background, alt_u8 foreground)
{
 80002e8:	defff704 	addi	sp,sp,-36
 80002ec:	dfc00815 	stw	ra,32(sp)
 80002f0:	df000715 	stw	fp,28(sp)
 80002f4:	dc000615 	stw	r16,24(sp)
 80002f8:	df000704 	addi	fp,sp,28
 80002fc:	e13ffa15 	stw	r4,-24(fp)
 8000300:	e17ffb15 	stw	r5,-20(fp)
 8000304:	e1bffc15 	stw	r6,-16(fp)
 8000308:	3807883a 	mov	r3,r7
 800030c:	e0800217 	ldw	r2,8(fp)
 8000310:	e0fffd05 	stb	r3,-12(fp)
 8000314:	e0bffe05 	stb	r2,-8(fp)
	int i = 0;
 8000318:	e03ff915 	stw	zero,-28(fp)
	while (str[i]!=0)
 800031c:	00002706 	br	80003bc <textVGADrawColorText+0xd4>
	{
		vga_ctrl->VRAM[(y*COLUMNS + x + i) * 2] = foreground << 4 | background;
 8000320:	d4200017 	ldw	r16,-32768(gp)
 8000324:	01401404 	movi	r5,80
 8000328:	e13ffc17 	ldw	r4,-16(fp)
 800032c:	80014a80 	call	80014a8 <__mulsi3>
 8000330:	1007883a 	mov	r3,r2
 8000334:	e0bffb17 	ldw	r2,-20(fp)
 8000338:	1887883a 	add	r3,r3,r2
 800033c:	e0bff917 	ldw	r2,-28(fp)
 8000340:	1885883a 	add	r2,r3,r2
 8000344:	1085883a 	add	r2,r2,r2
 8000348:	1009883a 	mov	r4,r2
 800034c:	e0bffe03 	ldbu	r2,-8(fp)
 8000350:	1004913a 	slli	r2,r2,4
 8000354:	1007883a 	mov	r3,r2
 8000358:	e0bffd03 	ldbu	r2,-12(fp)
 800035c:	1884b03a 	or	r2,r3,r2
 8000360:	1007883a 	mov	r3,r2
 8000364:	8105883a 	add	r2,r16,r4
 8000368:	10c00005 	stb	r3,0(r2)
		vga_ctrl->VRAM[(y*COLUMNS + x + i) * 2 + 1] = str[i];
 800036c:	d4200017 	ldw	r16,-32768(gp)
 8000370:	01401404 	movi	r5,80
 8000374:	e13ffc17 	ldw	r4,-16(fp)
 8000378:	80014a80 	call	80014a8 <__mulsi3>
 800037c:	1007883a 	mov	r3,r2
 8000380:	e0bffb17 	ldw	r2,-20(fp)
 8000384:	1887883a 	add	r3,r3,r2
 8000388:	e0bff917 	ldw	r2,-28(fp)
 800038c:	1885883a 	add	r2,r3,r2
 8000390:	1085883a 	add	r2,r2,r2
 8000394:	10800044 	addi	r2,r2,1
 8000398:	e0fff917 	ldw	r3,-28(fp)
 800039c:	e13ffa17 	ldw	r4,-24(fp)
 80003a0:	20c7883a 	add	r3,r4,r3
 80003a4:	18c00003 	ldbu	r3,0(r3)
 80003a8:	8085883a 	add	r2,r16,r2
 80003ac:	10c00005 	stb	r3,0(r2)
		i++;
 80003b0:	e0bff917 	ldw	r2,-28(fp)
 80003b4:	10800044 	addi	r2,r2,1
 80003b8:	e0bff915 	stw	r2,-28(fp)
}

void textVGADrawColorText(char* str, int x, int y, alt_u8 background, alt_u8 foreground)
{
	int i = 0;
	while (str[i]!=0)
 80003bc:	e0bff917 	ldw	r2,-28(fp)
 80003c0:	e0fffa17 	ldw	r3,-24(fp)
 80003c4:	1885883a 	add	r2,r3,r2
 80003c8:	10800003 	ldbu	r2,0(r2)
 80003cc:	10803fcc 	andi	r2,r2,255
 80003d0:	1080201c 	xori	r2,r2,128
 80003d4:	10bfe004 	addi	r2,r2,-128
 80003d8:	103fd11e 	bne	r2,zero,8000320 <__alt_data_end+0xfc000320>
	{
		vga_ctrl->VRAM[(y*COLUMNS + x + i) * 2] = foreground << 4 | background;
		vga_ctrl->VRAM[(y*COLUMNS + x + i) * 2 + 1] = str[i];
		i++;
	}
}
 80003dc:	0001883a 	nop
 80003e0:	e6ffff04 	addi	sp,fp,-4
 80003e4:	dfc00217 	ldw	ra,8(sp)
 80003e8:	df000117 	ldw	fp,4(sp)
 80003ec:	dc000017 	ldw	r16,0(sp)
 80003f0:	dec00304 	addi	sp,sp,12
 80003f4:	f800283a 	ret

080003f8 <setColorPalette>:

void setColorPalette (alt_u8 color, alt_u8 red, alt_u8 green, alt_u8 blue)
{
 80003f8:	defff404 	addi	sp,sp,-48
 80003fc:	df000b15 	stw	fp,44(sp)
 8000400:	df000b04 	addi	fp,sp,44
 8000404:	2011883a 	mov	r8,r4
 8000408:	2809883a 	mov	r4,r5
 800040c:	3007883a 	mov	r3,r6
 8000410:	3805883a 	mov	r2,r7
 8000414:	e23ffc05 	stb	r8,-16(fp)
 8000418:	e13ffd05 	stb	r4,-12(fp)
 800041c:	e0fffe05 	stb	r3,-8(fp)
 8000420:	e0bfff05 	stb	r2,-4(fp)
	//fill in this function to set the color palette starting at offset 0x0000 2000 (from base)


	alt_u32 palette = 0;
 8000424:	e03ff515 	stw	zero,-44(fp)
	alt_u32 r1 = red<<9;
 8000428:	e0bffd03 	ldbu	r2,-12(fp)
 800042c:	1004927a 	slli	r2,r2,9
 8000430:	e0bff615 	stw	r2,-40(fp)
	alt_u32  g1 = green<<5;
 8000434:	e0bffe03 	ldbu	r2,-8(fp)
 8000438:	1004917a 	slli	r2,r2,5
 800043c:	e0bff715 	stw	r2,-36(fp)
	alt_u32 b1 = blue <<1;
 8000440:	e0bfff03 	ldbu	r2,-4(fp)
 8000444:	1085883a 	add	r2,r2,r2
 8000448:	e0bff815 	stw	r2,-32(fp)

	alt_u32 r2 = red<<21;
 800044c:	e0bffd03 	ldbu	r2,-12(fp)
 8000450:	1004957a 	slli	r2,r2,21
 8000454:	e0bff915 	stw	r2,-28(fp)
	alt_u32 g2 = green<<17;
 8000458:	e0bffe03 	ldbu	r2,-8(fp)
 800045c:	1004947a 	slli	r2,r2,17
 8000460:	e0bffa15 	stw	r2,-24(fp)
	alt_u32 b2 = blue <<13;
 8000464:	e0bfff03 	ldbu	r2,-4(fp)
 8000468:	1004937a 	slli	r2,r2,13
 800046c:	e0bffb15 	stw	r2,-20(fp)
	switch (color){
 8000470:	e0bffc03 	ldbu	r2,-16(fp)
 8000474:	10c00428 	cmpgeui	r3,r2,16
 8000478:	1801ae1e 	bne	r3,zero,8000b34 <setColorPalette+0x73c>
 800047c:	100690ba 	slli	r3,r2,2
 8000480:	00820034 	movhi	r2,2048
 8000484:	10812504 	addi	r2,r2,1172
 8000488:	1885883a 	add	r2,r3,r2
 800048c:	10800017 	ldw	r2,0(r2)
 8000490:	1000683a 	jmp	r2
 8000494:	080004d4 	ori	zero,at,19
 8000498:	08000538 	rdprs	zero,at,20
 800049c:	080005a0 	cmpeqi	zero,at,22
 80004a0:	08000604 	addi	zero,at,24
 80004a4:	0800066c 	andhi	zero,at,25
 80004a8:	080006d0 	cmplti	zero,at,27
 80004ac:	08000738 	rdprs	zero,at,28
 80004b0:	0800079c 	xori	zero,at,30
 80004b4:	08000804 	addi	zero,at,32
 80004b8:	08000868 	cmpgeui	zero,at,33
 80004bc:	080008d0 	cmplti	zero,at,35
 80004c0:	08000934 	orhi	zero,at,36
 80004c4:	0800099c 	xori	zero,at,38
 80004c8:	08000a00 	call	8000a0 <__alt_mem_onchip_memory2_0+0x7ffea0>
 80004cc:	08000a68 	cmpgeui	zero,at,41
 80004d0:	08000acc 	andi	zero,at,43
	 case (0):
			 vga_ctrl->palette[0] &= ~(0xFFF << 1);
 80004d4:	d0a00017 	ldw	r2,-32768(gp)
 80004d8:	d0e00017 	ldw	r3,-32768(gp)
 80004dc:	19080017 	ldw	r4,8192(r3)
 80004e0:	00f80044 	movi	r3,-8191
 80004e4:	20c6703a 	and	r3,r4,r3
 80004e8:	10c80015 	stw	r3,8192(r2)
			 vga_ctrl->palette[0] |= r1;
 80004ec:	d0a00017 	ldw	r2,-32768(gp)
 80004f0:	d0e00017 	ldw	r3,-32768(gp)
 80004f4:	19080017 	ldw	r4,8192(r3)
 80004f8:	e0fff617 	ldw	r3,-40(fp)
 80004fc:	20c6b03a 	or	r3,r4,r3
 8000500:	10c80015 	stw	r3,8192(r2)
			 vga_ctrl->palette[0] |= g1;
 8000504:	d0a00017 	ldw	r2,-32768(gp)
 8000508:	d0e00017 	ldw	r3,-32768(gp)
 800050c:	19080017 	ldw	r4,8192(r3)
 8000510:	e0fff717 	ldw	r3,-36(fp)
 8000514:	20c6b03a 	or	r3,r4,r3
 8000518:	10c80015 	stw	r3,8192(r2)
			 vga_ctrl->palette[0] |= b1;
 800051c:	d0a00017 	ldw	r2,-32768(gp)
 8000520:	d0e00017 	ldw	r3,-32768(gp)
 8000524:	19080017 	ldw	r4,8192(r3)
 8000528:	e0fff817 	ldw	r3,-32(fp)
 800052c:	20c6b03a 	or	r3,r4,r3
 8000530:	10c80015 	stw	r3,8192(r2)
			 break;
 8000534:	00017f06 	br	8000b34 <setColorPalette+0x73c>
	 case (1):
		    vga_ctrl->palette[0] &= ~(0xFFF << 13);
 8000538:	d0e00017 	ldw	r3,-32768(gp)
 800053c:	d0a00017 	ldw	r2,-32768(gp)
 8000540:	11080017 	ldw	r4,8192(r2)
 8000544:	00bf8034 	movhi	r2,65024
 8000548:	1087ffc4 	addi	r2,r2,8191
 800054c:	2084703a 	and	r2,r4,r2
 8000550:	18880015 	stw	r2,8192(r3)
			vga_ctrl->palette[0] |= r2;
 8000554:	d0a00017 	ldw	r2,-32768(gp)
 8000558:	d0e00017 	ldw	r3,-32768(gp)
 800055c:	19080017 	ldw	r4,8192(r3)
 8000560:	e0fff917 	ldw	r3,-28(fp)
 8000564:	20c6b03a 	or	r3,r4,r3
 8000568:	10c80015 	stw	r3,8192(r2)
			vga_ctrl->palette[0] |= g2;
 800056c:	d0a00017 	ldw	r2,-32768(gp)
 8000570:	d0e00017 	ldw	r3,-32768(gp)
 8000574:	19080017 	ldw	r4,8192(r3)
 8000578:	e0fffa17 	ldw	r3,-24(fp)
 800057c:	20c6b03a 	or	r3,r4,r3
 8000580:	10c80015 	stw	r3,8192(r2)
			vga_ctrl->palette[0] |= b2;
 8000584:	d0a00017 	ldw	r2,-32768(gp)
 8000588:	d0e00017 	ldw	r3,-32768(gp)
 800058c:	19080017 	ldw	r4,8192(r3)
 8000590:	e0fffb17 	ldw	r3,-20(fp)
 8000594:	20c6b03a 	or	r3,r4,r3
 8000598:	10c80015 	stw	r3,8192(r2)

			 break;
 800059c:	00016506 	br	8000b34 <setColorPalette+0x73c>
	 case (2):
			 vga_ctrl->palette[1] &= ~(0xFFF << 1);
 80005a0:	d0a00017 	ldw	r2,-32768(gp)
 80005a4:	d0e00017 	ldw	r3,-32768(gp)
 80005a8:	19080117 	ldw	r4,8196(r3)
 80005ac:	00f80044 	movi	r3,-8191
 80005b0:	20c6703a 	and	r3,r4,r3
 80005b4:	10c80115 	stw	r3,8196(r2)
			 vga_ctrl->palette[1] |= r1;
 80005b8:	d0a00017 	ldw	r2,-32768(gp)
 80005bc:	d0e00017 	ldw	r3,-32768(gp)
 80005c0:	19080117 	ldw	r4,8196(r3)
 80005c4:	e0fff617 	ldw	r3,-40(fp)
 80005c8:	20c6b03a 	or	r3,r4,r3
 80005cc:	10c80115 	stw	r3,8196(r2)
			 vga_ctrl->palette[1] |= g1;
 80005d0:	d0a00017 	ldw	r2,-32768(gp)
 80005d4:	d0e00017 	ldw	r3,-32768(gp)
 80005d8:	19080117 	ldw	r4,8196(r3)
 80005dc:	e0fff717 	ldw	r3,-36(fp)
 80005e0:	20c6b03a 	or	r3,r4,r3
 80005e4:	10c80115 	stw	r3,8196(r2)
			 vga_ctrl->palette[1] |= b1;
 80005e8:	d0a00017 	ldw	r2,-32768(gp)
 80005ec:	d0e00017 	ldw	r3,-32768(gp)
 80005f0:	19080117 	ldw	r4,8196(r3)
 80005f4:	e0fff817 	ldw	r3,-32(fp)
 80005f8:	20c6b03a 	or	r3,r4,r3
 80005fc:	10c80115 	stw	r3,8196(r2)
			 break;
 8000600:	00014c06 	br	8000b34 <setColorPalette+0x73c>
	 case (3):
		    vga_ctrl->palette[1] &= ~(0xFFF << 13);
 8000604:	d0e00017 	ldw	r3,-32768(gp)
 8000608:	d0a00017 	ldw	r2,-32768(gp)
 800060c:	11080117 	ldw	r4,8196(r2)
 8000610:	00bf8034 	movhi	r2,65024
 8000614:	1087ffc4 	addi	r2,r2,8191
 8000618:	2084703a 	and	r2,r4,r2
 800061c:	18880115 	stw	r2,8196(r3)
			vga_ctrl->palette[1] |= r2;
 8000620:	d0a00017 	ldw	r2,-32768(gp)
 8000624:	d0e00017 	ldw	r3,-32768(gp)
 8000628:	19080117 	ldw	r4,8196(r3)
 800062c:	e0fff917 	ldw	r3,-28(fp)
 8000630:	20c6b03a 	or	r3,r4,r3
 8000634:	10c80115 	stw	r3,8196(r2)
			vga_ctrl->palette[1] |= g2;
 8000638:	d0a00017 	ldw	r2,-32768(gp)
 800063c:	d0e00017 	ldw	r3,-32768(gp)
 8000640:	19080117 	ldw	r4,8196(r3)
 8000644:	e0fffa17 	ldw	r3,-24(fp)
 8000648:	20c6b03a 	or	r3,r4,r3
 800064c:	10c80115 	stw	r3,8196(r2)
			vga_ctrl->palette[1] |= b2;
 8000650:	d0a00017 	ldw	r2,-32768(gp)
 8000654:	d0e00017 	ldw	r3,-32768(gp)
 8000658:	19080117 	ldw	r4,8196(r3)
 800065c:	e0fffb17 	ldw	r3,-20(fp)
 8000660:	20c6b03a 	or	r3,r4,r3
 8000664:	10c80115 	stw	r3,8196(r2)
			 break;
 8000668:	00013206 	br	8000b34 <setColorPalette+0x73c>
     case 4:  // Green
    	 	 vga_ctrl->palette[2] &= ~(0xFFF << 1);
 800066c:	d0a00017 	ldw	r2,-32768(gp)
 8000670:	d0e00017 	ldw	r3,-32768(gp)
 8000674:	19080217 	ldw	r4,8200(r3)
 8000678:	00f80044 	movi	r3,-8191
 800067c:	20c6703a 	and	r3,r4,r3
 8000680:	10c80215 	stw	r3,8200(r2)
			 vga_ctrl->palette[2] |= r1;
 8000684:	d0a00017 	ldw	r2,-32768(gp)
 8000688:	d0e00017 	ldw	r3,-32768(gp)
 800068c:	19080217 	ldw	r4,8200(r3)
 8000690:	e0fff617 	ldw	r3,-40(fp)
 8000694:	20c6b03a 	or	r3,r4,r3
 8000698:	10c80215 	stw	r3,8200(r2)
			 vga_ctrl->palette[2] |= g1;
 800069c:	d0a00017 	ldw	r2,-32768(gp)
 80006a0:	d0e00017 	ldw	r3,-32768(gp)
 80006a4:	19080217 	ldw	r4,8200(r3)
 80006a8:	e0fff717 	ldw	r3,-36(fp)
 80006ac:	20c6b03a 	or	r3,r4,r3
 80006b0:	10c80215 	stw	r3,8200(r2)
			 vga_ctrl->palette[2] |= b1;
 80006b4:	d0a00017 	ldw	r2,-32768(gp)
 80006b8:	d0e00017 	ldw	r3,-32768(gp)
 80006bc:	19080217 	ldw	r4,8200(r3)
 80006c0:	e0fff817 	ldw	r3,-32(fp)
 80006c4:	20c6b03a 	or	r3,r4,r3
 80006c8:	10c80215 	stw	r3,8200(r2)
			 break;
 80006cc:	00011906 	br	8000b34 <setColorPalette+0x73c>

     case 5:  // Bright green
    	 vga_ctrl->palette[2] &= ~(0xFFF << 13);
 80006d0:	d0e00017 	ldw	r3,-32768(gp)
 80006d4:	d0a00017 	ldw	r2,-32768(gp)
 80006d8:	11080217 	ldw	r4,8200(r2)
 80006dc:	00bf8034 	movhi	r2,65024
 80006e0:	1087ffc4 	addi	r2,r2,8191
 80006e4:	2084703a 	and	r2,r4,r2
 80006e8:	18880215 	stw	r2,8200(r3)
         vga_ctrl->palette[2] |= r2;
 80006ec:	d0a00017 	ldw	r2,-32768(gp)
 80006f0:	d0e00017 	ldw	r3,-32768(gp)
 80006f4:	19080217 	ldw	r4,8200(r3)
 80006f8:	e0fff917 	ldw	r3,-28(fp)
 80006fc:	20c6b03a 	or	r3,r4,r3
 8000700:	10c80215 	stw	r3,8200(r2)
         vga_ctrl->palette[2] |= g2;
 8000704:	d0a00017 	ldw	r2,-32768(gp)
 8000708:	d0e00017 	ldw	r3,-32768(gp)
 800070c:	19080217 	ldw	r4,8200(r3)
 8000710:	e0fffa17 	ldw	r3,-24(fp)
 8000714:	20c6b03a 	or	r3,r4,r3
 8000718:	10c80215 	stw	r3,8200(r2)
         vga_ctrl->palette[2] |= b2;
 800071c:	d0a00017 	ldw	r2,-32768(gp)
 8000720:	d0e00017 	ldw	r3,-32768(gp)
 8000724:	19080217 	ldw	r4,8200(r3)
 8000728:	e0fffb17 	ldw	r3,-20(fp)
 800072c:	20c6b03a 	or	r3,r4,r3
 8000730:	10c80215 	stw	r3,8200(r2)
         break;
 8000734:	0000ff06 	br	8000b34 <setColorPalette+0x73c>

     case 6:  // Yellow
    	 vga_ctrl->palette[3] &= ~(0xFFF << 1);
 8000738:	d0a00017 	ldw	r2,-32768(gp)
 800073c:	d0e00017 	ldw	r3,-32768(gp)
 8000740:	19080317 	ldw	r4,8204(r3)
 8000744:	00f80044 	movi	r3,-8191
 8000748:	20c6703a 	and	r3,r4,r3
 800074c:	10c80315 	stw	r3,8204(r2)
         vga_ctrl->palette[3] |= r1;
 8000750:	d0a00017 	ldw	r2,-32768(gp)
 8000754:	d0e00017 	ldw	r3,-32768(gp)
 8000758:	19080317 	ldw	r4,8204(r3)
 800075c:	e0fff617 	ldw	r3,-40(fp)
 8000760:	20c6b03a 	or	r3,r4,r3
 8000764:	10c80315 	stw	r3,8204(r2)
         vga_ctrl->palette[3] |= g1;
 8000768:	d0a00017 	ldw	r2,-32768(gp)
 800076c:	d0e00017 	ldw	r3,-32768(gp)
 8000770:	19080317 	ldw	r4,8204(r3)
 8000774:	e0fff717 	ldw	r3,-36(fp)
 8000778:	20c6b03a 	or	r3,r4,r3
 800077c:	10c80315 	stw	r3,8204(r2)
         vga_ctrl->palette[3] |= b1;
 8000780:	d0a00017 	ldw	r2,-32768(gp)
 8000784:	d0e00017 	ldw	r3,-32768(gp)
 8000788:	19080317 	ldw	r4,8204(r3)
 800078c:	e0fff817 	ldw	r3,-32(fp)
 8000790:	20c6b03a 	or	r3,r4,r3
 8000794:	10c80315 	stw	r3,8204(r2)
         break;
 8000798:	0000e606 	br	8000b34 <setColorPalette+0x73c>

     case 7:  // Bright yellow
    	 vga_ctrl->palette[3] &= ~(0xFFF << 13);
 800079c:	d0e00017 	ldw	r3,-32768(gp)
 80007a0:	d0a00017 	ldw	r2,-32768(gp)
 80007a4:	11080317 	ldw	r4,8204(r2)
 80007a8:	00bf8034 	movhi	r2,65024
 80007ac:	1087ffc4 	addi	r2,r2,8191
 80007b0:	2084703a 	and	r2,r4,r2
 80007b4:	18880315 	stw	r2,8204(r3)
         vga_ctrl->palette[3] |= r2;
 80007b8:	d0a00017 	ldw	r2,-32768(gp)
 80007bc:	d0e00017 	ldw	r3,-32768(gp)
 80007c0:	19080317 	ldw	r4,8204(r3)
 80007c4:	e0fff917 	ldw	r3,-28(fp)
 80007c8:	20c6b03a 	or	r3,r4,r3
 80007cc:	10c80315 	stw	r3,8204(r2)
         vga_ctrl->palette[3] |= g2;
 80007d0:	d0a00017 	ldw	r2,-32768(gp)
 80007d4:	d0e00017 	ldw	r3,-32768(gp)
 80007d8:	19080317 	ldw	r4,8204(r3)
 80007dc:	e0fffa17 	ldw	r3,-24(fp)
 80007e0:	20c6b03a 	or	r3,r4,r3
 80007e4:	10c80315 	stw	r3,8204(r2)
         vga_ctrl->palette[3] |= b2;
 80007e8:	d0a00017 	ldw	r2,-32768(gp)
 80007ec:	d0e00017 	ldw	r3,-32768(gp)
 80007f0:	19080317 	ldw	r4,8204(r3)
 80007f4:	e0fffb17 	ldw	r3,-20(fp)
 80007f8:	20c6b03a 	or	r3,r4,r3
 80007fc:	10c80315 	stw	r3,8204(r2)
         break;
 8000800:	0000cc06 	br	8000b34 <setColorPalette+0x73c>

     case 8:  // Blue
    	 vga_ctrl->palette[4] &= ~(0xFFF << 1);
 8000804:	d0a00017 	ldw	r2,-32768(gp)
 8000808:	d0e00017 	ldw	r3,-32768(gp)
 800080c:	19080417 	ldw	r4,8208(r3)
 8000810:	00f80044 	movi	r3,-8191
 8000814:	20c6703a 	and	r3,r4,r3
 8000818:	10c80415 	stw	r3,8208(r2)
         vga_ctrl->palette[4] |= r1;
 800081c:	d0a00017 	ldw	r2,-32768(gp)
 8000820:	d0e00017 	ldw	r3,-32768(gp)
 8000824:	19080417 	ldw	r4,8208(r3)
 8000828:	e0fff617 	ldw	r3,-40(fp)
 800082c:	20c6b03a 	or	r3,r4,r3
 8000830:	10c80415 	stw	r3,8208(r2)
         vga_ctrl->palette[4] |= g1;
 8000834:	d0a00017 	ldw	r2,-32768(gp)
 8000838:	d0e00017 	ldw	r3,-32768(gp)
 800083c:	19080417 	ldw	r4,8208(r3)
 8000840:	e0fff717 	ldw	r3,-36(fp)
 8000844:	20c6b03a 	or	r3,r4,r3
 8000848:	10c80415 	stw	r3,8208(r2)
         vga_ctrl->palette[4] |= b1;
 800084c:	d0a00017 	ldw	r2,-32768(gp)
 8000850:	d0e00017 	ldw	r3,-32768(gp)
 8000854:	19080417 	ldw	r4,8208(r3)
 8000858:	e0fff817 	ldw	r3,-32(fp)
 800085c:	20c6b03a 	or	r3,r4,r3
 8000860:	10c80415 	stw	r3,8208(r2)
         break;
 8000864:	0000b306 	br	8000b34 <setColorPalette+0x73c>

     case 9:  // Light blue
    	 vga_ctrl->palette[4] &= ~(0xFFF << 13);
 8000868:	d0e00017 	ldw	r3,-32768(gp)
 800086c:	d0a00017 	ldw	r2,-32768(gp)
 8000870:	11080417 	ldw	r4,8208(r2)
 8000874:	00bf8034 	movhi	r2,65024
 8000878:	1087ffc4 	addi	r2,r2,8191
 800087c:	2084703a 	and	r2,r4,r2
 8000880:	18880415 	stw	r2,8208(r3)
         vga_ctrl->palette[4] |= r2;
 8000884:	d0a00017 	ldw	r2,-32768(gp)
 8000888:	d0e00017 	ldw	r3,-32768(gp)
 800088c:	19080417 	ldw	r4,8208(r3)
 8000890:	e0fff917 	ldw	r3,-28(fp)
 8000894:	20c6b03a 	or	r3,r4,r3
 8000898:	10c80415 	stw	r3,8208(r2)
         vga_ctrl->palette[4] |= g2;
 800089c:	d0a00017 	ldw	r2,-32768(gp)
 80008a0:	d0e00017 	ldw	r3,-32768(gp)
 80008a4:	19080417 	ldw	r4,8208(r3)
 80008a8:	e0fffa17 	ldw	r3,-24(fp)
 80008ac:	20c6b03a 	or	r3,r4,r3
 80008b0:	10c80415 	stw	r3,8208(r2)
         vga_ctrl->palette[4] |= b2;
 80008b4:	d0a00017 	ldw	r2,-32768(gp)
 80008b8:	d0e00017 	ldw	r3,-32768(gp)
 80008bc:	19080417 	ldw	r4,8208(r3)
 80008c0:	e0fffb17 	ldw	r3,-20(fp)
 80008c4:	20c6b03a 	or	r3,r4,r3
 80008c8:	10c80415 	stw	r3,8208(r2)
         break;
 80008cc:	00009906 	br	8000b34 <setColorPalette+0x73c>

     case 10:  // Light green
    	 vga_ctrl->palette[5] &= ~(0xFFF << 1);
 80008d0:	d0a00017 	ldw	r2,-32768(gp)
 80008d4:	d0e00017 	ldw	r3,-32768(gp)
 80008d8:	19080517 	ldw	r4,8212(r3)
 80008dc:	00f80044 	movi	r3,-8191
 80008e0:	20c6703a 	and	r3,r4,r3
 80008e4:	10c80515 	stw	r3,8212(r2)
         vga_ctrl->palette[5] |= r1;
 80008e8:	d0a00017 	ldw	r2,-32768(gp)
 80008ec:	d0e00017 	ldw	r3,-32768(gp)
 80008f0:	19080517 	ldw	r4,8212(r3)
 80008f4:	e0fff617 	ldw	r3,-40(fp)
 80008f8:	20c6b03a 	or	r3,r4,r3
 80008fc:	10c80515 	stw	r3,8212(r2)
         vga_ctrl->palette[5] |= g1;
 8000900:	d0a00017 	ldw	r2,-32768(gp)
 8000904:	d0e00017 	ldw	r3,-32768(gp)
 8000908:	19080517 	ldw	r4,8212(r3)
 800090c:	e0fff717 	ldw	r3,-36(fp)
 8000910:	20c6b03a 	or	r3,r4,r3
 8000914:	10c80515 	stw	r3,8212(r2)
         vga_ctrl->palette[5] |= b1;
 8000918:	d0a00017 	ldw	r2,-32768(gp)
 800091c:	d0e00017 	ldw	r3,-32768(gp)
 8000920:	19080517 	ldw	r4,8212(r3)
 8000924:	e0fff817 	ldw	r3,-32(fp)
 8000928:	20c6b03a 	or	r3,r4,r3
 800092c:	10c80515 	stw	r3,8212(r2)
         break;
 8000930:	00008006 	br	8000b34 <setColorPalette+0x73c>
     case 11:
    	  vga_ctrl->palette[5] &= ~(0xFFF << 13);
 8000934:	d0e00017 	ldw	r3,-32768(gp)
 8000938:	d0a00017 	ldw	r2,-32768(gp)
 800093c:	11080517 	ldw	r4,8212(r2)
 8000940:	00bf8034 	movhi	r2,65024
 8000944:	1087ffc4 	addi	r2,r2,8191
 8000948:	2084703a 	and	r2,r4,r2
 800094c:	18880515 	stw	r2,8212(r3)
    	  vga_ctrl->palette[5] |= r2;
 8000950:	d0a00017 	ldw	r2,-32768(gp)
 8000954:	d0e00017 	ldw	r3,-32768(gp)
 8000958:	19080517 	ldw	r4,8212(r3)
 800095c:	e0fff917 	ldw	r3,-28(fp)
 8000960:	20c6b03a 	or	r3,r4,r3
 8000964:	10c80515 	stw	r3,8212(r2)
    	  vga_ctrl->palette[5] |= g2;
 8000968:	d0a00017 	ldw	r2,-32768(gp)
 800096c:	d0e00017 	ldw	r3,-32768(gp)
 8000970:	19080517 	ldw	r4,8212(r3)
 8000974:	e0fffa17 	ldw	r3,-24(fp)
 8000978:	20c6b03a 	or	r3,r4,r3
 800097c:	10c80515 	stw	r3,8212(r2)
	      vga_ctrl->palette[5] |= b2;
 8000980:	d0a00017 	ldw	r2,-32768(gp)
 8000984:	d0e00017 	ldw	r3,-32768(gp)
 8000988:	19080517 	ldw	r4,8212(r3)
 800098c:	e0fffb17 	ldw	r3,-20(fp)
 8000990:	20c6b03a 	or	r3,r4,r3
 8000994:	10c80515 	stw	r3,8212(r2)
	      break;
 8000998:	00006606 	br	8000b34 <setColorPalette+0x73c>

	case (12): //("light red"):
		vga_ctrl->palette[6] &= ~(0xFFF << 1);
 800099c:	d0a00017 	ldw	r2,-32768(gp)
 80009a0:	d0e00017 	ldw	r3,-32768(gp)
 80009a4:	19080617 	ldw	r4,8216(r3)
 80009a8:	00f80044 	movi	r3,-8191
 80009ac:	20c6703a 	and	r3,r4,r3
 80009b0:	10c80615 	stw	r3,8216(r2)
		vga_ctrl->palette[6] |= r1;
 80009b4:	d0a00017 	ldw	r2,-32768(gp)
 80009b8:	d0e00017 	ldw	r3,-32768(gp)
 80009bc:	19080617 	ldw	r4,8216(r3)
 80009c0:	e0fff617 	ldw	r3,-40(fp)
 80009c4:	20c6b03a 	or	r3,r4,r3
 80009c8:	10c80615 	stw	r3,8216(r2)
		vga_ctrl->palette[6] |= g1;
 80009cc:	d0a00017 	ldw	r2,-32768(gp)
 80009d0:	d0e00017 	ldw	r3,-32768(gp)
 80009d4:	19080617 	ldw	r4,8216(r3)
 80009d8:	e0fff717 	ldw	r3,-36(fp)
 80009dc:	20c6b03a 	or	r3,r4,r3
 80009e0:	10c80615 	stw	r3,8216(r2)
		vga_ctrl->palette[6] |= b1;
 80009e4:	d0a00017 	ldw	r2,-32768(gp)
 80009e8:	d0e00017 	ldw	r3,-32768(gp)
 80009ec:	19080617 	ldw	r4,8216(r3)
 80009f0:	e0fff817 	ldw	r3,-32(fp)
 80009f4:	20c6b03a 	or	r3,r4,r3
 80009f8:	10c80615 	stw	r3,8216(r2)
		break;
 80009fc:	00004d06 	br	8000b34 <setColorPalette+0x73c>
	case (13): //("light magenta"):
		vga_ctrl->palette[6] &= ~(0xFFF << 13);
 8000a00:	d0e00017 	ldw	r3,-32768(gp)
 8000a04:	d0a00017 	ldw	r2,-32768(gp)
 8000a08:	11080617 	ldw	r4,8216(r2)
 8000a0c:	00bf8034 	movhi	r2,65024
 8000a10:	1087ffc4 	addi	r2,r2,8191
 8000a14:	2084703a 	and	r2,r4,r2
 8000a18:	18880615 	stw	r2,8216(r3)
		vga_ctrl->palette[6] |= r2;
 8000a1c:	d0a00017 	ldw	r2,-32768(gp)
 8000a20:	d0e00017 	ldw	r3,-32768(gp)
 8000a24:	19080617 	ldw	r4,8216(r3)
 8000a28:	e0fff917 	ldw	r3,-28(fp)
 8000a2c:	20c6b03a 	or	r3,r4,r3
 8000a30:	10c80615 	stw	r3,8216(r2)
		vga_ctrl->palette[6] |= g2;
 8000a34:	d0a00017 	ldw	r2,-32768(gp)
 8000a38:	d0e00017 	ldw	r3,-32768(gp)
 8000a3c:	19080617 	ldw	r4,8216(r3)
 8000a40:	e0fffa17 	ldw	r3,-24(fp)
 8000a44:	20c6b03a 	or	r3,r4,r3
 8000a48:	10c80615 	stw	r3,8216(r2)
		vga_ctrl->palette[6] |= b2;
 8000a4c:	d0a00017 	ldw	r2,-32768(gp)
 8000a50:	d0e00017 	ldw	r3,-32768(gp)
 8000a54:	19080617 	ldw	r4,8216(r3)
 8000a58:	e0fffb17 	ldw	r3,-20(fp)
 8000a5c:	20c6b03a 	or	r3,r4,r3
 8000a60:	10c80615 	stw	r3,8216(r2)
		break;
 8000a64:	00003306 	br	8000b34 <setColorPalette+0x73c>
	case (14): //("yellow"):
		vga_ctrl->palette[7] &= ~(0xFFF << 1);
 8000a68:	d0a00017 	ldw	r2,-32768(gp)
 8000a6c:	d0e00017 	ldw	r3,-32768(gp)
 8000a70:	19080717 	ldw	r4,8220(r3)
 8000a74:	00f80044 	movi	r3,-8191
 8000a78:	20c6703a 	and	r3,r4,r3
 8000a7c:	10c80715 	stw	r3,8220(r2)
		vga_ctrl->palette[7] |= r1;
 8000a80:	d0a00017 	ldw	r2,-32768(gp)
 8000a84:	d0e00017 	ldw	r3,-32768(gp)
 8000a88:	19080717 	ldw	r4,8220(r3)
 8000a8c:	e0fff617 	ldw	r3,-40(fp)
 8000a90:	20c6b03a 	or	r3,r4,r3
 8000a94:	10c80715 	stw	r3,8220(r2)
		vga_ctrl->palette[7] |= g1;
 8000a98:	d0a00017 	ldw	r2,-32768(gp)
 8000a9c:	d0e00017 	ldw	r3,-32768(gp)
 8000aa0:	19080717 	ldw	r4,8220(r3)
 8000aa4:	e0fff717 	ldw	r3,-36(fp)
 8000aa8:	20c6b03a 	or	r3,r4,r3
 8000aac:	10c80715 	stw	r3,8220(r2)
		vga_ctrl->palette[7] |= b1;
 8000ab0:	d0a00017 	ldw	r2,-32768(gp)
 8000ab4:	d0e00017 	ldw	r3,-32768(gp)
 8000ab8:	19080717 	ldw	r4,8220(r3)
 8000abc:	e0fff817 	ldw	r3,-32(fp)
 8000ac0:	20c6b03a 	or	r3,r4,r3
 8000ac4:	10c80715 	stw	r3,8220(r2)
		break;
 8000ac8:	00001a06 	br	8000b34 <setColorPalette+0x73c>
	case (15): //("white"):
		vga_ctrl->palette[7] &= ~(0xFFF << 13);
 8000acc:	d0e00017 	ldw	r3,-32768(gp)
 8000ad0:	d0a00017 	ldw	r2,-32768(gp)
 8000ad4:	11080717 	ldw	r4,8220(r2)
 8000ad8:	00bf8034 	movhi	r2,65024
 8000adc:	1087ffc4 	addi	r2,r2,8191
 8000ae0:	2084703a 	and	r2,r4,r2
 8000ae4:	18880715 	stw	r2,8220(r3)
		vga_ctrl->palette[7] |= r2;
 8000ae8:	d0a00017 	ldw	r2,-32768(gp)
 8000aec:	d0e00017 	ldw	r3,-32768(gp)
 8000af0:	19080717 	ldw	r4,8220(r3)
 8000af4:	e0fff917 	ldw	r3,-28(fp)
 8000af8:	20c6b03a 	or	r3,r4,r3
 8000afc:	10c80715 	stw	r3,8220(r2)
		vga_ctrl->palette[7] |= g2;
 8000b00:	d0a00017 	ldw	r2,-32768(gp)
 8000b04:	d0e00017 	ldw	r3,-32768(gp)
 8000b08:	19080717 	ldw	r4,8220(r3)
 8000b0c:	e0fffa17 	ldw	r3,-24(fp)
 8000b10:	20c6b03a 	or	r3,r4,r3
 8000b14:	10c80715 	stw	r3,8220(r2)
		vga_ctrl->palette[7] |= b2;
 8000b18:	d0a00017 	ldw	r2,-32768(gp)
 8000b1c:	d0e00017 	ldw	r3,-32768(gp)
 8000b20:	19080717 	ldw	r4,8220(r3)
 8000b24:	e0fffb17 	ldw	r3,-20(fp)
 8000b28:	20c6b03a 	or	r3,r4,r3
 8000b2c:	10c80715 	stw	r3,8220(r2)
	    break;
 8000b30:	0001883a 	nop
	}



}
 8000b34:	0001883a 	nop
 8000b38:	e037883a 	mov	sp,fp
 8000b3c:	df000017 	ldw	fp,0(sp)
 8000b40:	dec00104 	addi	sp,sp,4
 8000b44:	f800283a 	ret

08000b48 <textVGAColorScreenSaver>:


void textVGAColorScreenSaver()
{
 8000b48:	deffe004 	addi	sp,sp,-128
 8000b4c:	dfc01f15 	stw	ra,124(sp)
 8000b50:	df001e15 	stw	fp,120(sp)
 8000b54:	dcc01d15 	stw	r19,116(sp)
 8000b58:	dc801c15 	stw	r18,112(sp)
 8000b5c:	dc401b15 	stw	r17,108(sp)
 8000b60:	dc001a15 	stw	r16,104(sp)
 8000b64:	df001e04 	addi	fp,sp,120
	//This is the function you call for your week 2 demo
	char color_string[80];
    int fg, bg, x, y;
	textVGAColorClr();
 8000b68:	80002980 	call	8000298 <textVGAColorClr>
	//initialize palette
	for (int i = 0; i < 16; i++)
 8000b6c:	e03fe515 	stw	zero,-108(fp)
 8000b70:	00002806 	br	8000c14 <textVGAColorScreenSaver+0xcc>
	{
		setColorPalette (i, colors[i].red, colors[i].green, colors[i].blue);
 8000b74:	e0bfe517 	ldw	r2,-108(fp)
 8000b78:	14403fcc 	andi	r17,r2,255
 8000b7c:	04020074 	movhi	r16,2049
 8000b80:	843bb304 	addi	r16,r16,-4404
 8000b84:	e0bfe517 	ldw	r2,-108(fp)
 8000b88:	014005c4 	movi	r5,23
 8000b8c:	1009883a 	mov	r4,r2
 8000b90:	80014a80 	call	80014a8 <__mulsi3>
 8000b94:	8085883a 	add	r2,r16,r2
 8000b98:	10800504 	addi	r2,r2,20
 8000b9c:	10800003 	ldbu	r2,0(r2)
 8000ba0:	14803fcc 	andi	r18,r2,255
 8000ba4:	04020074 	movhi	r16,2049
 8000ba8:	843bb304 	addi	r16,r16,-4404
 8000bac:	e0bfe517 	ldw	r2,-108(fp)
 8000bb0:	014005c4 	movi	r5,23
 8000bb4:	1009883a 	mov	r4,r2
 8000bb8:	80014a80 	call	80014a8 <__mulsi3>
 8000bbc:	8085883a 	add	r2,r16,r2
 8000bc0:	10800544 	addi	r2,r2,21
 8000bc4:	10800003 	ldbu	r2,0(r2)
 8000bc8:	14c03fcc 	andi	r19,r2,255
 8000bcc:	04020074 	movhi	r16,2049
 8000bd0:	843bb304 	addi	r16,r16,-4404
 8000bd4:	e0bfe517 	ldw	r2,-108(fp)
 8000bd8:	014005c4 	movi	r5,23
 8000bdc:	1009883a 	mov	r4,r2
 8000be0:	80014a80 	call	80014a8 <__mulsi3>
 8000be4:	8085883a 	add	r2,r16,r2
 8000be8:	10800584 	addi	r2,r2,22
 8000bec:	10800003 	ldbu	r2,0(r2)
 8000bf0:	10803fcc 	andi	r2,r2,255
 8000bf4:	100f883a 	mov	r7,r2
 8000bf8:	980d883a 	mov	r6,r19
 8000bfc:	900b883a 	mov	r5,r18
 8000c00:	8809883a 	mov	r4,r17
 8000c04:	80003f80 	call	80003f8 <setColorPalette>
	//This is the function you call for your week 2 demo
	char color_string[80];
    int fg, bg, x, y;
	textVGAColorClr();
	//initialize palette
	for (int i = 0; i < 16; i++)
 8000c08:	e0bfe517 	ldw	r2,-108(fp)
 8000c0c:	10800044 	addi	r2,r2,1
 8000c10:	e0bfe515 	stw	r2,-108(fp)
 8000c14:	e0bfe517 	ldw	r2,-108(fp)
 8000c18:	10800410 	cmplti	r2,r2,16
 8000c1c:	103fd51e 	bne	r2,zero,8000b74 <__alt_data_end+0xfc000b74>
	{
		setColorPalette (i, colors[i].red, colors[i].green, colors[i].blue);
	}
	while (1)
	{
		fg = rand() % 16;
 8000c20:	80014e80 	call	80014e8 <rand>
 8000c24:	1007883a 	mov	r3,r2
 8000c28:	00a00034 	movhi	r2,32768
 8000c2c:	108003c4 	addi	r2,r2,15
 8000c30:	1884703a 	and	r2,r3,r2
 8000c34:	1000040e 	bge	r2,zero,8000c48 <textVGAColorScreenSaver+0x100>
 8000c38:	10bfffc4 	addi	r2,r2,-1
 8000c3c:	00fffc04 	movi	r3,-16
 8000c40:	10c4b03a 	or	r2,r2,r3
 8000c44:	10800044 	addi	r2,r2,1
 8000c48:	e0bfe315 	stw	r2,-116(fp)
		bg = rand() % 16;
 8000c4c:	80014e80 	call	80014e8 <rand>
 8000c50:	1007883a 	mov	r3,r2
 8000c54:	00a00034 	movhi	r2,32768
 8000c58:	108003c4 	addi	r2,r2,15
 8000c5c:	1884703a 	and	r2,r3,r2
 8000c60:	1000040e 	bge	r2,zero,8000c74 <textVGAColorScreenSaver+0x12c>
 8000c64:	10bfffc4 	addi	r2,r2,-1
 8000c68:	00fffc04 	movi	r3,-16
 8000c6c:	10c4b03a 	or	r2,r2,r3
 8000c70:	10800044 	addi	r2,r2,1
 8000c74:	e0bfe415 	stw	r2,-112(fp)
		while (fg == bg)
 8000c78:	00001606 	br	8000cd4 <textVGAColorScreenSaver+0x18c>
		{
			fg = rand() % 16;
 8000c7c:	80014e80 	call	80014e8 <rand>
 8000c80:	1007883a 	mov	r3,r2
 8000c84:	00a00034 	movhi	r2,32768
 8000c88:	108003c4 	addi	r2,r2,15
 8000c8c:	1884703a 	and	r2,r3,r2
 8000c90:	1000040e 	bge	r2,zero,8000ca4 <textVGAColorScreenSaver+0x15c>
 8000c94:	10bfffc4 	addi	r2,r2,-1
 8000c98:	00fffc04 	movi	r3,-16
 8000c9c:	10c4b03a 	or	r2,r2,r3
 8000ca0:	10800044 	addi	r2,r2,1
 8000ca4:	e0bfe315 	stw	r2,-116(fp)
			bg = rand() % 16;
 8000ca8:	80014e80 	call	80014e8 <rand>
 8000cac:	1007883a 	mov	r3,r2
 8000cb0:	00a00034 	movhi	r2,32768
 8000cb4:	108003c4 	addi	r2,r2,15
 8000cb8:	1884703a 	and	r2,r3,r2
 8000cbc:	1000040e 	bge	r2,zero,8000cd0 <textVGAColorScreenSaver+0x188>
 8000cc0:	10bfffc4 	addi	r2,r2,-1
 8000cc4:	00fffc04 	movi	r3,-16
 8000cc8:	10c4b03a 	or	r2,r2,r3
 8000ccc:	10800044 	addi	r2,r2,1
 8000cd0:	e0bfe415 	stw	r2,-112(fp)
	}
	while (1)
	{
		fg = rand() % 16;
		bg = rand() % 16;
		while (fg == bg)
 8000cd4:	e0ffe317 	ldw	r3,-116(fp)
 8000cd8:	e0bfe417 	ldw	r2,-112(fp)
 8000cdc:	18bfe726 	beq	r3,r2,8000c7c <__alt_data_end+0xfc000c7c>
		{
			fg = rand() % 16;
			bg = rand() % 16;
		}
		sprintf(color_string, "Drawing %s text with %s background", colors[fg].name, colors[bg].name);
 8000ce0:	014005c4 	movi	r5,23
 8000ce4:	e13fe317 	ldw	r4,-116(fp)
 8000ce8:	80014a80 	call	80014a8 <__mulsi3>
 8000cec:	1007883a 	mov	r3,r2
 8000cf0:	00820074 	movhi	r2,2049
 8000cf4:	10bbb304 	addi	r2,r2,-4404
 8000cf8:	18a1883a 	add	r16,r3,r2
 8000cfc:	014005c4 	movi	r5,23
 8000d00:	e13fe417 	ldw	r4,-112(fp)
 8000d04:	80014a80 	call	80014a8 <__mulsi3>
 8000d08:	1007883a 	mov	r3,r2
 8000d0c:	00820074 	movhi	r2,2049
 8000d10:	10bbb304 	addi	r2,r2,-4404
 8000d14:	1887883a 	add	r3,r3,r2
 8000d18:	e0bfe804 	addi	r2,fp,-96
 8000d1c:	180f883a 	mov	r7,r3
 8000d20:	800d883a 	mov	r6,r16
 8000d24:	01420074 	movhi	r5,2049
 8000d28:	297ac604 	addi	r5,r5,-5352
 8000d2c:	1009883a 	mov	r4,r2
 8000d30:	80015a40 	call	80015a4 <sprintf>
		x = rand() % (80-strlen(color_string));
 8000d34:	80014e80 	call	80014e8 <rand>
 8000d38:	1021883a 	mov	r16,r2
 8000d3c:	e0bfe804 	addi	r2,fp,-96
 8000d40:	1009883a 	mov	r4,r2
 8000d44:	80016100 	call	8001610 <strlen>
 8000d48:	1007883a 	mov	r3,r2
 8000d4c:	00801404 	movi	r2,80
 8000d50:	10c5c83a 	sub	r2,r2,r3
 8000d54:	100b883a 	mov	r5,r2
 8000d58:	8009883a 	mov	r4,r16
 8000d5c:	80014500 	call	8001450 <__umodsi3>
 8000d60:	e0bfe615 	stw	r2,-104(fp)
		y = rand() % 30;
 8000d64:	80014e80 	call	80014e8 <rand>
 8000d68:	01400784 	movi	r5,30
 8000d6c:	1009883a 	mov	r4,r2
 8000d70:	80013780 	call	8001378 <__modsi3>
 8000d74:	e0bfe715 	stw	r2,-100(fp)
		textVGADrawColorText (color_string, x, y, bg, fg);
 8000d78:	e0bfe417 	ldw	r2,-112(fp)
 8000d7c:	11003fcc 	andi	r4,r2,255
 8000d80:	e0bfe317 	ldw	r2,-116(fp)
 8000d84:	10803fcc 	andi	r2,r2,255
 8000d88:	e0ffe804 	addi	r3,fp,-96
 8000d8c:	d8800015 	stw	r2,0(sp)
 8000d90:	200f883a 	mov	r7,r4
 8000d94:	e1bfe717 	ldw	r6,-100(fp)
 8000d98:	e17fe617 	ldw	r5,-104(fp)
 8000d9c:	1809883a 	mov	r4,r3
 8000da0:	80002e80 	call	80002e8 <textVGADrawColorText>
		usleep (100000);
 8000da4:	010000b4 	movhi	r4,2
 8000da8:	2121a804 	addi	r4,r4,-31072
 8000dac:	800c9bc0 	call	800c9bc <usleep>
	}
 8000db0:	003f9b06 	br	8000c20 <__alt_data_end+0xfc000c20>

08000db4 <textVGAColorHexQuiz>:
}

void textVGAColorHexQuiz()
{
 8000db4:	deffb004 	addi	sp,sp,-320
 8000db8:	dfc04f15 	stw	ra,316(sp)
 8000dbc:	df004e15 	stw	fp,312(sp)
 8000dc0:	dcc04d15 	stw	r19,308(sp)
 8000dc4:	dc804c15 	stw	r18,304(sp)
 8000dc8:	dc404b15 	stw	r17,300(sp)
 8000dcc:	dc004a15 	stw	r16,296(sp)
 8000dd0:	df004e04 	addi	fp,sp,312

	volatile unsigned int *SW_PIO = (unsigned int*)0x180;
 8000dd4:	00806004 	movi	r2,384
 8000dd8:	e0bfb915 	stw	r2,-284(fp)
	volatile unsigned int *SUBMIT_PIO = (unsigned int*)0x80;
 8000ddc:	00802004 	movi	r2,128
 8000de0:	e0bfba15 	stw	r2,-280(fp)
	volatile unsigned int *reset_PIO = (unsigned int*)0x70;
 8000de4:	00801c04 	movi	r2,112
 8000de8:	e0bfbb15 	stw	r2,-276(fp)
	int button_press;
	//This is the modified function for a random hexadecimal addition and subtraction quiz
	char question_string[80], answer_string[80], timer_string[80];
    int fg, bg, x, y, remaining_time = 300;
 8000dec:	00804b04 	movi	r2,300
 8000df0:	e0bfbc15 	stw	r2,-272(fp)
    time_t start_time, current_time, elapsed_time;

	textVGAColorClr();
 8000df4:	80002980 	call	8000298 <textVGAColorClr>
	//initialize palette
//	while(*reset_PIO != 0){
	for (int i = 0; i < 16; i++)
 8000df8:	e03fb515 	stw	zero,-300(fp)
 8000dfc:	00002806 	br	8000ea0 <textVGAColorHexQuiz+0xec>
	{
		setColorPalette (i, colors[i].red, colors[i].green, colors[i].blue);
 8000e00:	e0bfb517 	ldw	r2,-300(fp)
 8000e04:	14403fcc 	andi	r17,r2,255
 8000e08:	04020074 	movhi	r16,2049
 8000e0c:	843bb304 	addi	r16,r16,-4404
 8000e10:	e0bfb517 	ldw	r2,-300(fp)
 8000e14:	014005c4 	movi	r5,23
 8000e18:	1009883a 	mov	r4,r2
 8000e1c:	80014a80 	call	80014a8 <__mulsi3>
 8000e20:	8085883a 	add	r2,r16,r2
 8000e24:	10800504 	addi	r2,r2,20
 8000e28:	10800003 	ldbu	r2,0(r2)
 8000e2c:	14803fcc 	andi	r18,r2,255
 8000e30:	04020074 	movhi	r16,2049
 8000e34:	843bb304 	addi	r16,r16,-4404
 8000e38:	e0bfb517 	ldw	r2,-300(fp)
 8000e3c:	014005c4 	movi	r5,23
 8000e40:	1009883a 	mov	r4,r2
 8000e44:	80014a80 	call	80014a8 <__mulsi3>
 8000e48:	8085883a 	add	r2,r16,r2
 8000e4c:	10800544 	addi	r2,r2,21
 8000e50:	10800003 	ldbu	r2,0(r2)
 8000e54:	14c03fcc 	andi	r19,r2,255
 8000e58:	04020074 	movhi	r16,2049
 8000e5c:	843bb304 	addi	r16,r16,-4404
 8000e60:	e0bfb517 	ldw	r2,-300(fp)
 8000e64:	014005c4 	movi	r5,23
 8000e68:	1009883a 	mov	r4,r2
 8000e6c:	80014a80 	call	80014a8 <__mulsi3>
 8000e70:	8085883a 	add	r2,r16,r2
 8000e74:	10800584 	addi	r2,r2,22
 8000e78:	10800003 	ldbu	r2,0(r2)
 8000e7c:	10803fcc 	andi	r2,r2,255
 8000e80:	100f883a 	mov	r7,r2
 8000e84:	980d883a 	mov	r6,r19
 8000e88:	900b883a 	mov	r5,r18
 8000e8c:	8809883a 	mov	r4,r17
 8000e90:	80003f80 	call	80003f8 <setColorPalette>
    time_t start_time, current_time, elapsed_time;

	textVGAColorClr();
	//initialize palette
//	while(*reset_PIO != 0){
	for (int i = 0; i < 16; i++)
 8000e94:	e0bfb517 	ldw	r2,-300(fp)
 8000e98:	10800044 	addi	r2,r2,1
 8000e9c:	e0bfb515 	stw	r2,-300(fp)
 8000ea0:	e0bfb517 	ldw	r2,-300(fp)
 8000ea4:	10800410 	cmplti	r2,r2,16
 8000ea8:	103fd51e 	bne	r2,zero,8000e00 <__alt_data_end+0xfc000e00>
	{
		setColorPalette (i, colors[i].red, colors[i].green, colors[i].blue);
	}

		int hex1 = rand() % 256; //generate random hex value between 0-255
 8000eac:	80014e80 	call	80014e8 <rand>
 8000eb0:	1007883a 	mov	r3,r2
 8000eb4:	00a00034 	movhi	r2,32768
 8000eb8:	10803fc4 	addi	r2,r2,255
 8000ebc:	1884703a 	and	r2,r3,r2
 8000ec0:	1000040e 	bge	r2,zero,8000ed4 <textVGAColorHexQuiz+0x120>
 8000ec4:	10bfffc4 	addi	r2,r2,-1
 8000ec8:	00ffc004 	movi	r3,-256
 8000ecc:	10c4b03a 	or	r2,r2,r3
 8000ed0:	10800044 	addi	r2,r2,1
 8000ed4:	e0bfb615 	stw	r2,-296(fp)
		int hex2 = rand() % 256; //generate random hex value between 0-255
 8000ed8:	80014e80 	call	80014e8 <rand>
 8000edc:	1007883a 	mov	r3,r2
 8000ee0:	00a00034 	movhi	r2,32768
 8000ee4:	10803fc4 	addi	r2,r2,255
 8000ee8:	1884703a 	and	r2,r3,r2
 8000eec:	1000040e 	bge	r2,zero,8000f00 <textVGAColorHexQuiz+0x14c>
 8000ef0:	10bfffc4 	addi	r2,r2,-1
 8000ef4:	00ffc004 	movi	r3,-256
 8000ef8:	10c4b03a 	or	r2,r2,r3
 8000efc:	10800044 	addi	r2,r2,1
 8000f00:	e0bfb715 	stw	r2,-292(fp)
		int operation = rand() % 2; //generate random operation: 0 for addition, 1 for subtraction
 8000f04:	80014e80 	call	80014e8 <rand>
 8000f08:	1007883a 	mov	r3,r2
 8000f0c:	00a00034 	movhi	r2,32768
 8000f10:	10800044 	addi	r2,r2,1
 8000f14:	1884703a 	and	r2,r3,r2
 8000f18:	1000040e 	bge	r2,zero,8000f2c <textVGAColorHexQuiz+0x178>
 8000f1c:	10bfffc4 	addi	r2,r2,-1
 8000f20:	00ffff84 	movi	r3,-2
 8000f24:	10c4b03a 	or	r2,r2,r3
 8000f28:	10800044 	addi	r2,r2,1
 8000f2c:	e0bfbd15 	stw	r2,-268(fp)
		int correct_answer;
		while (hex1 <= hex2)
 8000f30:	00001606 	br	8000f8c <textVGAColorHexQuiz+0x1d8>
		{
			hex1 = rand() % 256;
 8000f34:	80014e80 	call	80014e8 <rand>
 8000f38:	1007883a 	mov	r3,r2
 8000f3c:	00a00034 	movhi	r2,32768
 8000f40:	10803fc4 	addi	r2,r2,255
 8000f44:	1884703a 	and	r2,r3,r2
 8000f48:	1000040e 	bge	r2,zero,8000f5c <textVGAColorHexQuiz+0x1a8>
 8000f4c:	10bfffc4 	addi	r2,r2,-1
 8000f50:	00ffc004 	movi	r3,-256
 8000f54:	10c4b03a 	or	r2,r2,r3
 8000f58:	10800044 	addi	r2,r2,1
 8000f5c:	e0bfb615 	stw	r2,-296(fp)
			hex2 = rand() % 256;
 8000f60:	80014e80 	call	80014e8 <rand>
 8000f64:	1007883a 	mov	r3,r2
 8000f68:	00a00034 	movhi	r2,32768
 8000f6c:	10803fc4 	addi	r2,r2,255
 8000f70:	1884703a 	and	r2,r3,r2
 8000f74:	1000040e 	bge	r2,zero,8000f88 <textVGAColorHexQuiz+0x1d4>
 8000f78:	10bfffc4 	addi	r2,r2,-1
 8000f7c:	00ffc004 	movi	r3,-256
 8000f80:	10c4b03a 	or	r2,r2,r3
 8000f84:	10800044 	addi	r2,r2,1
 8000f88:	e0bfb715 	stw	r2,-292(fp)

		int hex1 = rand() % 256; //generate random hex value between 0-255
		int hex2 = rand() % 256; //generate random hex value between 0-255
		int operation = rand() % 2; //generate random operation: 0 for addition, 1 for subtraction
		int correct_answer;
		while (hex1 <= hex2)
 8000f8c:	e0bfb617 	ldw	r2,-296(fp)
 8000f90:	e0ffb717 	ldw	r3,-292(fp)
 8000f94:	18bfe70e 	bge	r3,r2,8000f34 <__alt_data_end+0xfc000f34>
		{
			hex1 = rand() % 256;
			hex2 = rand() % 256;
		}
		if (operation == 0)
 8000f98:	e0bfbd17 	ldw	r2,-268(fp)
 8000f9c:	10000c1e 	bne	r2,zero,8000fd0 <textVGAColorHexQuiz+0x21c>
		{
			correct_answer = hex1 + hex2;
 8000fa0:	e0ffb617 	ldw	r3,-296(fp)
 8000fa4:	e0bfb717 	ldw	r2,-292(fp)
 8000fa8:	1885883a 	add	r2,r3,r2
 8000fac:	e0bfb815 	stw	r2,-288(fp)
			sprintf(question_string, "What is %02X + %02X?", hex1, hex2);
 8000fb0:	e0bfc004 	addi	r2,fp,-256
 8000fb4:	e1ffb717 	ldw	r7,-292(fp)
 8000fb8:	e1bfb617 	ldw	r6,-296(fp)
 8000fbc:	01420074 	movhi	r5,2049
 8000fc0:	297acf04 	addi	r5,r5,-5316
 8000fc4:	1009883a 	mov	r4,r2
 8000fc8:	80015a40 	call	80015a4 <sprintf>
 8000fcc:	00000b06 	br	8000ffc <textVGAColorHexQuiz+0x248>
		}
		else
		{
			correct_answer = hex1 - hex2;
 8000fd0:	e0ffb617 	ldw	r3,-296(fp)
 8000fd4:	e0bfb717 	ldw	r2,-292(fp)
 8000fd8:	1885c83a 	sub	r2,r3,r2
 8000fdc:	e0bfb815 	stw	r2,-288(fp)
			sprintf(question_string, "What is %02X - %02X?", hex1, hex2);
 8000fe0:	e0bfc004 	addi	r2,fp,-256
 8000fe4:	e1ffb717 	ldw	r7,-292(fp)
 8000fe8:	e1bfb617 	ldw	r6,-296(fp)
 8000fec:	01420074 	movhi	r5,2049
 8000ff0:	297ad504 	addi	r5,r5,-5292
 8000ff4:	1009883a 	mov	r4,r2
 8000ff8:	80015a40 	call	80015a4 <sprintf>
		}
       // remaining_time = 300 - difftime(time(NULL), start_time); //subtract the elapsed time from 5 minutes
        sprintf(timer_string, "Time: %02d:%02d", remaining_time / 60, remaining_time % 60);
 8000ffc:	e0bfbc17 	ldw	r2,-272(fp)
 8001000:	01400f04 	movi	r5,60
 8001004:	1009883a 	mov	r4,r2
 8001008:	80012f40 	call	80012f4 <__divsi3>
 800100c:	1021883a 	mov	r16,r2
 8001010:	e0bfbc17 	ldw	r2,-272(fp)
 8001014:	01400f04 	movi	r5,60
 8001018:	1009883a 	mov	r4,r2
 800101c:	80013780 	call	8001378 <__modsi3>
 8001020:	1007883a 	mov	r3,r2
 8001024:	e0bfe804 	addi	r2,fp,-96
 8001028:	180f883a 	mov	r7,r3
 800102c:	800d883a 	mov	r6,r16
 8001030:	01420074 	movhi	r5,2049
 8001034:	297adb04 	addi	r5,r5,-5268
 8001038:	1009883a 	mov	r4,r2
 800103c:	80015a40 	call	80015a4 <sprintf>


		x = rand() % (80-strlen(question_string));
 8001040:	80014e80 	call	80014e8 <rand>
 8001044:	1021883a 	mov	r16,r2
 8001048:	e0bfc004 	addi	r2,fp,-256
 800104c:	1009883a 	mov	r4,r2
 8001050:	80016100 	call	8001610 <strlen>
 8001054:	1007883a 	mov	r3,r2
 8001058:	00801404 	movi	r2,80
 800105c:	10c5c83a 	sub	r2,r2,r3
 8001060:	100b883a 	mov	r5,r2
 8001064:	8009883a 	mov	r4,r16
 8001068:	80014500 	call	8001450 <__umodsi3>
 800106c:	e0bfbe15 	stw	r2,-264(fp)
		y = rand() % 30;
 8001070:	80014e80 	call	80014e8 <rand>
 8001074:	01400784 	movi	r5,30
 8001078:	1009883a 	mov	r4,r2
 800107c:	80013780 	call	8001378 <__modsi3>
 8001080:	e0bfbf15 	stw	r2,-260(fp)
        textVGADrawColorText(timer_string, 0, 0, 15, 0); // display timer in white text with black background
 8001084:	e0bfe804 	addi	r2,fp,-96
 8001088:	d8000015 	stw	zero,0(sp)
 800108c:	01c003c4 	movi	r7,15
 8001090:	000d883a 	mov	r6,zero
 8001094:	000b883a 	mov	r5,zero
 8001098:	1009883a 	mov	r4,r2
 800109c:	80002e80 	call	80002e8 <textVGADrawColorText>
		textVGADrawColorText (question_string, 31, 14, 0, 15); //display the question with black background and white text
 80010a0:	e0ffc004 	addi	r3,fp,-256
 80010a4:	008003c4 	movi	r2,15
 80010a8:	d8800015 	stw	r2,0(sp)
 80010ac:	000f883a 	mov	r7,zero
 80010b0:	01800384 	movi	r6,14
 80010b4:	014007c4 	movi	r5,31
 80010b8:	1809883a 	mov	r4,r3
 80010bc:	80002e80 	call	80002e8 <textVGADrawColorText>
		fg = rand() % 16;
 80010c0:	80014e80 	call	80014e8 <rand>
 80010c4:	1007883a 	mov	r3,r2
 80010c8:	00a00034 	movhi	r2,32768
 80010cc:	108003c4 	addi	r2,r2,15
 80010d0:	1884703a 	and	r2,r3,r2
 80010d4:	1000040e 	bge	r2,zero,80010e8 <textVGAColorHexQuiz+0x334>
 80010d8:	10bfffc4 	addi	r2,r2,-1
 80010dc:	00fffc04 	movi	r3,-16
 80010e0:	10c4b03a 	or	r2,r2,r3
 80010e4:	10800044 	addi	r2,r2,1
 80010e8:	e0bfb315 	stw	r2,-308(fp)
		bg = rand() % 16;
 80010ec:	80014e80 	call	80014e8 <rand>
 80010f0:	1007883a 	mov	r3,r2
 80010f4:	00a00034 	movhi	r2,32768
 80010f8:	108003c4 	addi	r2,r2,15
 80010fc:	1884703a 	and	r2,r3,r2
 8001100:	1000040e 	bge	r2,zero,8001114 <textVGAColorHexQuiz+0x360>
 8001104:	10bfffc4 	addi	r2,r2,-1
 8001108:	00fffc04 	movi	r3,-16
 800110c:	10c4b03a 	or	r2,r2,r3
 8001110:	10800044 	addi	r2,r2,1
 8001114:	e0bfb415 	stw	r2,-304(fp)
		while (fg == bg)
 8001118:	00001606 	br	8001174 <textVGAColorHexQuiz+0x3c0>
		{
			fg = rand() % 16;
 800111c:	80014e80 	call	80014e8 <rand>
 8001120:	1007883a 	mov	r3,r2
 8001124:	00a00034 	movhi	r2,32768
 8001128:	108003c4 	addi	r2,r2,15
 800112c:	1884703a 	and	r2,r3,r2
 8001130:	1000040e 	bge	r2,zero,8001144 <textVGAColorHexQuiz+0x390>
 8001134:	10bfffc4 	addi	r2,r2,-1
 8001138:	00fffc04 	movi	r3,-16
 800113c:	10c4b03a 	or	r2,r2,r3
 8001140:	10800044 	addi	r2,r2,1
 8001144:	e0bfb315 	stw	r2,-308(fp)
			bg = rand() % 16;
 8001148:	80014e80 	call	80014e8 <rand>
 800114c:	1007883a 	mov	r3,r2
 8001150:	00a00034 	movhi	r2,32768
 8001154:	108003c4 	addi	r2,r2,15
 8001158:	1884703a 	and	r2,r3,r2
 800115c:	1000040e 	bge	r2,zero,8001170 <textVGAColorHexQuiz+0x3bc>
 8001160:	10bfffc4 	addi	r2,r2,-1
 8001164:	00fffc04 	movi	r3,-16
 8001168:	10c4b03a 	or	r2,r2,r3
 800116c:	10800044 	addi	r2,r2,1
 8001170:	e0bfb415 	stw	r2,-304(fp)
		y = rand() % 30;
        textVGADrawColorText(timer_string, 0, 0, 15, 0); // display timer in white text with black background
		textVGADrawColorText (question_string, 31, 14, 0, 15); //display the question with black background and white text
		fg = rand() % 16;
		bg = rand() % 16;
		while (fg == bg)
 8001174:	e0ffb317 	ldw	r3,-308(fp)
 8001178:	e0bfb417 	ldw	r2,-304(fp)
 800117c:	18bfe726 	beq	r3,r2,800111c <__alt_data_end+0xfc00111c>
		{
			fg = rand() % 16;
			bg = rand() % 16;
		}
		sprintf(answer_string, "Enter answer using switches.");
 8001180:	e0bfd404 	addi	r2,fp,-176
 8001184:	00d95d34 	movhi	r3,25972
 8001188:	18db9144 	addi	r3,r3,28229
 800118c:	10c00015 	stw	r3,0(r2)
 8001190:	00db9874 	movhi	r3,28257
 8001194:	18c81c84 	addi	r3,r3,8306
 8001198:	10c00115 	stw	r3,4(r2)
 800119c:	00dc9974 	movhi	r3,29285
 80011a0:	18dddcc4 	addi	r3,r3,30579
 80011a4:	10c00215 	stw	r3,8(r2)
 80011a8:	00da5cf4 	movhi	r3,26995
 80011ac:	18dd4804 	addi	r3,r3,29984
 80011b0:	10c00315 	stw	r3,12(r2)
 80011b4:	00dcc834 	movhi	r3,29472
 80011b8:	18d9db84 	addi	r3,r3,26478
 80011bc:	10c00415 	stw	r3,16(r2)
 80011c0:	00d8dd34 	movhi	r3,25460
 80011c4:	18da5dc4 	addi	r3,r3,26999
 80011c8:	10c00515 	stw	r3,20(r2)
 80011cc:	00cb9cf4 	movhi	r3,11891
 80011d0:	18d95a04 	addi	r3,r3,25960
 80011d4:	10c00615 	stw	r3,24(r2)
 80011d8:	10000705 	stb	zero,28(r2)
		textVGADrawColorText (answer_string, 26, 15, bg, fg); //display the answer with random background and foreground colors
 80011dc:	e0bfb417 	ldw	r2,-304(fp)
 80011e0:	11003fcc 	andi	r4,r2,255
 80011e4:	e0bfb317 	ldw	r2,-308(fp)
 80011e8:	10803fcc 	andi	r2,r2,255
 80011ec:	e0ffd404 	addi	r3,fp,-176
 80011f0:	d8800015 	stw	r2,0(sp)
 80011f4:	200f883a 	mov	r7,r4
 80011f8:	018003c4 	movi	r6,15
 80011fc:	01400684 	movi	r5,26
 8001200:	1809883a 	mov	r4,r3
 8001204:	80002e80 	call	80002e8 <textVGADrawColorText>
//
		if(*(SUBMIT_PIO)==0){
 8001208:	e0bfba17 	ldw	r2,-280(fp)
 800120c:	10800017 	ldw	r2,0(r2)
 8001210:	10002e1e 	bne	r2,zero,80012cc <textVGAColorHexQuiz+0x518>
//
		if (*(SW_PIO) == correct_answer)
 8001214:	e0bfb917 	ldw	r2,-284(fp)
 8001218:	10c00017 	ldw	r3,0(r2)
 800121c:	e0bfb817 	ldw	r2,-288(fp)
 8001220:	1880151e 	bne	r3,r2,8001278 <textVGAColorHexQuiz+0x4c4>
//	    if(operation == 0)
		{
			sprintf(answer_string, "Correct! %02X is the answer", hex1+hex2);
 8001224:	e0ffb617 	ldw	r3,-296(fp)
 8001228:	e0bfb717 	ldw	r2,-292(fp)
 800122c:	1887883a 	add	r3,r3,r2
 8001230:	e0bfd404 	addi	r2,fp,-176
 8001234:	180d883a 	mov	r6,r3
 8001238:	01420074 	movhi	r5,2049
 800123c:	297adf04 	addi	r5,r5,-5252
 8001240:	1009883a 	mov	r4,r2
 8001244:	80015a40 	call	80015a4 <sprintf>
			textVGADrawColorText (answer_string, 27, 16, 2, 15); //display the correct answer with random background and foreground colors
 8001248:	e0ffd404 	addi	r3,fp,-176
 800124c:	008003c4 	movi	r2,15
 8001250:	d8800015 	stw	r2,0(sp)
 8001254:	01c00084 	movi	r7,2
 8001258:	01800404 	movi	r6,16
 800125c:	014006c4 	movi	r5,27
 8001260:	1809883a 	mov	r4,r3
 8001264:	80002e80 	call	80002e8 <textVGADrawColorText>
			usleep(2000000); //pause for 2 seconds before clearing the screen
 8001268:	010007f4 	movhi	r4,31
 800126c:	21212004 	addi	r4,r4,-31616
 8001270:	800c9bc0 	call	800c9bc <usleep>
 8001274:	00001406 	br	80012c8 <textVGAColorHexQuiz+0x514>
		}
		else
		{
			sprintf(answer_string, "Wrong! %02X is the correct answer, your answer is %02X", correct_answer,*(SW_PIO));
 8001278:	e0bfb917 	ldw	r2,-284(fp)
 800127c:	10c00017 	ldw	r3,0(r2)
 8001280:	e0bfd404 	addi	r2,fp,-176
 8001284:	180f883a 	mov	r7,r3
 8001288:	e1bfb817 	ldw	r6,-288(fp)
 800128c:	01420074 	movhi	r5,2049
 8001290:	297ae604 	addi	r5,r5,-5224
 8001294:	1009883a 	mov	r4,r2
 8001298:	80015a40 	call	80015a4 <sprintf>
			textVGADrawColorText (answer_string, 16, 16, 4, 15); //display the correct answer with random background and foreground colors
 800129c:	e0ffd404 	addi	r3,fp,-176
 80012a0:	008003c4 	movi	r2,15
 80012a4:	d8800015 	stw	r2,0(sp)
 80012a8:	01c00104 	movi	r7,4
 80012ac:	01800404 	movi	r6,16
 80012b0:	01400404 	movi	r5,16
 80012b4:	1809883a 	mov	r4,r3
 80012b8:	80002e80 	call	80002e8 <textVGADrawColorText>
			usleep(2000000); //pause for 2 seconds before clearing the screen
 80012bc:	010007f4 	movhi	r4,31
 80012c0:	21212004 	addi	r4,r4,-31616
 80012c4:	800c9bc0 	call	800c9bc <usleep>
		}
		textVGAColorClr(); //clear the screen for the next question
 80012c8:	80002980 	call	8000298 <textVGAColorClr>
	}}
 80012cc:	0001883a 	nop
 80012d0:	e6fffc04 	addi	sp,fp,-16
 80012d4:	dfc00517 	ldw	ra,20(sp)
 80012d8:	df000417 	ldw	fp,16(sp)
 80012dc:	dcc00317 	ldw	r19,12(sp)
 80012e0:	dc800217 	ldw	r18,8(sp)
 80012e4:	dc400117 	ldw	r17,4(sp)
 80012e8:	dc000017 	ldw	r16,0(sp)
 80012ec:	dec00604 	addi	sp,sp,24
 80012f0:	f800283a 	ret

080012f4 <__divsi3>:
 80012f4:	20001b16 	blt	r4,zero,8001364 <__divsi3+0x70>
 80012f8:	000f883a 	mov	r7,zero
 80012fc:	28001616 	blt	r5,zero,8001358 <__divsi3+0x64>
 8001300:	200d883a 	mov	r6,r4
 8001304:	29001a2e 	bgeu	r5,r4,8001370 <__divsi3+0x7c>
 8001308:	00800804 	movi	r2,32
 800130c:	00c00044 	movi	r3,1
 8001310:	00000106 	br	8001318 <__divsi3+0x24>
 8001314:	10000d26 	beq	r2,zero,800134c <__divsi3+0x58>
 8001318:	294b883a 	add	r5,r5,r5
 800131c:	10bfffc4 	addi	r2,r2,-1
 8001320:	18c7883a 	add	r3,r3,r3
 8001324:	293ffb36 	bltu	r5,r4,8001314 <__alt_data_end+0xfc001314>
 8001328:	0005883a 	mov	r2,zero
 800132c:	18000726 	beq	r3,zero,800134c <__divsi3+0x58>
 8001330:	0005883a 	mov	r2,zero
 8001334:	31400236 	bltu	r6,r5,8001340 <__divsi3+0x4c>
 8001338:	314dc83a 	sub	r6,r6,r5
 800133c:	10c4b03a 	or	r2,r2,r3
 8001340:	1806d07a 	srli	r3,r3,1
 8001344:	280ad07a 	srli	r5,r5,1
 8001348:	183ffa1e 	bne	r3,zero,8001334 <__alt_data_end+0xfc001334>
 800134c:	38000126 	beq	r7,zero,8001354 <__divsi3+0x60>
 8001350:	0085c83a 	sub	r2,zero,r2
 8001354:	f800283a 	ret
 8001358:	014bc83a 	sub	r5,zero,r5
 800135c:	39c0005c 	xori	r7,r7,1
 8001360:	003fe706 	br	8001300 <__alt_data_end+0xfc001300>
 8001364:	0109c83a 	sub	r4,zero,r4
 8001368:	01c00044 	movi	r7,1
 800136c:	003fe306 	br	80012fc <__alt_data_end+0xfc0012fc>
 8001370:	00c00044 	movi	r3,1
 8001374:	003fee06 	br	8001330 <__alt_data_end+0xfc001330>

08001378 <__modsi3>:
 8001378:	20001716 	blt	r4,zero,80013d8 <__modsi3+0x60>
 800137c:	000f883a 	mov	r7,zero
 8001380:	2005883a 	mov	r2,r4
 8001384:	28001216 	blt	r5,zero,80013d0 <__modsi3+0x58>
 8001388:	2900162e 	bgeu	r5,r4,80013e4 <__modsi3+0x6c>
 800138c:	01800804 	movi	r6,32
 8001390:	00c00044 	movi	r3,1
 8001394:	00000106 	br	800139c <__modsi3+0x24>
 8001398:	30000a26 	beq	r6,zero,80013c4 <__modsi3+0x4c>
 800139c:	294b883a 	add	r5,r5,r5
 80013a0:	31bfffc4 	addi	r6,r6,-1
 80013a4:	18c7883a 	add	r3,r3,r3
 80013a8:	293ffb36 	bltu	r5,r4,8001398 <__alt_data_end+0xfc001398>
 80013ac:	18000526 	beq	r3,zero,80013c4 <__modsi3+0x4c>
 80013b0:	1806d07a 	srli	r3,r3,1
 80013b4:	11400136 	bltu	r2,r5,80013bc <__modsi3+0x44>
 80013b8:	1145c83a 	sub	r2,r2,r5
 80013bc:	280ad07a 	srli	r5,r5,1
 80013c0:	183ffb1e 	bne	r3,zero,80013b0 <__alt_data_end+0xfc0013b0>
 80013c4:	38000126 	beq	r7,zero,80013cc <__modsi3+0x54>
 80013c8:	0085c83a 	sub	r2,zero,r2
 80013cc:	f800283a 	ret
 80013d0:	014bc83a 	sub	r5,zero,r5
 80013d4:	003fec06 	br	8001388 <__alt_data_end+0xfc001388>
 80013d8:	0109c83a 	sub	r4,zero,r4
 80013dc:	01c00044 	movi	r7,1
 80013e0:	003fe706 	br	8001380 <__alt_data_end+0xfc001380>
 80013e4:	00c00044 	movi	r3,1
 80013e8:	003ff106 	br	80013b0 <__alt_data_end+0xfc0013b0>

080013ec <__udivsi3>:
 80013ec:	200d883a 	mov	r6,r4
 80013f0:	2900152e 	bgeu	r5,r4,8001448 <__udivsi3+0x5c>
 80013f4:	28001416 	blt	r5,zero,8001448 <__udivsi3+0x5c>
 80013f8:	00800804 	movi	r2,32
 80013fc:	00c00044 	movi	r3,1
 8001400:	00000206 	br	800140c <__udivsi3+0x20>
 8001404:	10000e26 	beq	r2,zero,8001440 <__udivsi3+0x54>
 8001408:	28000516 	blt	r5,zero,8001420 <__udivsi3+0x34>
 800140c:	294b883a 	add	r5,r5,r5
 8001410:	10bfffc4 	addi	r2,r2,-1
 8001414:	18c7883a 	add	r3,r3,r3
 8001418:	293ffa36 	bltu	r5,r4,8001404 <__alt_data_end+0xfc001404>
 800141c:	18000826 	beq	r3,zero,8001440 <__udivsi3+0x54>
 8001420:	0005883a 	mov	r2,zero
 8001424:	31400236 	bltu	r6,r5,8001430 <__udivsi3+0x44>
 8001428:	314dc83a 	sub	r6,r6,r5
 800142c:	10c4b03a 	or	r2,r2,r3
 8001430:	1806d07a 	srli	r3,r3,1
 8001434:	280ad07a 	srli	r5,r5,1
 8001438:	183ffa1e 	bne	r3,zero,8001424 <__alt_data_end+0xfc001424>
 800143c:	f800283a 	ret
 8001440:	0005883a 	mov	r2,zero
 8001444:	f800283a 	ret
 8001448:	00c00044 	movi	r3,1
 800144c:	003ff406 	br	8001420 <__alt_data_end+0xfc001420>

08001450 <__umodsi3>:
 8001450:	2005883a 	mov	r2,r4
 8001454:	2900122e 	bgeu	r5,r4,80014a0 <__umodsi3+0x50>
 8001458:	28001116 	blt	r5,zero,80014a0 <__umodsi3+0x50>
 800145c:	01800804 	movi	r6,32
 8001460:	00c00044 	movi	r3,1
 8001464:	00000206 	br	8001470 <__umodsi3+0x20>
 8001468:	30000c26 	beq	r6,zero,800149c <__umodsi3+0x4c>
 800146c:	28000516 	blt	r5,zero,8001484 <__umodsi3+0x34>
 8001470:	294b883a 	add	r5,r5,r5
 8001474:	31bfffc4 	addi	r6,r6,-1
 8001478:	18c7883a 	add	r3,r3,r3
 800147c:	293ffa36 	bltu	r5,r4,8001468 <__alt_data_end+0xfc001468>
 8001480:	18000626 	beq	r3,zero,800149c <__umodsi3+0x4c>
 8001484:	1806d07a 	srli	r3,r3,1
 8001488:	11400136 	bltu	r2,r5,8001490 <__umodsi3+0x40>
 800148c:	1145c83a 	sub	r2,r2,r5
 8001490:	280ad07a 	srli	r5,r5,1
 8001494:	183ffb1e 	bne	r3,zero,8001484 <__alt_data_end+0xfc001484>
 8001498:	f800283a 	ret
 800149c:	f800283a 	ret
 80014a0:	00c00044 	movi	r3,1
 80014a4:	003ff706 	br	8001484 <__alt_data_end+0xfc001484>

080014a8 <__mulsi3>:
 80014a8:	0005883a 	mov	r2,zero
 80014ac:	20000726 	beq	r4,zero,80014cc <__mulsi3+0x24>
 80014b0:	20c0004c 	andi	r3,r4,1
 80014b4:	2008d07a 	srli	r4,r4,1
 80014b8:	18000126 	beq	r3,zero,80014c0 <__mulsi3+0x18>
 80014bc:	1145883a 	add	r2,r2,r5
 80014c0:	294b883a 	add	r5,r5,r5
 80014c4:	203ffa1e 	bne	r4,zero,80014b0 <__alt_data_end+0xfc0014b0>
 80014c8:	f800283a 	ret
 80014cc:	f800283a 	ret

080014d0 <srand>:
 80014d0:	00820074 	movhi	r2,2049
 80014d4:	1082bc04 	addi	r2,r2,2800
 80014d8:	10800017 	ldw	r2,0(r2)
 80014dc:	11002915 	stw	r4,164(r2)
 80014e0:	10002a15 	stw	zero,168(r2)
 80014e4:	f800283a 	ret

080014e8 <rand>:
 80014e8:	00820074 	movhi	r2,2049
 80014ec:	defffe04 	addi	sp,sp,-8
 80014f0:	1082bc04 	addi	r2,r2,2800
 80014f4:	dc000015 	stw	r16,0(sp)
 80014f8:	14000017 	ldw	r16,0(r2)
 80014fc:	dfc00115 	stw	ra,4(sp)
 8001500:	01932574 	movhi	r6,19605
 8001504:	81002917 	ldw	r4,164(r16)
 8001508:	81402a17 	ldw	r5,168(r16)
 800150c:	01d614b4 	movhi	r7,22610
 8001510:	319fcb44 	addi	r6,r6,32557
 8001514:	39fd0b44 	addi	r7,r7,-3027
 8001518:	80091ec0 	call	80091ec <__muldi3>
 800151c:	11000044 	addi	r4,r2,1
 8001520:	2085803a 	cmpltu	r2,r4,r2
 8001524:	10c7883a 	add	r3,r2,r3
 8001528:	00a00034 	movhi	r2,32768
 800152c:	10bfffc4 	addi	r2,r2,-1
 8001530:	1884703a 	and	r2,r3,r2
 8001534:	81002915 	stw	r4,164(r16)
 8001538:	80c02a15 	stw	r3,168(r16)
 800153c:	dfc00117 	ldw	ra,4(sp)
 8001540:	dc000017 	ldw	r16,0(sp)
 8001544:	dec00204 	addi	sp,sp,8
 8001548:	f800283a 	ret

0800154c <_sprintf_r>:
 800154c:	deffe404 	addi	sp,sp,-112
 8001550:	2807883a 	mov	r3,r5
 8001554:	dfc01a15 	stw	ra,104(sp)
 8001558:	d9c01b15 	stw	r7,108(sp)
 800155c:	00a00034 	movhi	r2,32768
 8001560:	10bfffc4 	addi	r2,r2,-1
 8001564:	02008204 	movi	r8,520
 8001568:	d8800215 	stw	r2,8(sp)
 800156c:	d8800515 	stw	r2,20(sp)
 8001570:	d9c01b04 	addi	r7,sp,108
 8001574:	d80b883a 	mov	r5,sp
 8001578:	00bfffc4 	movi	r2,-1
 800157c:	d8c00015 	stw	r3,0(sp)
 8001580:	d8c00415 	stw	r3,16(sp)
 8001584:	da00030d 	sth	r8,12(sp)
 8001588:	d880038d 	sth	r2,14(sp)
 800158c:	80016a80 	call	80016a8 <___svfprintf_internal_r>
 8001590:	d8c00017 	ldw	r3,0(sp)
 8001594:	18000005 	stb	zero,0(r3)
 8001598:	dfc01a17 	ldw	ra,104(sp)
 800159c:	dec01c04 	addi	sp,sp,112
 80015a0:	f800283a 	ret

080015a4 <sprintf>:
 80015a4:	deffe304 	addi	sp,sp,-116
 80015a8:	2007883a 	mov	r3,r4
 80015ac:	dfc01a15 	stw	ra,104(sp)
 80015b0:	d9801b15 	stw	r6,108(sp)
 80015b4:	d9c01c15 	stw	r7,112(sp)
 80015b8:	01020074 	movhi	r4,2049
 80015bc:	2102bc04 	addi	r4,r4,2800
 80015c0:	21000017 	ldw	r4,0(r4)
 80015c4:	00a00034 	movhi	r2,32768
 80015c8:	10bfffc4 	addi	r2,r2,-1
 80015cc:	280d883a 	mov	r6,r5
 80015d0:	02008204 	movi	r8,520
 80015d4:	d8800215 	stw	r2,8(sp)
 80015d8:	d8800515 	stw	r2,20(sp)
 80015dc:	d9c01b04 	addi	r7,sp,108
 80015e0:	d80b883a 	mov	r5,sp
 80015e4:	00bfffc4 	movi	r2,-1
 80015e8:	d8c00015 	stw	r3,0(sp)
 80015ec:	d8c00415 	stw	r3,16(sp)
 80015f0:	da00030d 	sth	r8,12(sp)
 80015f4:	d880038d 	sth	r2,14(sp)
 80015f8:	80016a80 	call	80016a8 <___svfprintf_internal_r>
 80015fc:	d8c00017 	ldw	r3,0(sp)
 8001600:	18000005 	stb	zero,0(r3)
 8001604:	dfc01a17 	ldw	ra,104(sp)
 8001608:	dec01d04 	addi	sp,sp,116
 800160c:	f800283a 	ret

08001610 <strlen>:
 8001610:	208000cc 	andi	r2,r4,3
 8001614:	10002026 	beq	r2,zero,8001698 <strlen+0x88>
 8001618:	20800007 	ldb	r2,0(r4)
 800161c:	10002026 	beq	r2,zero,80016a0 <strlen+0x90>
 8001620:	2005883a 	mov	r2,r4
 8001624:	00000206 	br	8001630 <strlen+0x20>
 8001628:	10c00007 	ldb	r3,0(r2)
 800162c:	18001826 	beq	r3,zero,8001690 <strlen+0x80>
 8001630:	10800044 	addi	r2,r2,1
 8001634:	10c000cc 	andi	r3,r2,3
 8001638:	183ffb1e 	bne	r3,zero,8001628 <__alt_data_end+0xfc001628>
 800163c:	10c00017 	ldw	r3,0(r2)
 8001640:	01ffbff4 	movhi	r7,65279
 8001644:	39ffbfc4 	addi	r7,r7,-257
 8001648:	00ca303a 	nor	r5,zero,r3
 800164c:	01a02074 	movhi	r6,32897
 8001650:	19c7883a 	add	r3,r3,r7
 8001654:	31a02004 	addi	r6,r6,-32640
 8001658:	1946703a 	and	r3,r3,r5
 800165c:	1986703a 	and	r3,r3,r6
 8001660:	1800091e 	bne	r3,zero,8001688 <strlen+0x78>
 8001664:	10800104 	addi	r2,r2,4
 8001668:	10c00017 	ldw	r3,0(r2)
 800166c:	19cb883a 	add	r5,r3,r7
 8001670:	00c6303a 	nor	r3,zero,r3
 8001674:	28c6703a 	and	r3,r5,r3
 8001678:	1986703a 	and	r3,r3,r6
 800167c:	183ff926 	beq	r3,zero,8001664 <__alt_data_end+0xfc001664>
 8001680:	00000106 	br	8001688 <strlen+0x78>
 8001684:	10800044 	addi	r2,r2,1
 8001688:	10c00007 	ldb	r3,0(r2)
 800168c:	183ffd1e 	bne	r3,zero,8001684 <__alt_data_end+0xfc001684>
 8001690:	1105c83a 	sub	r2,r2,r4
 8001694:	f800283a 	ret
 8001698:	2005883a 	mov	r2,r4
 800169c:	003fe706 	br	800163c <__alt_data_end+0xfc00163c>
 80016a0:	0005883a 	mov	r2,zero
 80016a4:	f800283a 	ret

080016a8 <___svfprintf_internal_r>:
 80016a8:	deffb704 	addi	sp,sp,-292
 80016ac:	dfc04815 	stw	ra,288(sp)
 80016b0:	ddc04615 	stw	r23,280(sp)
 80016b4:	d9402d15 	stw	r5,180(sp)
 80016b8:	d9003915 	stw	r4,228(sp)
 80016bc:	302f883a 	mov	r23,r6
 80016c0:	d9c02e15 	stw	r7,184(sp)
 80016c4:	df004715 	stw	fp,284(sp)
 80016c8:	dd804515 	stw	r22,276(sp)
 80016cc:	dd404415 	stw	r21,272(sp)
 80016d0:	dd004315 	stw	r20,268(sp)
 80016d4:	dcc04215 	stw	r19,264(sp)
 80016d8:	dc804115 	stw	r18,260(sp)
 80016dc:	dc404015 	stw	r17,256(sp)
 80016e0:	dc003f15 	stw	r16,252(sp)
 80016e4:	80052c00 	call	80052c0 <_localeconv_r>
 80016e8:	10800017 	ldw	r2,0(r2)
 80016ec:	1009883a 	mov	r4,r2
 80016f0:	d8803415 	stw	r2,208(sp)
 80016f4:	80016100 	call	8001610 <strlen>
 80016f8:	d8c02d17 	ldw	r3,180(sp)
 80016fc:	d8803815 	stw	r2,224(sp)
 8001700:	1880030b 	ldhu	r2,12(r3)
 8001704:	1080200c 	andi	r2,r2,128
 8001708:	10000226 	beq	r2,zero,8001714 <___svfprintf_internal_r+0x6c>
 800170c:	18800417 	ldw	r2,16(r3)
 8001710:	1006b126 	beq	r2,zero,80031d8 <___svfprintf_internal_r+0x1b30>
 8001714:	dcc03917 	ldw	r19,228(sp)
 8001718:	d8c00404 	addi	r3,sp,16
 800171c:	05420074 	movhi	r21,2049
 8001720:	d9001e04 	addi	r4,sp,120
 8001724:	ad7b0484 	addi	r21,r21,-5102
 8001728:	d8c01e15 	stw	r3,120(sp)
 800172c:	d8002015 	stw	zero,128(sp)
 8001730:	d8001f15 	stw	zero,124(sp)
 8001734:	d8003315 	stw	zero,204(sp)
 8001738:	d8003615 	stw	zero,216(sp)
 800173c:	d8003715 	stw	zero,220(sp)
 8001740:	1811883a 	mov	r8,r3
 8001744:	d8003a15 	stw	zero,232(sp)
 8001748:	d8003b15 	stw	zero,236(sp)
 800174c:	d8002f15 	stw	zero,188(sp)
 8001750:	d9002815 	stw	r4,160(sp)
 8001754:	b8800007 	ldb	r2,0(r23)
 8001758:	10027726 	beq	r2,zero,8002138 <___svfprintf_internal_r+0xa90>
 800175c:	00c00944 	movi	r3,37
 8001760:	b823883a 	mov	r17,r23
 8001764:	10c0021e 	bne	r2,r3,8001770 <___svfprintf_internal_r+0xc8>
 8001768:	00001406 	br	80017bc <___svfprintf_internal_r+0x114>
 800176c:	10c00326 	beq	r2,r3,800177c <___svfprintf_internal_r+0xd4>
 8001770:	8c400044 	addi	r17,r17,1
 8001774:	88800007 	ldb	r2,0(r17)
 8001778:	103ffc1e 	bne	r2,zero,800176c <__alt_data_end+0xfc00176c>
 800177c:	8de1c83a 	sub	r16,r17,r23
 8001780:	80000e26 	beq	r16,zero,80017bc <___svfprintf_internal_r+0x114>
 8001784:	d8c02017 	ldw	r3,128(sp)
 8001788:	d8801f17 	ldw	r2,124(sp)
 800178c:	45c00015 	stw	r23,0(r8)
 8001790:	1c07883a 	add	r3,r3,r16
 8001794:	10800044 	addi	r2,r2,1
 8001798:	d8c02015 	stw	r3,128(sp)
 800179c:	44000115 	stw	r16,4(r8)
 80017a0:	d8801f15 	stw	r2,124(sp)
 80017a4:	00c001c4 	movi	r3,7
 80017a8:	18809916 	blt	r3,r2,8001a10 <___svfprintf_internal_r+0x368>
 80017ac:	42000204 	addi	r8,r8,8
 80017b0:	d9402f17 	ldw	r5,188(sp)
 80017b4:	2c0b883a 	add	r5,r5,r16
 80017b8:	d9402f15 	stw	r5,188(sp)
 80017bc:	88800007 	ldb	r2,0(r17)
 80017c0:	10009a26 	beq	r2,zero,8001a2c <___svfprintf_internal_r+0x384>
 80017c4:	8dc00044 	addi	r23,r17,1
 80017c8:	8c400047 	ldb	r17,1(r17)
 80017cc:	0021883a 	mov	r16,zero
 80017d0:	00bfffc4 	movi	r2,-1
 80017d4:	0025883a 	mov	r18,zero
 80017d8:	dc002905 	stb	r16,164(sp)
 80017dc:	d8002785 	stb	zero,158(sp)
 80017e0:	d8002b05 	stb	zero,172(sp)
 80017e4:	d8802a15 	stw	r2,168(sp)
 80017e8:	d8003115 	stw	zero,196(sp)
 80017ec:	05001604 	movi	r20,88
 80017f0:	05800244 	movi	r22,9
 80017f4:	4039883a 	mov	fp,r8
 80017f8:	9021883a 	mov	r16,r18
 80017fc:	bdc00044 	addi	r23,r23,1
 8001800:	88bff804 	addi	r2,r17,-32
 8001804:	a0831e36 	bltu	r20,r2,8002480 <___svfprintf_internal_r+0xdd8>
 8001808:	100490ba 	slli	r2,r2,2
 800180c:	00c20034 	movhi	r3,2048
 8001810:	18c60804 	addi	r3,r3,6176
 8001814:	10c5883a 	add	r2,r2,r3
 8001818:	10800017 	ldw	r2,0(r2)
 800181c:	1000683a 	jmp	r2
 8001820:	080023c8 	cmpgei	zero,at,143
 8001824:	08002480 	call	800248 <__alt_mem_onchip_memory2_0+0x800048>
 8001828:	08002480 	call	800248 <__alt_mem_onchip_memory2_0+0x800048>
 800182c:	080023bc 	xorhi	zero,at,142
 8001830:	08002480 	call	800248 <__alt_mem_onchip_memory2_0+0x800048>
 8001834:	08002480 	call	800248 <__alt_mem_onchip_memory2_0+0x800048>
 8001838:	08002480 	call	800248 <__alt_mem_onchip_memory2_0+0x800048>
 800183c:	08002480 	call	800248 <__alt_mem_onchip_memory2_0+0x800048>
 8001840:	08002480 	call	800248 <__alt_mem_onchip_memory2_0+0x800048>
 8001844:	08002480 	call	800248 <__alt_mem_onchip_memory2_0+0x800048>
 8001848:	08001a88 	cmpgei	zero,at,106
 800184c:	080022cc 	andi	zero,at,139
 8001850:	08002480 	call	800248 <__alt_mem_onchip_memory2_0+0x800048>
 8001854:	08001994 	ori	zero,at,102
 8001858:	08001aac 	andhi	zero,at,106
 800185c:	08002480 	call	800248 <__alt_mem_onchip_memory2_0+0x800048>
 8001860:	08001b38 	rdprs	zero,at,108
 8001864:	08001afc 	xorhi	zero,at,107
 8001868:	08001afc 	xorhi	zero,at,107
 800186c:	08001afc 	xorhi	zero,at,107
 8001870:	08001afc 	xorhi	zero,at,107
 8001874:	08001afc 	xorhi	zero,at,107
 8001878:	08001afc 	xorhi	zero,at,107
 800187c:	08001afc 	xorhi	zero,at,107
 8001880:	08001afc 	xorhi	zero,at,107
 8001884:	08001afc 	xorhi	zero,at,107
 8001888:	08002480 	call	800248 <__alt_mem_onchip_memory2_0+0x800048>
 800188c:	08002480 	call	800248 <__alt_mem_onchip_memory2_0+0x800048>
 8001890:	08002480 	call	800248 <__alt_mem_onchip_memory2_0+0x800048>
 8001894:	08002480 	call	800248 <__alt_mem_onchip_memory2_0+0x800048>
 8001898:	08002480 	call	800248 <__alt_mem_onchip_memory2_0+0x800048>
 800189c:	08002480 	call	800248 <__alt_mem_onchip_memory2_0+0x800048>
 80018a0:	08002480 	call	800248 <__alt_mem_onchip_memory2_0+0x800048>
 80018a4:	08002480 	call	800248 <__alt_mem_onchip_memory2_0+0x800048>
 80018a8:	08002480 	call	800248 <__alt_mem_onchip_memory2_0+0x800048>
 80018ac:	08002480 	call	800248 <__alt_mem_onchip_memory2_0+0x800048>
 80018b0:	08001bfc 	xorhi	zero,at,111
 80018b4:	08001b44 	addi	zero,at,109
 80018b8:	08002480 	call	800248 <__alt_mem_onchip_memory2_0+0x800048>
 80018bc:	08001b44 	addi	zero,at,109
 80018c0:	08002480 	call	800248 <__alt_mem_onchip_memory2_0+0x800048>
 80018c4:	08002480 	call	800248 <__alt_mem_onchip_memory2_0+0x800048>
 80018c8:	08002480 	call	800248 <__alt_mem_onchip_memory2_0+0x800048>
 80018cc:	08002480 	call	800248 <__alt_mem_onchip_memory2_0+0x800048>
 80018d0:	08001bf0 	cmpltui	zero,at,111
 80018d4:	08002480 	call	800248 <__alt_mem_onchip_memory2_0+0x800048>
 80018d8:	08002480 	call	800248 <__alt_mem_onchip_memory2_0+0x800048>
 80018dc:	08001cc4 	addi	zero,at,115
 80018e0:	08002480 	call	800248 <__alt_mem_onchip_memory2_0+0x800048>
 80018e4:	08002480 	call	800248 <__alt_mem_onchip_memory2_0+0x800048>
 80018e8:	08002480 	call	800248 <__alt_mem_onchip_memory2_0+0x800048>
 80018ec:	08002480 	call	800248 <__alt_mem_onchip_memory2_0+0x800048>
 80018f0:	08002480 	call	800248 <__alt_mem_onchip_memory2_0+0x800048>
 80018f4:	08002140 	call	800214 <__alt_mem_onchip_memory2_0+0x800014>
 80018f8:	08002480 	call	800248 <__alt_mem_onchip_memory2_0+0x800048>
 80018fc:	08002480 	call	800248 <__alt_mem_onchip_memory2_0+0x800048>
 8001900:	080021ac 	andhi	zero,at,134
 8001904:	08002480 	call	800248 <__alt_mem_onchip_memory2_0+0x800048>
 8001908:	08002480 	call	800248 <__alt_mem_onchip_memory2_0+0x800048>
 800190c:	08002480 	call	800248 <__alt_mem_onchip_memory2_0+0x800048>
 8001910:	08002480 	call	800248 <__alt_mem_onchip_memory2_0+0x800048>
 8001914:	08002480 	call	800248 <__alt_mem_onchip_memory2_0+0x800048>
 8001918:	08002480 	call	800248 <__alt_mem_onchip_memory2_0+0x800048>
 800191c:	08002480 	call	800248 <__alt_mem_onchip_memory2_0+0x800048>
 8001920:	08002480 	call	800248 <__alt_mem_onchip_memory2_0+0x800048>
 8001924:	08002480 	call	800248 <__alt_mem_onchip_memory2_0+0x800048>
 8001928:	08002480 	call	800248 <__alt_mem_onchip_memory2_0+0x800048>
 800192c:	08002268 	cmpgeui	zero,at,137
 8001930:	080023e8 	cmpgeui	zero,at,143
 8001934:	08001b44 	addi	zero,at,109
 8001938:	08001b44 	addi	zero,at,109
 800193c:	08001b44 	addi	zero,at,109
 8001940:	0800245c 	xori	zero,at,145
 8001944:	080023e8 	cmpgeui	zero,at,143
 8001948:	08002480 	call	800248 <__alt_mem_onchip_memory2_0+0x800048>
 800194c:	08002480 	call	800248 <__alt_mem_onchip_memory2_0+0x800048>
 8001950:	08002408 	cmpgei	zero,at,144
 8001954:	08002480 	call	800248 <__alt_mem_onchip_memory2_0+0x800048>
 8001958:	0800241c 	xori	zero,at,144
 800195c:	080022ac 	andhi	zero,at,138
 8001960:	080019a0 	cmpeqi	zero,at,102
 8001964:	080022e4 	muli	zero,at,139
 8001968:	08002480 	call	800248 <__alt_mem_onchip_memory2_0+0x800048>
 800196c:	080022f0 	cmpltui	zero,at,139
 8001970:	08002480 	call	800248 <__alt_mem_onchip_memory2_0+0x800048>
 8001974:	08002354 	ori	zero,at,141
 8001978:	08002480 	call	800248 <__alt_mem_onchip_memory2_0+0x800048>
 800197c:	08002480 	call	800248 <__alt_mem_onchip_memory2_0+0x800048>
 8001980:	08002374 	orhi	zero,at,141
 8001984:	d8c03117 	ldw	r3,196(sp)
 8001988:	d8802e15 	stw	r2,184(sp)
 800198c:	00c7c83a 	sub	r3,zero,r3
 8001990:	d8c03115 	stw	r3,196(sp)
 8001994:	84000114 	ori	r16,r16,4
 8001998:	bc400007 	ldb	r17,0(r23)
 800199c:	003f9706 	br	80017fc <__alt_data_end+0xfc0017fc>
 80019a0:	00800c04 	movi	r2,48
 80019a4:	d8802705 	stb	r2,156(sp)
 80019a8:	00801e04 	movi	r2,120
 80019ac:	d8802745 	stb	r2,157(sp)
 80019b0:	d9002a17 	ldw	r4,168(sp)
 80019b4:	d8802e17 	ldw	r2,184(sp)
 80019b8:	d8002785 	stb	zero,158(sp)
 80019bc:	e011883a 	mov	r8,fp
 80019c0:	10c00104 	addi	r3,r2,4
 80019c4:	15000017 	ldw	r20,0(r2)
 80019c8:	002d883a 	mov	r22,zero
 80019cc:	80800094 	ori	r2,r16,2
 80019d0:	2002b616 	blt	r4,zero,80024ac <___svfprintf_internal_r+0xe04>
 80019d4:	00bfdfc4 	movi	r2,-129
 80019d8:	80a4703a 	and	r18,r16,r2
 80019dc:	d8c02e15 	stw	r3,184(sp)
 80019e0:	94800094 	ori	r18,r18,2
 80019e4:	a002a01e 	bne	r20,zero,8002468 <___svfprintf_internal_r+0xdc0>
 80019e8:	01420074 	movhi	r5,2049
 80019ec:	297afd04 	addi	r5,r5,-5132
 80019f0:	d9403a15 	stw	r5,232(sp)
 80019f4:	04401e04 	movi	r17,120
 80019f8:	d8c02a17 	ldw	r3,168(sp)
 80019fc:	0039883a 	mov	fp,zero
 8001a00:	1801e626 	beq	r3,zero,800219c <___svfprintf_internal_r+0xaf4>
 8001a04:	0029883a 	mov	r20,zero
 8001a08:	002d883a 	mov	r22,zero
 8001a0c:	00020506 	br	8002224 <___svfprintf_internal_r+0xb7c>
 8001a10:	d9402d17 	ldw	r5,180(sp)
 8001a14:	d9801e04 	addi	r6,sp,120
 8001a18:	9809883a 	mov	r4,r19
 8001a1c:	8006f840 	call	8006f84 <__ssprint_r>
 8001a20:	1000081e 	bne	r2,zero,8001a44 <___svfprintf_internal_r+0x39c>
 8001a24:	da000404 	addi	r8,sp,16
 8001a28:	003f6106 	br	80017b0 <__alt_data_end+0xfc0017b0>
 8001a2c:	d8802017 	ldw	r2,128(sp)
 8001a30:	10000426 	beq	r2,zero,8001a44 <___svfprintf_internal_r+0x39c>
 8001a34:	d9402d17 	ldw	r5,180(sp)
 8001a38:	d9003917 	ldw	r4,228(sp)
 8001a3c:	d9801e04 	addi	r6,sp,120
 8001a40:	8006f840 	call	8006f84 <__ssprint_r>
 8001a44:	d8802d17 	ldw	r2,180(sp)
 8001a48:	10c0030b 	ldhu	r3,12(r2)
 8001a4c:	d8802f17 	ldw	r2,188(sp)
 8001a50:	18c0100c 	andi	r3,r3,64
 8001a54:	1806251e 	bne	r3,zero,80032ec <___svfprintf_internal_r+0x1c44>
 8001a58:	dfc04817 	ldw	ra,288(sp)
 8001a5c:	df004717 	ldw	fp,284(sp)
 8001a60:	ddc04617 	ldw	r23,280(sp)
 8001a64:	dd804517 	ldw	r22,276(sp)
 8001a68:	dd404417 	ldw	r21,272(sp)
 8001a6c:	dd004317 	ldw	r20,268(sp)
 8001a70:	dcc04217 	ldw	r19,264(sp)
 8001a74:	dc804117 	ldw	r18,260(sp)
 8001a78:	dc404017 	ldw	r17,256(sp)
 8001a7c:	dc003f17 	ldw	r16,252(sp)
 8001a80:	dec04904 	addi	sp,sp,292
 8001a84:	f800283a 	ret
 8001a88:	d9002e17 	ldw	r4,184(sp)
 8001a8c:	d9402e17 	ldw	r5,184(sp)
 8001a90:	21000017 	ldw	r4,0(r4)
 8001a94:	28800104 	addi	r2,r5,4
 8001a98:	d9003115 	stw	r4,196(sp)
 8001a9c:	203fb916 	blt	r4,zero,8001984 <__alt_data_end+0xfc001984>
 8001aa0:	d8802e15 	stw	r2,184(sp)
 8001aa4:	bc400007 	ldb	r17,0(r23)
 8001aa8:	003f5406 	br	80017fc <__alt_data_end+0xfc0017fc>
 8001aac:	bc400007 	ldb	r17,0(r23)
 8001ab0:	01000a84 	movi	r4,42
 8001ab4:	b8c00044 	addi	r3,r23,1
 8001ab8:	89076926 	beq	r17,r4,8003860 <___svfprintf_internal_r+0x21b8>
 8001abc:	8cbff404 	addi	r18,r17,-48
 8001ac0:	b486b936 	bltu	r22,r18,80035a8 <___svfprintf_internal_r+0x1f00>
 8001ac4:	0009883a 	mov	r4,zero
 8001ac8:	1823883a 	mov	r17,r3
 8001acc:	01400284 	movi	r5,10
 8001ad0:	80014a80 	call	80014a8 <__mulsi3>
 8001ad4:	88c00007 	ldb	r3,0(r17)
 8001ad8:	1489883a 	add	r4,r2,r18
 8001adc:	8dc00044 	addi	r23,r17,1
 8001ae0:	1cbff404 	addi	r18,r3,-48
 8001ae4:	b823883a 	mov	r17,r23
 8001ae8:	b4bff82e 	bgeu	r22,r18,8001acc <__alt_data_end+0xfc001acc>
 8001aec:	1823883a 	mov	r17,r3
 8001af0:	20060416 	blt	r4,zero,8003304 <___svfprintf_internal_r+0x1c5c>
 8001af4:	d9002a15 	stw	r4,168(sp)
 8001af8:	003f4106 	br	8001800 <__alt_data_end+0xfc001800>
 8001afc:	8cbff404 	addi	r18,r17,-48
 8001b00:	d8003115 	stw	zero,196(sp)
 8001b04:	0009883a 	mov	r4,zero
 8001b08:	b823883a 	mov	r17,r23
 8001b0c:	01400284 	movi	r5,10
 8001b10:	80014a80 	call	80014a8 <__mulsi3>
 8001b14:	88c00007 	ldb	r3,0(r17)
 8001b18:	9089883a 	add	r4,r18,r2
 8001b1c:	bdc00044 	addi	r23,r23,1
 8001b20:	1cbff404 	addi	r18,r3,-48
 8001b24:	b823883a 	mov	r17,r23
 8001b28:	b4bff82e 	bgeu	r22,r18,8001b0c <__alt_data_end+0xfc001b0c>
 8001b2c:	1823883a 	mov	r17,r3
 8001b30:	d9003115 	stw	r4,196(sp)
 8001b34:	003f3206 	br	8001800 <__alt_data_end+0xfc001800>
 8001b38:	84002014 	ori	r16,r16,128
 8001b3c:	bc400007 	ldb	r17,0(r23)
 8001b40:	003f2e06 	br	80017fc <__alt_data_end+0xfc0017fc>
 8001b44:	8025883a 	mov	r18,r16
 8001b48:	dc002903 	ldbu	r16,164(sp)
 8001b4c:	e011883a 	mov	r8,fp
 8001b50:	84003fcc 	andi	r16,r16,255
 8001b54:	8007721e 	bne	r16,zero,8003920 <___svfprintf_internal_r+0x2278>
 8001b58:	9080020c 	andi	r2,r18,8
 8001b5c:	1004a526 	beq	r2,zero,8002df4 <___svfprintf_internal_r+0x174c>
 8001b60:	d9002e17 	ldw	r4,184(sp)
 8001b64:	d9402e17 	ldw	r5,184(sp)
 8001b68:	d8802e17 	ldw	r2,184(sp)
 8001b6c:	21000017 	ldw	r4,0(r4)
 8001b70:	29400117 	ldw	r5,4(r5)
 8001b74:	10800204 	addi	r2,r2,8
 8001b78:	d9003615 	stw	r4,216(sp)
 8001b7c:	d9403715 	stw	r5,220(sp)
 8001b80:	d8802e15 	stw	r2,184(sp)
 8001b84:	d9003617 	ldw	r4,216(sp)
 8001b88:	d9403717 	ldw	r5,220(sp)
 8001b8c:	da003e15 	stw	r8,248(sp)
 8001b90:	04000044 	movi	r16,1
 8001b94:	8006de00 	call	8006de0 <__fpclassifyd>
 8001b98:	da003e17 	ldw	r8,248(sp)
 8001b9c:	1404731e 	bne	r2,r16,8002d6c <___svfprintf_internal_r+0x16c4>
 8001ba0:	d9003617 	ldw	r4,216(sp)
 8001ba4:	d9403717 	ldw	r5,220(sp)
 8001ba8:	000d883a 	mov	r6,zero
 8001bac:	000f883a 	mov	r7,zero
 8001bb0:	800b2980 	call	800b298 <__ledf2>
 8001bb4:	da003e17 	ldw	r8,248(sp)
 8001bb8:	10061b16 	blt	r2,zero,8003428 <___svfprintf_internal_r+0x1d80>
 8001bbc:	df002783 	ldbu	fp,158(sp)
 8001bc0:	008011c4 	movi	r2,71
 8001bc4:	1445810e 	bge	r2,r17,80031cc <___svfprintf_internal_r+0x1b24>
 8001bc8:	04020074 	movhi	r16,2049
 8001bcc:	843af504 	addi	r16,r16,-5164
 8001bd0:	00c000c4 	movi	r3,3
 8001bd4:	00bfdfc4 	movi	r2,-129
 8001bd8:	d8c02915 	stw	r3,164(sp)
 8001bdc:	90a4703a 	and	r18,r18,r2
 8001be0:	d8c02b15 	stw	r3,172(sp)
 8001be4:	d8002a15 	stw	zero,168(sp)
 8001be8:	d8003215 	stw	zero,200(sp)
 8001bec:	00006c06 	br	8001da0 <___svfprintf_internal_r+0x6f8>
 8001bf0:	84000214 	ori	r16,r16,8
 8001bf4:	bc400007 	ldb	r17,0(r23)
 8001bf8:	003f0006 	br	80017fc <__alt_data_end+0xfc0017fc>
 8001bfc:	8025883a 	mov	r18,r16
 8001c00:	dc002903 	ldbu	r16,164(sp)
 8001c04:	e011883a 	mov	r8,fp
 8001c08:	84003fcc 	andi	r16,r16,255
 8001c0c:	80073f1e 	bne	r16,zero,800390c <___svfprintf_internal_r+0x2264>
 8001c10:	94800414 	ori	r18,r18,16
 8001c14:	9080080c 	andi	r2,r18,32
 8001c18:	1003bb26 	beq	r2,zero,8002b08 <___svfprintf_internal_r+0x1460>
 8001c1c:	d9002e17 	ldw	r4,184(sp)
 8001c20:	20800117 	ldw	r2,4(r4)
 8001c24:	25000017 	ldw	r20,0(r4)
 8001c28:	21000204 	addi	r4,r4,8
 8001c2c:	d9002e15 	stw	r4,184(sp)
 8001c30:	102d883a 	mov	r22,r2
 8001c34:	1003bd16 	blt	r2,zero,8002b2c <___svfprintf_internal_r+0x1484>
 8001c38:	d9002a17 	ldw	r4,168(sp)
 8001c3c:	df002783 	ldbu	fp,158(sp)
 8001c40:	2003d016 	blt	r4,zero,8002b84 <___svfprintf_internal_r+0x14dc>
 8001c44:	00ffdfc4 	movi	r3,-129
 8001c48:	a584b03a 	or	r2,r20,r22
 8001c4c:	90e4703a 	and	r18,r18,r3
 8001c50:	10015026 	beq	r2,zero,8002194 <___svfprintf_internal_r+0xaec>
 8001c54:	b0037026 	beq	r22,zero,8002a18 <___svfprintf_internal_r+0x1370>
 8001c58:	dc402915 	stw	r17,164(sp)
 8001c5c:	dc001e04 	addi	r16,sp,120
 8001c60:	b023883a 	mov	r17,r22
 8001c64:	402d883a 	mov	r22,r8
 8001c68:	a009883a 	mov	r4,r20
 8001c6c:	880b883a 	mov	r5,r17
 8001c70:	01800284 	movi	r6,10
 8001c74:	000f883a 	mov	r7,zero
 8001c78:	80098f40 	call	80098f4 <__umoddi3>
 8001c7c:	10800c04 	addi	r2,r2,48
 8001c80:	843fffc4 	addi	r16,r16,-1
 8001c84:	a009883a 	mov	r4,r20
 8001c88:	880b883a 	mov	r5,r17
 8001c8c:	80800005 	stb	r2,0(r16)
 8001c90:	01800284 	movi	r6,10
 8001c94:	000f883a 	mov	r7,zero
 8001c98:	80092f80 	call	80092f8 <__udivdi3>
 8001c9c:	1029883a 	mov	r20,r2
 8001ca0:	10c4b03a 	or	r2,r2,r3
 8001ca4:	1823883a 	mov	r17,r3
 8001ca8:	103fef1e 	bne	r2,zero,8001c68 <__alt_data_end+0xfc001c68>
 8001cac:	d8c02817 	ldw	r3,160(sp)
 8001cb0:	dc402917 	ldw	r17,164(sp)
 8001cb4:	b011883a 	mov	r8,r22
 8001cb8:	1c07c83a 	sub	r3,r3,r16
 8001cbc:	d8c02b15 	stw	r3,172(sp)
 8001cc0:	00003106 	br	8001d88 <___svfprintf_internal_r+0x6e0>
 8001cc4:	8025883a 	mov	r18,r16
 8001cc8:	dc002903 	ldbu	r16,164(sp)
 8001ccc:	e011883a 	mov	r8,fp
 8001cd0:	84003fcc 	andi	r16,r16,255
 8001cd4:	80070a1e 	bne	r16,zero,8003900 <___svfprintf_internal_r+0x2258>
 8001cd8:	94800414 	ori	r18,r18,16
 8001cdc:	9080080c 	andi	r2,r18,32
 8001ce0:	1002f626 	beq	r2,zero,80028bc <___svfprintf_internal_r+0x1214>
 8001ce4:	d9002e17 	ldw	r4,184(sp)
 8001ce8:	d9402a17 	ldw	r5,168(sp)
 8001cec:	d8002785 	stb	zero,158(sp)
 8001cf0:	20800204 	addi	r2,r4,8
 8001cf4:	25000017 	ldw	r20,0(r4)
 8001cf8:	25800117 	ldw	r22,4(r4)
 8001cfc:	28043716 	blt	r5,zero,8002ddc <___svfprintf_internal_r+0x1734>
 8001d00:	013fdfc4 	movi	r4,-129
 8001d04:	a586b03a 	or	r3,r20,r22
 8001d08:	d8802e15 	stw	r2,184(sp)
 8001d0c:	9124703a 	and	r18,r18,r4
 8001d10:	1802f71e 	bne	r3,zero,80028f0 <___svfprintf_internal_r+0x1248>
 8001d14:	d9402a17 	ldw	r5,168(sp)
 8001d18:	0039883a 	mov	fp,zero
 8001d1c:	2806df26 	beq	r5,zero,800389c <___svfprintf_internal_r+0x21f4>
 8001d20:	0029883a 	mov	r20,zero
 8001d24:	002d883a 	mov	r22,zero
 8001d28:	dc001e04 	addi	r16,sp,120
 8001d2c:	a006d0fa 	srli	r3,r20,3
 8001d30:	b008977a 	slli	r4,r22,29
 8001d34:	b02cd0fa 	srli	r22,r22,3
 8001d38:	a50001cc 	andi	r20,r20,7
 8001d3c:	a0800c04 	addi	r2,r20,48
 8001d40:	843fffc4 	addi	r16,r16,-1
 8001d44:	20e8b03a 	or	r20,r4,r3
 8001d48:	80800005 	stb	r2,0(r16)
 8001d4c:	a586b03a 	or	r3,r20,r22
 8001d50:	183ff61e 	bne	r3,zero,8001d2c <__alt_data_end+0xfc001d2c>
 8001d54:	90c0004c 	andi	r3,r18,1
 8001d58:	18013f26 	beq	r3,zero,8002258 <___svfprintf_internal_r+0xbb0>
 8001d5c:	10803fcc 	andi	r2,r2,255
 8001d60:	1080201c 	xori	r2,r2,128
 8001d64:	10bfe004 	addi	r2,r2,-128
 8001d68:	00c00c04 	movi	r3,48
 8001d6c:	10c13a26 	beq	r2,r3,8002258 <___svfprintf_internal_r+0xbb0>
 8001d70:	80ffffc5 	stb	r3,-1(r16)
 8001d74:	d8c02817 	ldw	r3,160(sp)
 8001d78:	80bfffc4 	addi	r2,r16,-1
 8001d7c:	1021883a 	mov	r16,r2
 8001d80:	1887c83a 	sub	r3,r3,r2
 8001d84:	d8c02b15 	stw	r3,172(sp)
 8001d88:	d8802b17 	ldw	r2,172(sp)
 8001d8c:	d9002a17 	ldw	r4,168(sp)
 8001d90:	1100010e 	bge	r2,r4,8001d98 <___svfprintf_internal_r+0x6f0>
 8001d94:	2005883a 	mov	r2,r4
 8001d98:	d8802915 	stw	r2,164(sp)
 8001d9c:	d8003215 	stw	zero,200(sp)
 8001da0:	e7003fcc 	andi	fp,fp,255
 8001da4:	e700201c 	xori	fp,fp,128
 8001da8:	e73fe004 	addi	fp,fp,-128
 8001dac:	e0000326 	beq	fp,zero,8001dbc <___svfprintf_internal_r+0x714>
 8001db0:	d8c02917 	ldw	r3,164(sp)
 8001db4:	18c00044 	addi	r3,r3,1
 8001db8:	d8c02915 	stw	r3,164(sp)
 8001dbc:	90c0008c 	andi	r3,r18,2
 8001dc0:	d8c02c15 	stw	r3,176(sp)
 8001dc4:	18000326 	beq	r3,zero,8001dd4 <___svfprintf_internal_r+0x72c>
 8001dc8:	d8c02917 	ldw	r3,164(sp)
 8001dcc:	18c00084 	addi	r3,r3,2
 8001dd0:	d8c02915 	stw	r3,164(sp)
 8001dd4:	90c0210c 	andi	r3,r18,132
 8001dd8:	d8c03015 	stw	r3,192(sp)
 8001ddc:	1801c31e 	bne	r3,zero,80024ec <___svfprintf_internal_r+0xe44>
 8001de0:	d9003117 	ldw	r4,196(sp)
 8001de4:	d8c02917 	ldw	r3,164(sp)
 8001de8:	20e9c83a 	sub	r20,r4,r3
 8001dec:	0501bf0e 	bge	zero,r20,80024ec <___svfprintf_internal_r+0xe44>
 8001df0:	02400404 	movi	r9,16
 8001df4:	d8c02017 	ldw	r3,128(sp)
 8001df8:	d8801f17 	ldw	r2,124(sp)
 8001dfc:	4d053d0e 	bge	r9,r20,80032f4 <___svfprintf_internal_r+0x1c4c>
 8001e00:	01420074 	movhi	r5,2049
 8001e04:	297b0884 	addi	r5,r5,-5086
 8001e08:	dc403c15 	stw	r17,240(sp)
 8001e0c:	d9403515 	stw	r5,212(sp)
 8001e10:	a023883a 	mov	r17,r20
 8001e14:	482d883a 	mov	r22,r9
 8001e18:	9029883a 	mov	r20,r18
 8001e1c:	070001c4 	movi	fp,7
 8001e20:	8025883a 	mov	r18,r16
 8001e24:	dc002d17 	ldw	r16,180(sp)
 8001e28:	00000306 	br	8001e38 <___svfprintf_internal_r+0x790>
 8001e2c:	8c7ffc04 	addi	r17,r17,-16
 8001e30:	42000204 	addi	r8,r8,8
 8001e34:	b440130e 	bge	r22,r17,8001e84 <___svfprintf_internal_r+0x7dc>
 8001e38:	01020074 	movhi	r4,2049
 8001e3c:	18c00404 	addi	r3,r3,16
 8001e40:	10800044 	addi	r2,r2,1
 8001e44:	213b0884 	addi	r4,r4,-5086
 8001e48:	41000015 	stw	r4,0(r8)
 8001e4c:	45800115 	stw	r22,4(r8)
 8001e50:	d8c02015 	stw	r3,128(sp)
 8001e54:	d8801f15 	stw	r2,124(sp)
 8001e58:	e0bff40e 	bge	fp,r2,8001e2c <__alt_data_end+0xfc001e2c>
 8001e5c:	d9801e04 	addi	r6,sp,120
 8001e60:	800b883a 	mov	r5,r16
 8001e64:	9809883a 	mov	r4,r19
 8001e68:	8006f840 	call	8006f84 <__ssprint_r>
 8001e6c:	103ef51e 	bne	r2,zero,8001a44 <__alt_data_end+0xfc001a44>
 8001e70:	8c7ffc04 	addi	r17,r17,-16
 8001e74:	d8c02017 	ldw	r3,128(sp)
 8001e78:	d8801f17 	ldw	r2,124(sp)
 8001e7c:	da000404 	addi	r8,sp,16
 8001e80:	b47fed16 	blt	r22,r17,8001e38 <__alt_data_end+0xfc001e38>
 8001e84:	9021883a 	mov	r16,r18
 8001e88:	a025883a 	mov	r18,r20
 8001e8c:	8829883a 	mov	r20,r17
 8001e90:	dc403c17 	ldw	r17,240(sp)
 8001e94:	d9403517 	ldw	r5,212(sp)
 8001e98:	a0c7883a 	add	r3,r20,r3
 8001e9c:	10800044 	addi	r2,r2,1
 8001ea0:	41400015 	stw	r5,0(r8)
 8001ea4:	45000115 	stw	r20,4(r8)
 8001ea8:	d8c02015 	stw	r3,128(sp)
 8001eac:	d8801f15 	stw	r2,124(sp)
 8001eb0:	010001c4 	movi	r4,7
 8001eb4:	2082c116 	blt	r4,r2,80029bc <___svfprintf_internal_r+0x1314>
 8001eb8:	df002787 	ldb	fp,158(sp)
 8001ebc:	42000204 	addi	r8,r8,8
 8001ec0:	e0000c26 	beq	fp,zero,8001ef4 <___svfprintf_internal_r+0x84c>
 8001ec4:	d8801f17 	ldw	r2,124(sp)
 8001ec8:	d9002784 	addi	r4,sp,158
 8001ecc:	18c00044 	addi	r3,r3,1
 8001ed0:	10800044 	addi	r2,r2,1
 8001ed4:	41000015 	stw	r4,0(r8)
 8001ed8:	01000044 	movi	r4,1
 8001edc:	41000115 	stw	r4,4(r8)
 8001ee0:	d8c02015 	stw	r3,128(sp)
 8001ee4:	d8801f15 	stw	r2,124(sp)
 8001ee8:	010001c4 	movi	r4,7
 8001eec:	20825a16 	blt	r4,r2,8002858 <___svfprintf_internal_r+0x11b0>
 8001ef0:	42000204 	addi	r8,r8,8
 8001ef4:	d8802c17 	ldw	r2,176(sp)
 8001ef8:	10000c26 	beq	r2,zero,8001f2c <___svfprintf_internal_r+0x884>
 8001efc:	d8801f17 	ldw	r2,124(sp)
 8001f00:	d9002704 	addi	r4,sp,156
 8001f04:	18c00084 	addi	r3,r3,2
 8001f08:	10800044 	addi	r2,r2,1
 8001f0c:	41000015 	stw	r4,0(r8)
 8001f10:	01000084 	movi	r4,2
 8001f14:	41000115 	stw	r4,4(r8)
 8001f18:	d8c02015 	stw	r3,128(sp)
 8001f1c:	d8801f15 	stw	r2,124(sp)
 8001f20:	010001c4 	movi	r4,7
 8001f24:	20825416 	blt	r4,r2,8002878 <___svfprintf_internal_r+0x11d0>
 8001f28:	42000204 	addi	r8,r8,8
 8001f2c:	d9003017 	ldw	r4,192(sp)
 8001f30:	00802004 	movi	r2,128
 8001f34:	2081b926 	beq	r4,r2,800261c <___svfprintf_internal_r+0xf74>
 8001f38:	d9402a17 	ldw	r5,168(sp)
 8001f3c:	d8802b17 	ldw	r2,172(sp)
 8001f40:	28adc83a 	sub	r22,r5,r2
 8001f44:	05802f0e 	bge	zero,r22,8002004 <___svfprintf_internal_r+0x95c>
 8001f48:	07000404 	movi	fp,16
 8001f4c:	d8801f17 	ldw	r2,124(sp)
 8001f50:	e583e20e 	bge	fp,r22,8002edc <___svfprintf_internal_r+0x1834>
 8001f54:	01420074 	movhi	r5,2049
 8001f58:	297b0484 	addi	r5,r5,-5102
 8001f5c:	dc402a15 	stw	r17,168(sp)
 8001f60:	d9402c15 	stw	r5,176(sp)
 8001f64:	b023883a 	mov	r17,r22
 8001f68:	050001c4 	movi	r20,7
 8001f6c:	902d883a 	mov	r22,r18
 8001f70:	8025883a 	mov	r18,r16
 8001f74:	dc002d17 	ldw	r16,180(sp)
 8001f78:	00000306 	br	8001f88 <___svfprintf_internal_r+0x8e0>
 8001f7c:	8c7ffc04 	addi	r17,r17,-16
 8001f80:	42000204 	addi	r8,r8,8
 8001f84:	e440110e 	bge	fp,r17,8001fcc <___svfprintf_internal_r+0x924>
 8001f88:	18c00404 	addi	r3,r3,16
 8001f8c:	10800044 	addi	r2,r2,1
 8001f90:	45400015 	stw	r21,0(r8)
 8001f94:	47000115 	stw	fp,4(r8)
 8001f98:	d8c02015 	stw	r3,128(sp)
 8001f9c:	d8801f15 	stw	r2,124(sp)
 8001fa0:	a0bff60e 	bge	r20,r2,8001f7c <__alt_data_end+0xfc001f7c>
 8001fa4:	d9801e04 	addi	r6,sp,120
 8001fa8:	800b883a 	mov	r5,r16
 8001fac:	9809883a 	mov	r4,r19
 8001fb0:	8006f840 	call	8006f84 <__ssprint_r>
 8001fb4:	103ea31e 	bne	r2,zero,8001a44 <__alt_data_end+0xfc001a44>
 8001fb8:	8c7ffc04 	addi	r17,r17,-16
 8001fbc:	d8c02017 	ldw	r3,128(sp)
 8001fc0:	d8801f17 	ldw	r2,124(sp)
 8001fc4:	da000404 	addi	r8,sp,16
 8001fc8:	e47fef16 	blt	fp,r17,8001f88 <__alt_data_end+0xfc001f88>
 8001fcc:	9021883a 	mov	r16,r18
 8001fd0:	b025883a 	mov	r18,r22
 8001fd4:	882d883a 	mov	r22,r17
 8001fd8:	dc402a17 	ldw	r17,168(sp)
 8001fdc:	d9002c17 	ldw	r4,176(sp)
 8001fe0:	1d87883a 	add	r3,r3,r22
 8001fe4:	10800044 	addi	r2,r2,1
 8001fe8:	41000015 	stw	r4,0(r8)
 8001fec:	45800115 	stw	r22,4(r8)
 8001ff0:	d8c02015 	stw	r3,128(sp)
 8001ff4:	d8801f15 	stw	r2,124(sp)
 8001ff8:	010001c4 	movi	r4,7
 8001ffc:	20820e16 	blt	r4,r2,8002838 <___svfprintf_internal_r+0x1190>
 8002000:	42000204 	addi	r8,r8,8
 8002004:	9080400c 	andi	r2,r18,256
 8002008:	10013a1e 	bne	r2,zero,80024f4 <___svfprintf_internal_r+0xe4c>
 800200c:	d9402b17 	ldw	r5,172(sp)
 8002010:	d8801f17 	ldw	r2,124(sp)
 8002014:	44000015 	stw	r16,0(r8)
 8002018:	1947883a 	add	r3,r3,r5
 800201c:	10800044 	addi	r2,r2,1
 8002020:	41400115 	stw	r5,4(r8)
 8002024:	d8c02015 	stw	r3,128(sp)
 8002028:	d8801f15 	stw	r2,124(sp)
 800202c:	010001c4 	movi	r4,7
 8002030:	2081f316 	blt	r4,r2,8002800 <___svfprintf_internal_r+0x1158>
 8002034:	42000204 	addi	r8,r8,8
 8002038:	9480010c 	andi	r18,r18,4
 800203c:	90003226 	beq	r18,zero,8002108 <___svfprintf_internal_r+0xa60>
 8002040:	d9403117 	ldw	r5,196(sp)
 8002044:	d8802917 	ldw	r2,164(sp)
 8002048:	28a1c83a 	sub	r16,r5,r2
 800204c:	04002e0e 	bge	zero,r16,8002108 <___svfprintf_internal_r+0xa60>
 8002050:	04400404 	movi	r17,16
 8002054:	d8801f17 	ldw	r2,124(sp)
 8002058:	8c04db0e 	bge	r17,r16,80033c8 <___svfprintf_internal_r+0x1d20>
 800205c:	01420074 	movhi	r5,2049
 8002060:	297b0884 	addi	r5,r5,-5086
 8002064:	d9403515 	stw	r5,212(sp)
 8002068:	048001c4 	movi	r18,7
 800206c:	dd002d17 	ldw	r20,180(sp)
 8002070:	00000306 	br	8002080 <___svfprintf_internal_r+0x9d8>
 8002074:	843ffc04 	addi	r16,r16,-16
 8002078:	42000204 	addi	r8,r8,8
 800207c:	8c00130e 	bge	r17,r16,80020cc <___svfprintf_internal_r+0xa24>
 8002080:	01020074 	movhi	r4,2049
 8002084:	18c00404 	addi	r3,r3,16
 8002088:	10800044 	addi	r2,r2,1
 800208c:	213b0884 	addi	r4,r4,-5086
 8002090:	41000015 	stw	r4,0(r8)
 8002094:	44400115 	stw	r17,4(r8)
 8002098:	d8c02015 	stw	r3,128(sp)
 800209c:	d8801f15 	stw	r2,124(sp)
 80020a0:	90bff40e 	bge	r18,r2,8002074 <__alt_data_end+0xfc002074>
 80020a4:	d9801e04 	addi	r6,sp,120
 80020a8:	a00b883a 	mov	r5,r20
 80020ac:	9809883a 	mov	r4,r19
 80020b0:	8006f840 	call	8006f84 <__ssprint_r>
 80020b4:	103e631e 	bne	r2,zero,8001a44 <__alt_data_end+0xfc001a44>
 80020b8:	843ffc04 	addi	r16,r16,-16
 80020bc:	d8c02017 	ldw	r3,128(sp)
 80020c0:	d8801f17 	ldw	r2,124(sp)
 80020c4:	da000404 	addi	r8,sp,16
 80020c8:	8c3fed16 	blt	r17,r16,8002080 <__alt_data_end+0xfc002080>
 80020cc:	d9403517 	ldw	r5,212(sp)
 80020d0:	1c07883a 	add	r3,r3,r16
 80020d4:	10800044 	addi	r2,r2,1
 80020d8:	41400015 	stw	r5,0(r8)
 80020dc:	44000115 	stw	r16,4(r8)
 80020e0:	d8c02015 	stw	r3,128(sp)
 80020e4:	d8801f15 	stw	r2,124(sp)
 80020e8:	010001c4 	movi	r4,7
 80020ec:	2080060e 	bge	r4,r2,8002108 <___svfprintf_internal_r+0xa60>
 80020f0:	d9402d17 	ldw	r5,180(sp)
 80020f4:	d9801e04 	addi	r6,sp,120
 80020f8:	9809883a 	mov	r4,r19
 80020fc:	8006f840 	call	8006f84 <__ssprint_r>
 8002100:	103e501e 	bne	r2,zero,8001a44 <__alt_data_end+0xfc001a44>
 8002104:	d8c02017 	ldw	r3,128(sp)
 8002108:	d8803117 	ldw	r2,196(sp)
 800210c:	d9002917 	ldw	r4,164(sp)
 8002110:	1100010e 	bge	r2,r4,8002118 <___svfprintf_internal_r+0xa70>
 8002114:	2005883a 	mov	r2,r4
 8002118:	d9402f17 	ldw	r5,188(sp)
 800211c:	288b883a 	add	r5,r5,r2
 8002120:	d9402f15 	stw	r5,188(sp)
 8002124:	1801be1e 	bne	r3,zero,8002820 <___svfprintf_internal_r+0x1178>
 8002128:	b8800007 	ldb	r2,0(r23)
 800212c:	d8001f15 	stw	zero,124(sp)
 8002130:	da000404 	addi	r8,sp,16
 8002134:	103d891e 	bne	r2,zero,800175c <__alt_data_end+0xfc00175c>
 8002138:	b823883a 	mov	r17,r23
 800213c:	003d9f06 	br	80017bc <__alt_data_end+0xfc0017bc>
 8002140:	8025883a 	mov	r18,r16
 8002144:	dc002903 	ldbu	r16,164(sp)
 8002148:	e011883a 	mov	r8,fp
 800214c:	84003fcc 	andi	r16,r16,255
 8002150:	8005e61e 	bne	r16,zero,80038ec <___svfprintf_internal_r+0x2244>
 8002154:	94800414 	ori	r18,r18,16
 8002158:	9080080c 	andi	r2,r18,32
 800215c:	10022026 	beq	r2,zero,80029e0 <___svfprintf_internal_r+0x1338>
 8002160:	d9002e17 	ldw	r4,184(sp)
 8002164:	d9402a17 	ldw	r5,168(sp)
 8002168:	d8002785 	stb	zero,158(sp)
 800216c:	20c00204 	addi	r3,r4,8
 8002170:	25000017 	ldw	r20,0(r4)
 8002174:	25800117 	ldw	r22,4(r4)
 8002178:	2803ad16 	blt	r5,zero,8003030 <___svfprintf_internal_r+0x1988>
 800217c:	013fdfc4 	movi	r4,-129
 8002180:	a584b03a 	or	r2,r20,r22
 8002184:	d8c02e15 	stw	r3,184(sp)
 8002188:	9124703a 	and	r18,r18,r4
 800218c:	0039883a 	mov	fp,zero
 8002190:	103eb01e 	bne	r2,zero,8001c54 <__alt_data_end+0xfc001c54>
 8002194:	d8802a17 	ldw	r2,168(sp)
 8002198:	1002e71e 	bne	r2,zero,8002d38 <___svfprintf_internal_r+0x1690>
 800219c:	d8002a15 	stw	zero,168(sp)
 80021a0:	d8002b15 	stw	zero,172(sp)
 80021a4:	dc001e04 	addi	r16,sp,120
 80021a8:	003ef706 	br	8001d88 <__alt_data_end+0xfc001d88>
 80021ac:	8025883a 	mov	r18,r16
 80021b0:	dc002903 	ldbu	r16,164(sp)
 80021b4:	e011883a 	mov	r8,fp
 80021b8:	84003fcc 	andi	r16,r16,255
 80021bc:	8005c81e 	bne	r16,zero,80038e0 <___svfprintf_internal_r+0x2238>
 80021c0:	01020074 	movhi	r4,2049
 80021c4:	213af804 	addi	r4,r4,-5152
 80021c8:	d9003a15 	stw	r4,232(sp)
 80021cc:	9080080c 	andi	r2,r18,32
 80021d0:	10007226 	beq	r2,zero,800239c <___svfprintf_internal_r+0xcf4>
 80021d4:	d9402e17 	ldw	r5,184(sp)
 80021d8:	2d000017 	ldw	r20,0(r5)
 80021dc:	2d800117 	ldw	r22,4(r5)
 80021e0:	29400204 	addi	r5,r5,8
 80021e4:	d9402e15 	stw	r5,184(sp)
 80021e8:	9080004c 	andi	r2,r18,1
 80021ec:	1001aa26 	beq	r2,zero,8002898 <___svfprintf_internal_r+0x11f0>
 80021f0:	a584b03a 	or	r2,r20,r22
 80021f4:	10032526 	beq	r2,zero,8002e8c <___svfprintf_internal_r+0x17e4>
 80021f8:	d8c02a17 	ldw	r3,168(sp)
 80021fc:	00800c04 	movi	r2,48
 8002200:	d8802705 	stb	r2,156(sp)
 8002204:	dc402745 	stb	r17,157(sp)
 8002208:	d8002785 	stb	zero,158(sp)
 800220c:	90800094 	ori	r2,r18,2
 8002210:	1804a316 	blt	r3,zero,80034a0 <___svfprintf_internal_r+0x1df8>
 8002214:	00bfdfc4 	movi	r2,-129
 8002218:	90a4703a 	and	r18,r18,r2
 800221c:	94800094 	ori	r18,r18,2
 8002220:	0039883a 	mov	fp,zero
 8002224:	d9003a17 	ldw	r4,232(sp)
 8002228:	dc001e04 	addi	r16,sp,120
 800222c:	a08003cc 	andi	r2,r20,15
 8002230:	b006973a 	slli	r3,r22,28
 8002234:	2085883a 	add	r2,r4,r2
 8002238:	a028d13a 	srli	r20,r20,4
 800223c:	10800003 	ldbu	r2,0(r2)
 8002240:	b02cd13a 	srli	r22,r22,4
 8002244:	843fffc4 	addi	r16,r16,-1
 8002248:	1d28b03a 	or	r20,r3,r20
 800224c:	80800005 	stb	r2,0(r16)
 8002250:	a584b03a 	or	r2,r20,r22
 8002254:	103ff51e 	bne	r2,zero,800222c <__alt_data_end+0xfc00222c>
 8002258:	d8c02817 	ldw	r3,160(sp)
 800225c:	1c07c83a 	sub	r3,r3,r16
 8002260:	d8c02b15 	stw	r3,172(sp)
 8002264:	003ec806 	br	8001d88 <__alt_data_end+0xfc001d88>
 8002268:	d8c02e17 	ldw	r3,184(sp)
 800226c:	d9002e17 	ldw	r4,184(sp)
 8002270:	8025883a 	mov	r18,r16
 8002274:	18800017 	ldw	r2,0(r3)
 8002278:	21000104 	addi	r4,r4,4
 800227c:	00c00044 	movi	r3,1
 8002280:	e011883a 	mov	r8,fp
 8002284:	d8c02915 	stw	r3,164(sp)
 8002288:	d8002785 	stb	zero,158(sp)
 800228c:	d8801405 	stb	r2,80(sp)
 8002290:	d9002e15 	stw	r4,184(sp)
 8002294:	d8c02b15 	stw	r3,172(sp)
 8002298:	d8002a15 	stw	zero,168(sp)
 800229c:	d8003215 	stw	zero,200(sp)
 80022a0:	dc001404 	addi	r16,sp,80
 80022a4:	0039883a 	mov	fp,zero
 80022a8:	003ec406 	br	8001dbc <__alt_data_end+0xfc001dbc>
 80022ac:	8025883a 	mov	r18,r16
 80022b0:	dc002903 	ldbu	r16,164(sp)
 80022b4:	e011883a 	mov	r8,fp
 80022b8:	84003fcc 	andi	r16,r16,255
 80022bc:	803e8726 	beq	r16,zero,8001cdc <__alt_data_end+0xfc001cdc>
 80022c0:	d8c02b03 	ldbu	r3,172(sp)
 80022c4:	d8c02785 	stb	r3,158(sp)
 80022c8:	003e8406 	br	8001cdc <__alt_data_end+0xfc001cdc>
 80022cc:	00c00044 	movi	r3,1
 80022d0:	d8c02905 	stb	r3,164(sp)
 80022d4:	00c00ac4 	movi	r3,43
 80022d8:	d8c02b05 	stb	r3,172(sp)
 80022dc:	bc400007 	ldb	r17,0(r23)
 80022e0:	003d4606 	br	80017fc <__alt_data_end+0xfc0017fc>
 80022e4:	84000814 	ori	r16,r16,32
 80022e8:	bc400007 	ldb	r17,0(r23)
 80022ec:	003d4306 	br	80017fc <__alt_data_end+0xfc0017fc>
 80022f0:	d8802e17 	ldw	r2,184(sp)
 80022f4:	8025883a 	mov	r18,r16
 80022f8:	d8002785 	stb	zero,158(sp)
 80022fc:	14000017 	ldw	r16,0(r2)
 8002300:	e011883a 	mov	r8,fp
 8002304:	15000104 	addi	r20,r2,4
 8002308:	80042126 	beq	r16,zero,8003390 <___svfprintf_internal_r+0x1ce8>
 800230c:	d8c02a17 	ldw	r3,168(sp)
 8002310:	1803ee16 	blt	r3,zero,80032cc <___svfprintf_internal_r+0x1c24>
 8002314:	180d883a 	mov	r6,r3
 8002318:	000b883a 	mov	r5,zero
 800231c:	8009883a 	mov	r4,r16
 8002320:	df003e15 	stw	fp,248(sp)
 8002324:	8005afc0 	call	8005afc <memchr>
 8002328:	da003e17 	ldw	r8,248(sp)
 800232c:	10046a26 	beq	r2,zero,80034d8 <___svfprintf_internal_r+0x1e30>
 8002330:	1405c83a 	sub	r2,r2,r16
 8002334:	d8802b15 	stw	r2,172(sp)
 8002338:	1003ea16 	blt	r2,zero,80032e4 <___svfprintf_internal_r+0x1c3c>
 800233c:	df002783 	ldbu	fp,158(sp)
 8002340:	d8802915 	stw	r2,164(sp)
 8002344:	dd002e15 	stw	r20,184(sp)
 8002348:	d8002a15 	stw	zero,168(sp)
 800234c:	d8003215 	stw	zero,200(sp)
 8002350:	003e9306 	br	8001da0 <__alt_data_end+0xfc001da0>
 8002354:	8025883a 	mov	r18,r16
 8002358:	dc002903 	ldbu	r16,164(sp)
 800235c:	e011883a 	mov	r8,fp
 8002360:	84003fcc 	andi	r16,r16,255
 8002364:	803f7c26 	beq	r16,zero,8002158 <__alt_data_end+0xfc002158>
 8002368:	d8c02b03 	ldbu	r3,172(sp)
 800236c:	d8c02785 	stb	r3,158(sp)
 8002370:	003f7906 	br	8002158 <__alt_data_end+0xfc002158>
 8002374:	8025883a 	mov	r18,r16
 8002378:	dc002903 	ldbu	r16,164(sp)
 800237c:	e011883a 	mov	r8,fp
 8002380:	84003fcc 	andi	r16,r16,255
 8002384:	8005741e 	bne	r16,zero,8003958 <___svfprintf_internal_r+0x22b0>
 8002388:	01020074 	movhi	r4,2049
 800238c:	213afd04 	addi	r4,r4,-5132
 8002390:	d9003a15 	stw	r4,232(sp)
 8002394:	9080080c 	andi	r2,r18,32
 8002398:	103f8e1e 	bne	r2,zero,80021d4 <__alt_data_end+0xfc0021d4>
 800239c:	9080040c 	andi	r2,r18,16
 80023a0:	1002a726 	beq	r2,zero,8002e40 <___svfprintf_internal_r+0x1798>
 80023a4:	d8802e17 	ldw	r2,184(sp)
 80023a8:	002d883a 	mov	r22,zero
 80023ac:	15000017 	ldw	r20,0(r2)
 80023b0:	10800104 	addi	r2,r2,4
 80023b4:	d8802e15 	stw	r2,184(sp)
 80023b8:	003f8b06 	br	80021e8 <__alt_data_end+0xfc0021e8>
 80023bc:	84000054 	ori	r16,r16,1
 80023c0:	bc400007 	ldb	r17,0(r23)
 80023c4:	003d0d06 	br	80017fc <__alt_data_end+0xfc0017fc>
 80023c8:	d8802b07 	ldb	r2,172(sp)
 80023cc:	1002a41e 	bne	r2,zero,8002e60 <___svfprintf_internal_r+0x17b8>
 80023d0:	00c00044 	movi	r3,1
 80023d4:	d8c02905 	stb	r3,164(sp)
 80023d8:	00c00804 	movi	r3,32
 80023dc:	d8c02b05 	stb	r3,172(sp)
 80023e0:	bc400007 	ldb	r17,0(r23)
 80023e4:	003d0506 	br	80017fc <__alt_data_end+0xfc0017fc>
 80023e8:	8025883a 	mov	r18,r16
 80023ec:	dc002903 	ldbu	r16,164(sp)
 80023f0:	e011883a 	mov	r8,fp
 80023f4:	84003fcc 	andi	r16,r16,255
 80023f8:	803e0626 	beq	r16,zero,8001c14 <__alt_data_end+0xfc001c14>
 80023fc:	d8c02b03 	ldbu	r3,172(sp)
 8002400:	d8c02785 	stb	r3,158(sp)
 8002404:	003e0306 	br	8001c14 <__alt_data_end+0xfc001c14>
 8002408:	bc400007 	ldb	r17,0(r23)
 800240c:	00801b04 	movi	r2,108
 8002410:	88830a26 	beq	r17,r2,800303c <___svfprintf_internal_r+0x1994>
 8002414:	84000414 	ori	r16,r16,16
 8002418:	003cf806 	br	80017fc <__alt_data_end+0xfc0017fc>
 800241c:	8025883a 	mov	r18,r16
 8002420:	dc002903 	ldbu	r16,164(sp)
 8002424:	e011883a 	mov	r8,fp
 8002428:	84003fcc 	andi	r16,r16,255
 800242c:	8005471e 	bne	r16,zero,800394c <___svfprintf_internal_r+0x22a4>
 8002430:	9080080c 	andi	r2,r18,32
 8002434:	10028c26 	beq	r2,zero,8002e68 <___svfprintf_internal_r+0x17c0>
 8002438:	d9002e17 	ldw	r4,184(sp)
 800243c:	d9402f17 	ldw	r5,188(sp)
 8002440:	20800017 	ldw	r2,0(r4)
 8002444:	2807d7fa 	srai	r3,r5,31
 8002448:	21000104 	addi	r4,r4,4
 800244c:	d9002e15 	stw	r4,184(sp)
 8002450:	11400015 	stw	r5,0(r2)
 8002454:	10c00115 	stw	r3,4(r2)
 8002458:	003cbe06 	br	8001754 <__alt_data_end+0xfc001754>
 800245c:	84001014 	ori	r16,r16,64
 8002460:	bc400007 	ldb	r17,0(r23)
 8002464:	003ce506 	br	80017fc <__alt_data_end+0xfc0017fc>
 8002468:	01020074 	movhi	r4,2049
 800246c:	213afd04 	addi	r4,r4,-5132
 8002470:	0039883a 	mov	fp,zero
 8002474:	d9003a15 	stw	r4,232(sp)
 8002478:	04401e04 	movi	r17,120
 800247c:	003f6906 	br	8002224 <__alt_data_end+0xfc002224>
 8002480:	8025883a 	mov	r18,r16
 8002484:	dc002903 	ldbu	r16,164(sp)
 8002488:	e011883a 	mov	r8,fp
 800248c:	84003fcc 	andi	r16,r16,255
 8002490:	8005261e 	bne	r16,zero,800392c <___svfprintf_internal_r+0x2284>
 8002494:	883d6526 	beq	r17,zero,8001a2c <__alt_data_end+0xfc001a2c>
 8002498:	00c00044 	movi	r3,1
 800249c:	d8c02915 	stw	r3,164(sp)
 80024a0:	dc401405 	stb	r17,80(sp)
 80024a4:	d8002785 	stb	zero,158(sp)
 80024a8:	003f7a06 	br	8002294 <__alt_data_end+0xfc002294>
 80024ac:	01020074 	movhi	r4,2049
 80024b0:	213afd04 	addi	r4,r4,-5132
 80024b4:	d9003a15 	stw	r4,232(sp)
 80024b8:	d8c02e15 	stw	r3,184(sp)
 80024bc:	1025883a 	mov	r18,r2
 80024c0:	04401e04 	movi	r17,120
 80024c4:	a584b03a 	or	r2,r20,r22
 80024c8:	1000fa1e 	bne	r2,zero,80028b4 <___svfprintf_internal_r+0x120c>
 80024cc:	0039883a 	mov	fp,zero
 80024d0:	00800084 	movi	r2,2
 80024d4:	10803fcc 	andi	r2,r2,255
 80024d8:	00c00044 	movi	r3,1
 80024dc:	10c21626 	beq	r2,r3,8002d38 <___svfprintf_internal_r+0x1690>
 80024e0:	00c00084 	movi	r3,2
 80024e4:	10fe0e1e 	bne	r2,r3,8001d20 <__alt_data_end+0xfc001d20>
 80024e8:	003d4606 	br	8001a04 <__alt_data_end+0xfc001a04>
 80024ec:	d8c02017 	ldw	r3,128(sp)
 80024f0:	003e7306 	br	8001ec0 <__alt_data_end+0xfc001ec0>
 80024f4:	00801944 	movi	r2,101
 80024f8:	14407c0e 	bge	r2,r17,80026ec <___svfprintf_internal_r+0x1044>
 80024fc:	d9003617 	ldw	r4,216(sp)
 8002500:	d9403717 	ldw	r5,220(sp)
 8002504:	000d883a 	mov	r6,zero
 8002508:	000f883a 	mov	r7,zero
 800250c:	d8c03d15 	stw	r3,244(sp)
 8002510:	da003e15 	stw	r8,248(sp)
 8002514:	800b1340 	call	800b134 <__eqdf2>
 8002518:	d8c03d17 	ldw	r3,244(sp)
 800251c:	da003e17 	ldw	r8,248(sp)
 8002520:	1000f51e 	bne	r2,zero,80028f8 <___svfprintf_internal_r+0x1250>
 8002524:	d8801f17 	ldw	r2,124(sp)
 8002528:	01020074 	movhi	r4,2049
 800252c:	213b0404 	addi	r4,r4,-5104
 8002530:	18c00044 	addi	r3,r3,1
 8002534:	10800044 	addi	r2,r2,1
 8002538:	41000015 	stw	r4,0(r8)
 800253c:	01000044 	movi	r4,1
 8002540:	41000115 	stw	r4,4(r8)
 8002544:	d8c02015 	stw	r3,128(sp)
 8002548:	d8801f15 	stw	r2,124(sp)
 800254c:	010001c4 	movi	r4,7
 8002550:	20826616 	blt	r4,r2,8002eec <___svfprintf_internal_r+0x1844>
 8002554:	42000204 	addi	r8,r8,8
 8002558:	d8802617 	ldw	r2,152(sp)
 800255c:	d9403317 	ldw	r5,204(sp)
 8002560:	11400216 	blt	r2,r5,800256c <___svfprintf_internal_r+0xec4>
 8002564:	9080004c 	andi	r2,r18,1
 8002568:	103eb326 	beq	r2,zero,8002038 <__alt_data_end+0xfc002038>
 800256c:	d8803817 	ldw	r2,224(sp)
 8002570:	d9003417 	ldw	r4,208(sp)
 8002574:	d9403817 	ldw	r5,224(sp)
 8002578:	1887883a 	add	r3,r3,r2
 800257c:	d8801f17 	ldw	r2,124(sp)
 8002580:	41000015 	stw	r4,0(r8)
 8002584:	41400115 	stw	r5,4(r8)
 8002588:	10800044 	addi	r2,r2,1
 800258c:	d8c02015 	stw	r3,128(sp)
 8002590:	d8801f15 	stw	r2,124(sp)
 8002594:	010001c4 	movi	r4,7
 8002598:	2082af16 	blt	r4,r2,8003058 <___svfprintf_internal_r+0x19b0>
 800259c:	42000204 	addi	r8,r8,8
 80025a0:	d8803317 	ldw	r2,204(sp)
 80025a4:	143fffc4 	addi	r16,r2,-1
 80025a8:	043ea30e 	bge	zero,r16,8002038 <__alt_data_end+0xfc002038>
 80025ac:	04400404 	movi	r17,16
 80025b0:	d8801f17 	ldw	r2,124(sp)
 80025b4:	8c00860e 	bge	r17,r16,80027d0 <___svfprintf_internal_r+0x1128>
 80025b8:	01420074 	movhi	r5,2049
 80025bc:	297b0484 	addi	r5,r5,-5102
 80025c0:	d9402c15 	stw	r5,176(sp)
 80025c4:	058001c4 	movi	r22,7
 80025c8:	dd002d17 	ldw	r20,180(sp)
 80025cc:	00000306 	br	80025dc <___svfprintf_internal_r+0xf34>
 80025d0:	42000204 	addi	r8,r8,8
 80025d4:	843ffc04 	addi	r16,r16,-16
 80025d8:	8c00800e 	bge	r17,r16,80027dc <___svfprintf_internal_r+0x1134>
 80025dc:	18c00404 	addi	r3,r3,16
 80025e0:	10800044 	addi	r2,r2,1
 80025e4:	45400015 	stw	r21,0(r8)
 80025e8:	44400115 	stw	r17,4(r8)
 80025ec:	d8c02015 	stw	r3,128(sp)
 80025f0:	d8801f15 	stw	r2,124(sp)
 80025f4:	b0bff60e 	bge	r22,r2,80025d0 <__alt_data_end+0xfc0025d0>
 80025f8:	d9801e04 	addi	r6,sp,120
 80025fc:	a00b883a 	mov	r5,r20
 8002600:	9809883a 	mov	r4,r19
 8002604:	8006f840 	call	8006f84 <__ssprint_r>
 8002608:	103d0e1e 	bne	r2,zero,8001a44 <__alt_data_end+0xfc001a44>
 800260c:	d8c02017 	ldw	r3,128(sp)
 8002610:	d8801f17 	ldw	r2,124(sp)
 8002614:	da000404 	addi	r8,sp,16
 8002618:	003fee06 	br	80025d4 <__alt_data_end+0xfc0025d4>
 800261c:	d9403117 	ldw	r5,196(sp)
 8002620:	d8802917 	ldw	r2,164(sp)
 8002624:	28adc83a 	sub	r22,r5,r2
 8002628:	05be430e 	bge	zero,r22,8001f38 <__alt_data_end+0xfc001f38>
 800262c:	07000404 	movi	fp,16
 8002630:	d8801f17 	ldw	r2,124(sp)
 8002634:	e583a20e 	bge	fp,r22,80034c0 <___svfprintf_internal_r+0x1e18>
 8002638:	01420074 	movhi	r5,2049
 800263c:	297b0484 	addi	r5,r5,-5102
 8002640:	dc403015 	stw	r17,192(sp)
 8002644:	d9402c15 	stw	r5,176(sp)
 8002648:	b023883a 	mov	r17,r22
 800264c:	050001c4 	movi	r20,7
 8002650:	902d883a 	mov	r22,r18
 8002654:	8025883a 	mov	r18,r16
 8002658:	dc002d17 	ldw	r16,180(sp)
 800265c:	00000306 	br	800266c <___svfprintf_internal_r+0xfc4>
 8002660:	8c7ffc04 	addi	r17,r17,-16
 8002664:	42000204 	addi	r8,r8,8
 8002668:	e440110e 	bge	fp,r17,80026b0 <___svfprintf_internal_r+0x1008>
 800266c:	18c00404 	addi	r3,r3,16
 8002670:	10800044 	addi	r2,r2,1
 8002674:	45400015 	stw	r21,0(r8)
 8002678:	47000115 	stw	fp,4(r8)
 800267c:	d8c02015 	stw	r3,128(sp)
 8002680:	d8801f15 	stw	r2,124(sp)
 8002684:	a0bff60e 	bge	r20,r2,8002660 <__alt_data_end+0xfc002660>
 8002688:	d9801e04 	addi	r6,sp,120
 800268c:	800b883a 	mov	r5,r16
 8002690:	9809883a 	mov	r4,r19
 8002694:	8006f840 	call	8006f84 <__ssprint_r>
 8002698:	103cea1e 	bne	r2,zero,8001a44 <__alt_data_end+0xfc001a44>
 800269c:	8c7ffc04 	addi	r17,r17,-16
 80026a0:	d8c02017 	ldw	r3,128(sp)
 80026a4:	d8801f17 	ldw	r2,124(sp)
 80026a8:	da000404 	addi	r8,sp,16
 80026ac:	e47fef16 	blt	fp,r17,800266c <__alt_data_end+0xfc00266c>
 80026b0:	9021883a 	mov	r16,r18
 80026b4:	b025883a 	mov	r18,r22
 80026b8:	882d883a 	mov	r22,r17
 80026bc:	dc403017 	ldw	r17,192(sp)
 80026c0:	d9002c17 	ldw	r4,176(sp)
 80026c4:	1d87883a 	add	r3,r3,r22
 80026c8:	10800044 	addi	r2,r2,1
 80026cc:	41000015 	stw	r4,0(r8)
 80026d0:	45800115 	stw	r22,4(r8)
 80026d4:	d8c02015 	stw	r3,128(sp)
 80026d8:	d8801f15 	stw	r2,124(sp)
 80026dc:	010001c4 	movi	r4,7
 80026e0:	20819a16 	blt	r4,r2,8002d4c <___svfprintf_internal_r+0x16a4>
 80026e4:	42000204 	addi	r8,r8,8
 80026e8:	003e1306 	br	8001f38 <__alt_data_end+0xfc001f38>
 80026ec:	d9403317 	ldw	r5,204(sp)
 80026f0:	00800044 	movi	r2,1
 80026f4:	18c00044 	addi	r3,r3,1
 80026f8:	1141710e 	bge	r2,r5,8002cc0 <___svfprintf_internal_r+0x1618>
 80026fc:	dc401f17 	ldw	r17,124(sp)
 8002700:	00800044 	movi	r2,1
 8002704:	40800115 	stw	r2,4(r8)
 8002708:	8c400044 	addi	r17,r17,1
 800270c:	44000015 	stw	r16,0(r8)
 8002710:	d8c02015 	stw	r3,128(sp)
 8002714:	dc401f15 	stw	r17,124(sp)
 8002718:	008001c4 	movi	r2,7
 800271c:	14417416 	blt	r2,r17,8002cf0 <___svfprintf_internal_r+0x1648>
 8002720:	42000204 	addi	r8,r8,8
 8002724:	d8803817 	ldw	r2,224(sp)
 8002728:	d9003417 	ldw	r4,208(sp)
 800272c:	8c400044 	addi	r17,r17,1
 8002730:	10c7883a 	add	r3,r2,r3
 8002734:	40800115 	stw	r2,4(r8)
 8002738:	41000015 	stw	r4,0(r8)
 800273c:	d8c02015 	stw	r3,128(sp)
 8002740:	dc401f15 	stw	r17,124(sp)
 8002744:	008001c4 	movi	r2,7
 8002748:	14417216 	blt	r2,r17,8002d14 <___svfprintf_internal_r+0x166c>
 800274c:	45800204 	addi	r22,r8,8
 8002750:	d9003617 	ldw	r4,216(sp)
 8002754:	d9403717 	ldw	r5,220(sp)
 8002758:	000d883a 	mov	r6,zero
 800275c:	000f883a 	mov	r7,zero
 8002760:	d8c03d15 	stw	r3,244(sp)
 8002764:	800b1340 	call	800b134 <__eqdf2>
 8002768:	d8c03d17 	ldw	r3,244(sp)
 800276c:	1000b326 	beq	r2,zero,8002a3c <___svfprintf_internal_r+0x1394>
 8002770:	d9403317 	ldw	r5,204(sp)
 8002774:	84000044 	addi	r16,r16,1
 8002778:	8c400044 	addi	r17,r17,1
 800277c:	28bfffc4 	addi	r2,r5,-1
 8002780:	1887883a 	add	r3,r3,r2
 8002784:	b0800115 	stw	r2,4(r22)
 8002788:	b4000015 	stw	r16,0(r22)
 800278c:	d8c02015 	stw	r3,128(sp)
 8002790:	dc401f15 	stw	r17,124(sp)
 8002794:	008001c4 	movi	r2,7
 8002798:	1440d216 	blt	r2,r17,8002ae4 <___svfprintf_internal_r+0x143c>
 800279c:	b5800204 	addi	r22,r22,8
 80027a0:	d9003b17 	ldw	r4,236(sp)
 80027a4:	df0022c4 	addi	fp,sp,139
 80027a8:	8c400044 	addi	r17,r17,1
 80027ac:	20c7883a 	add	r3,r4,r3
 80027b0:	b7000015 	stw	fp,0(r22)
 80027b4:	b1000115 	stw	r4,4(r22)
 80027b8:	d8c02015 	stw	r3,128(sp)
 80027bc:	dc401f15 	stw	r17,124(sp)
 80027c0:	008001c4 	movi	r2,7
 80027c4:	14400e16 	blt	r2,r17,8002800 <___svfprintf_internal_r+0x1158>
 80027c8:	b2000204 	addi	r8,r22,8
 80027cc:	003e1a06 	br	8002038 <__alt_data_end+0xfc002038>
 80027d0:	01020074 	movhi	r4,2049
 80027d4:	213b0484 	addi	r4,r4,-5102
 80027d8:	d9002c15 	stw	r4,176(sp)
 80027dc:	d9002c17 	ldw	r4,176(sp)
 80027e0:	1c07883a 	add	r3,r3,r16
 80027e4:	44000115 	stw	r16,4(r8)
 80027e8:	41000015 	stw	r4,0(r8)
 80027ec:	10800044 	addi	r2,r2,1
 80027f0:	d8c02015 	stw	r3,128(sp)
 80027f4:	d8801f15 	stw	r2,124(sp)
 80027f8:	010001c4 	movi	r4,7
 80027fc:	20be0d0e 	bge	r4,r2,8002034 <__alt_data_end+0xfc002034>
 8002800:	d9402d17 	ldw	r5,180(sp)
 8002804:	d9801e04 	addi	r6,sp,120
 8002808:	9809883a 	mov	r4,r19
 800280c:	8006f840 	call	8006f84 <__ssprint_r>
 8002810:	103c8c1e 	bne	r2,zero,8001a44 <__alt_data_end+0xfc001a44>
 8002814:	d8c02017 	ldw	r3,128(sp)
 8002818:	da000404 	addi	r8,sp,16
 800281c:	003e0606 	br	8002038 <__alt_data_end+0xfc002038>
 8002820:	d9402d17 	ldw	r5,180(sp)
 8002824:	d9801e04 	addi	r6,sp,120
 8002828:	9809883a 	mov	r4,r19
 800282c:	8006f840 	call	8006f84 <__ssprint_r>
 8002830:	103e3d26 	beq	r2,zero,8002128 <__alt_data_end+0xfc002128>
 8002834:	003c8306 	br	8001a44 <__alt_data_end+0xfc001a44>
 8002838:	d9402d17 	ldw	r5,180(sp)
 800283c:	d9801e04 	addi	r6,sp,120
 8002840:	9809883a 	mov	r4,r19
 8002844:	8006f840 	call	8006f84 <__ssprint_r>
 8002848:	103c7e1e 	bne	r2,zero,8001a44 <__alt_data_end+0xfc001a44>
 800284c:	d8c02017 	ldw	r3,128(sp)
 8002850:	da000404 	addi	r8,sp,16
 8002854:	003deb06 	br	8002004 <__alt_data_end+0xfc002004>
 8002858:	d9402d17 	ldw	r5,180(sp)
 800285c:	d9801e04 	addi	r6,sp,120
 8002860:	9809883a 	mov	r4,r19
 8002864:	8006f840 	call	8006f84 <__ssprint_r>
 8002868:	103c761e 	bne	r2,zero,8001a44 <__alt_data_end+0xfc001a44>
 800286c:	d8c02017 	ldw	r3,128(sp)
 8002870:	da000404 	addi	r8,sp,16
 8002874:	003d9f06 	br	8001ef4 <__alt_data_end+0xfc001ef4>
 8002878:	d9402d17 	ldw	r5,180(sp)
 800287c:	d9801e04 	addi	r6,sp,120
 8002880:	9809883a 	mov	r4,r19
 8002884:	8006f840 	call	8006f84 <__ssprint_r>
 8002888:	103c6e1e 	bne	r2,zero,8001a44 <__alt_data_end+0xfc001a44>
 800288c:	d8c02017 	ldw	r3,128(sp)
 8002890:	da000404 	addi	r8,sp,16
 8002894:	003da506 	br	8001f2c <__alt_data_end+0xfc001f2c>
 8002898:	d9402a17 	ldw	r5,168(sp)
 800289c:	d8002785 	stb	zero,158(sp)
 80028a0:	283f0816 	blt	r5,zero,80024c4 <__alt_data_end+0xfc0024c4>
 80028a4:	00ffdfc4 	movi	r3,-129
 80028a8:	a584b03a 	or	r2,r20,r22
 80028ac:	90e4703a 	and	r18,r18,r3
 80028b0:	103c5126 	beq	r2,zero,80019f8 <__alt_data_end+0xfc0019f8>
 80028b4:	0039883a 	mov	fp,zero
 80028b8:	003e5a06 	br	8002224 <__alt_data_end+0xfc002224>
 80028bc:	9080040c 	andi	r2,r18,16
 80028c0:	10013d26 	beq	r2,zero,8002db8 <___svfprintf_internal_r+0x1710>
 80028c4:	d8c02e17 	ldw	r3,184(sp)
 80028c8:	d9002a17 	ldw	r4,168(sp)
 80028cc:	d8002785 	stb	zero,158(sp)
 80028d0:	18800104 	addi	r2,r3,4
 80028d4:	1d000017 	ldw	r20,0(r3)
 80028d8:	002d883a 	mov	r22,zero
 80028dc:	20013f16 	blt	r4,zero,8002ddc <___svfprintf_internal_r+0x1734>
 80028e0:	00ffdfc4 	movi	r3,-129
 80028e4:	d8802e15 	stw	r2,184(sp)
 80028e8:	90e4703a 	and	r18,r18,r3
 80028ec:	a03d0926 	beq	r20,zero,8001d14 <__alt_data_end+0xfc001d14>
 80028f0:	0039883a 	mov	fp,zero
 80028f4:	003d0c06 	br	8001d28 <__alt_data_end+0xfc001d28>
 80028f8:	dc402617 	ldw	r17,152(sp)
 80028fc:	0441830e 	bge	zero,r17,8002f0c <___svfprintf_internal_r+0x1864>
 8002900:	dc403217 	ldw	r17,200(sp)
 8002904:	d8803317 	ldw	r2,204(sp)
 8002908:	1440010e 	bge	r2,r17,8002910 <___svfprintf_internal_r+0x1268>
 800290c:	1023883a 	mov	r17,r2
 8002910:	04400a0e 	bge	zero,r17,800293c <___svfprintf_internal_r+0x1294>
 8002914:	d8801f17 	ldw	r2,124(sp)
 8002918:	1c47883a 	add	r3,r3,r17
 800291c:	44000015 	stw	r16,0(r8)
 8002920:	10800044 	addi	r2,r2,1
 8002924:	44400115 	stw	r17,4(r8)
 8002928:	d8c02015 	stw	r3,128(sp)
 800292c:	d8801f15 	stw	r2,124(sp)
 8002930:	010001c4 	movi	r4,7
 8002934:	20827516 	blt	r4,r2,800330c <___svfprintf_internal_r+0x1c64>
 8002938:	42000204 	addi	r8,r8,8
 800293c:	88027b16 	blt	r17,zero,800332c <___svfprintf_internal_r+0x1c84>
 8002940:	d9003217 	ldw	r4,200(sp)
 8002944:	2463c83a 	sub	r17,r4,r17
 8002948:	0440990e 	bge	zero,r17,8002bb0 <___svfprintf_internal_r+0x1508>
 800294c:	05800404 	movi	r22,16
 8002950:	d8801f17 	ldw	r2,124(sp)
 8002954:	b441530e 	bge	r22,r17,8002ea4 <___svfprintf_internal_r+0x17fc>
 8002958:	01020074 	movhi	r4,2049
 800295c:	213b0484 	addi	r4,r4,-5102
 8002960:	d9002c15 	stw	r4,176(sp)
 8002964:	070001c4 	movi	fp,7
 8002968:	dd002d17 	ldw	r20,180(sp)
 800296c:	00000306 	br	800297c <___svfprintf_internal_r+0x12d4>
 8002970:	42000204 	addi	r8,r8,8
 8002974:	8c7ffc04 	addi	r17,r17,-16
 8002978:	b4414d0e 	bge	r22,r17,8002eb0 <___svfprintf_internal_r+0x1808>
 800297c:	18c00404 	addi	r3,r3,16
 8002980:	10800044 	addi	r2,r2,1
 8002984:	45400015 	stw	r21,0(r8)
 8002988:	45800115 	stw	r22,4(r8)
 800298c:	d8c02015 	stw	r3,128(sp)
 8002990:	d8801f15 	stw	r2,124(sp)
 8002994:	e0bff60e 	bge	fp,r2,8002970 <__alt_data_end+0xfc002970>
 8002998:	d9801e04 	addi	r6,sp,120
 800299c:	a00b883a 	mov	r5,r20
 80029a0:	9809883a 	mov	r4,r19
 80029a4:	8006f840 	call	8006f84 <__ssprint_r>
 80029a8:	103c261e 	bne	r2,zero,8001a44 <__alt_data_end+0xfc001a44>
 80029ac:	d8c02017 	ldw	r3,128(sp)
 80029b0:	d8801f17 	ldw	r2,124(sp)
 80029b4:	da000404 	addi	r8,sp,16
 80029b8:	003fee06 	br	8002974 <__alt_data_end+0xfc002974>
 80029bc:	d9402d17 	ldw	r5,180(sp)
 80029c0:	d9801e04 	addi	r6,sp,120
 80029c4:	9809883a 	mov	r4,r19
 80029c8:	8006f840 	call	8006f84 <__ssprint_r>
 80029cc:	103c1d1e 	bne	r2,zero,8001a44 <__alt_data_end+0xfc001a44>
 80029d0:	d8c02017 	ldw	r3,128(sp)
 80029d4:	df002787 	ldb	fp,158(sp)
 80029d8:	da000404 	addi	r8,sp,16
 80029dc:	003d3806 	br	8001ec0 <__alt_data_end+0xfc001ec0>
 80029e0:	9080040c 	andi	r2,r18,16
 80029e4:	10005c26 	beq	r2,zero,8002b58 <___svfprintf_internal_r+0x14b0>
 80029e8:	d8c02e17 	ldw	r3,184(sp)
 80029ec:	d9002a17 	ldw	r4,168(sp)
 80029f0:	d8002785 	stb	zero,158(sp)
 80029f4:	18800104 	addi	r2,r3,4
 80029f8:	1d000017 	ldw	r20,0(r3)
 80029fc:	002d883a 	mov	r22,zero
 8002a00:	20005e16 	blt	r4,zero,8002b7c <___svfprintf_internal_r+0x14d4>
 8002a04:	00ffdfc4 	movi	r3,-129
 8002a08:	d8802e15 	stw	r2,184(sp)
 8002a0c:	90e4703a 	and	r18,r18,r3
 8002a10:	0039883a 	mov	fp,zero
 8002a14:	a03ddf26 	beq	r20,zero,8002194 <__alt_data_end+0xfc002194>
 8002a18:	00800244 	movi	r2,9
 8002a1c:	153c8e36 	bltu	r2,r20,8001c58 <__alt_data_end+0xfc001c58>
 8002a20:	a5000c04 	addi	r20,r20,48
 8002a24:	dc001dc4 	addi	r16,sp,119
 8002a28:	dd001dc5 	stb	r20,119(sp)
 8002a2c:	d8c02817 	ldw	r3,160(sp)
 8002a30:	1c07c83a 	sub	r3,r3,r16
 8002a34:	d8c02b15 	stw	r3,172(sp)
 8002a38:	003cd306 	br	8001d88 <__alt_data_end+0xfc001d88>
 8002a3c:	d8803317 	ldw	r2,204(sp)
 8002a40:	143fffc4 	addi	r16,r2,-1
 8002a44:	043f560e 	bge	zero,r16,80027a0 <__alt_data_end+0xfc0027a0>
 8002a48:	07000404 	movi	fp,16
 8002a4c:	e403530e 	bge	fp,r16,800379c <___svfprintf_internal_r+0x20f4>
 8002a50:	01420074 	movhi	r5,2049
 8002a54:	297b0484 	addi	r5,r5,-5102
 8002a58:	d9402c15 	stw	r5,176(sp)
 8002a5c:	01c001c4 	movi	r7,7
 8002a60:	dd002d17 	ldw	r20,180(sp)
 8002a64:	00000306 	br	8002a74 <___svfprintf_internal_r+0x13cc>
 8002a68:	843ffc04 	addi	r16,r16,-16
 8002a6c:	b5800204 	addi	r22,r22,8
 8002a70:	e400130e 	bge	fp,r16,8002ac0 <___svfprintf_internal_r+0x1418>
 8002a74:	18c00404 	addi	r3,r3,16
 8002a78:	8c400044 	addi	r17,r17,1
 8002a7c:	b5400015 	stw	r21,0(r22)
 8002a80:	b7000115 	stw	fp,4(r22)
 8002a84:	d8c02015 	stw	r3,128(sp)
 8002a88:	dc401f15 	stw	r17,124(sp)
 8002a8c:	3c7ff60e 	bge	r7,r17,8002a68 <__alt_data_end+0xfc002a68>
 8002a90:	d9801e04 	addi	r6,sp,120
 8002a94:	a00b883a 	mov	r5,r20
 8002a98:	9809883a 	mov	r4,r19
 8002a9c:	d9c03d15 	stw	r7,244(sp)
 8002aa0:	8006f840 	call	8006f84 <__ssprint_r>
 8002aa4:	d9c03d17 	ldw	r7,244(sp)
 8002aa8:	103be61e 	bne	r2,zero,8001a44 <__alt_data_end+0xfc001a44>
 8002aac:	843ffc04 	addi	r16,r16,-16
 8002ab0:	d8c02017 	ldw	r3,128(sp)
 8002ab4:	dc401f17 	ldw	r17,124(sp)
 8002ab8:	dd800404 	addi	r22,sp,16
 8002abc:	e43fed16 	blt	fp,r16,8002a74 <__alt_data_end+0xfc002a74>
 8002ac0:	d8802c17 	ldw	r2,176(sp)
 8002ac4:	1c07883a 	add	r3,r3,r16
 8002ac8:	8c400044 	addi	r17,r17,1
 8002acc:	b0800015 	stw	r2,0(r22)
 8002ad0:	b4000115 	stw	r16,4(r22)
 8002ad4:	d8c02015 	stw	r3,128(sp)
 8002ad8:	dc401f15 	stw	r17,124(sp)
 8002adc:	008001c4 	movi	r2,7
 8002ae0:	147f2e0e 	bge	r2,r17,800279c <__alt_data_end+0xfc00279c>
 8002ae4:	d9402d17 	ldw	r5,180(sp)
 8002ae8:	d9801e04 	addi	r6,sp,120
 8002aec:	9809883a 	mov	r4,r19
 8002af0:	8006f840 	call	8006f84 <__ssprint_r>
 8002af4:	103bd31e 	bne	r2,zero,8001a44 <__alt_data_end+0xfc001a44>
 8002af8:	d8c02017 	ldw	r3,128(sp)
 8002afc:	dc401f17 	ldw	r17,124(sp)
 8002b00:	dd800404 	addi	r22,sp,16
 8002b04:	003f2606 	br	80027a0 <__alt_data_end+0xfc0027a0>
 8002b08:	9080040c 	andi	r2,r18,16
 8002b0c:	1000c326 	beq	r2,zero,8002e1c <___svfprintf_internal_r+0x1774>
 8002b10:	d9402e17 	ldw	r5,184(sp)
 8002b14:	2d000017 	ldw	r20,0(r5)
 8002b18:	29400104 	addi	r5,r5,4
 8002b1c:	d9402e15 	stw	r5,184(sp)
 8002b20:	a02dd7fa 	srai	r22,r20,31
 8002b24:	b005883a 	mov	r2,r22
 8002b28:	103c430e 	bge	r2,zero,8001c38 <__alt_data_end+0xfc001c38>
 8002b2c:	d9402a17 	ldw	r5,168(sp)
 8002b30:	0529c83a 	sub	r20,zero,r20
 8002b34:	07000b44 	movi	fp,45
 8002b38:	a004c03a 	cmpne	r2,r20,zero
 8002b3c:	05adc83a 	sub	r22,zero,r22
 8002b40:	df002785 	stb	fp,158(sp)
 8002b44:	b0adc83a 	sub	r22,r22,r2
 8002b48:	28022e16 	blt	r5,zero,8003404 <___svfprintf_internal_r+0x1d5c>
 8002b4c:	00bfdfc4 	movi	r2,-129
 8002b50:	90a4703a 	and	r18,r18,r2
 8002b54:	003c3f06 	br	8001c54 <__alt_data_end+0xfc001c54>
 8002b58:	9080100c 	andi	r2,r18,64
 8002b5c:	d8002785 	stb	zero,158(sp)
 8002b60:	10012526 	beq	r2,zero,8002ff8 <___svfprintf_internal_r+0x1950>
 8002b64:	d9402e17 	ldw	r5,184(sp)
 8002b68:	d8c02a17 	ldw	r3,168(sp)
 8002b6c:	002d883a 	mov	r22,zero
 8002b70:	28800104 	addi	r2,r5,4
 8002b74:	2d00000b 	ldhu	r20,0(r5)
 8002b78:	183fa20e 	bge	r3,zero,8002a04 <__alt_data_end+0xfc002a04>
 8002b7c:	d8802e15 	stw	r2,184(sp)
 8002b80:	0039883a 	mov	fp,zero
 8002b84:	a584b03a 	or	r2,r20,r22
 8002b88:	103c321e 	bne	r2,zero,8001c54 <__alt_data_end+0xfc001c54>
 8002b8c:	00800044 	movi	r2,1
 8002b90:	003e5006 	br	80024d4 <__alt_data_end+0xfc0024d4>
 8002b94:	d9402d17 	ldw	r5,180(sp)
 8002b98:	d9801e04 	addi	r6,sp,120
 8002b9c:	9809883a 	mov	r4,r19
 8002ba0:	8006f840 	call	8006f84 <__ssprint_r>
 8002ba4:	103ba71e 	bne	r2,zero,8001a44 <__alt_data_end+0xfc001a44>
 8002ba8:	d8c02017 	ldw	r3,128(sp)
 8002bac:	da000404 	addi	r8,sp,16
 8002bb0:	d9003217 	ldw	r4,200(sp)
 8002bb4:	d8802617 	ldw	r2,152(sp)
 8002bb8:	d9403317 	ldw	r5,204(sp)
 8002bbc:	8123883a 	add	r17,r16,r4
 8002bc0:	11400216 	blt	r2,r5,8002bcc <___svfprintf_internal_r+0x1524>
 8002bc4:	9100004c 	andi	r4,r18,1
 8002bc8:	20000d26 	beq	r4,zero,8002c00 <___svfprintf_internal_r+0x1558>
 8002bcc:	d9003817 	ldw	r4,224(sp)
 8002bd0:	d9403417 	ldw	r5,208(sp)
 8002bd4:	1907883a 	add	r3,r3,r4
 8002bd8:	d9001f17 	ldw	r4,124(sp)
 8002bdc:	41400015 	stw	r5,0(r8)
 8002be0:	d9403817 	ldw	r5,224(sp)
 8002be4:	21000044 	addi	r4,r4,1
 8002be8:	d8c02015 	stw	r3,128(sp)
 8002bec:	41400115 	stw	r5,4(r8)
 8002bf0:	d9001f15 	stw	r4,124(sp)
 8002bf4:	014001c4 	movi	r5,7
 8002bf8:	2901dc16 	blt	r5,r4,800336c <___svfprintf_internal_r+0x1cc4>
 8002bfc:	42000204 	addi	r8,r8,8
 8002c00:	d9003317 	ldw	r4,204(sp)
 8002c04:	8121883a 	add	r16,r16,r4
 8002c08:	2085c83a 	sub	r2,r4,r2
 8002c0c:	8461c83a 	sub	r16,r16,r17
 8002c10:	1400010e 	bge	r2,r16,8002c18 <___svfprintf_internal_r+0x1570>
 8002c14:	1021883a 	mov	r16,r2
 8002c18:	04000a0e 	bge	zero,r16,8002c44 <___svfprintf_internal_r+0x159c>
 8002c1c:	d9001f17 	ldw	r4,124(sp)
 8002c20:	1c07883a 	add	r3,r3,r16
 8002c24:	44400015 	stw	r17,0(r8)
 8002c28:	21000044 	addi	r4,r4,1
 8002c2c:	44000115 	stw	r16,4(r8)
 8002c30:	d8c02015 	stw	r3,128(sp)
 8002c34:	d9001f15 	stw	r4,124(sp)
 8002c38:	014001c4 	movi	r5,7
 8002c3c:	2901e616 	blt	r5,r4,80033d8 <___svfprintf_internal_r+0x1d30>
 8002c40:	42000204 	addi	r8,r8,8
 8002c44:	8001f616 	blt	r16,zero,8003420 <___svfprintf_internal_r+0x1d78>
 8002c48:	1421c83a 	sub	r16,r2,r16
 8002c4c:	043cfa0e 	bge	zero,r16,8002038 <__alt_data_end+0xfc002038>
 8002c50:	04400404 	movi	r17,16
 8002c54:	d8801f17 	ldw	r2,124(sp)
 8002c58:	8c3edd0e 	bge	r17,r16,80027d0 <__alt_data_end+0xfc0027d0>
 8002c5c:	01420074 	movhi	r5,2049
 8002c60:	297b0484 	addi	r5,r5,-5102
 8002c64:	d9402c15 	stw	r5,176(sp)
 8002c68:	058001c4 	movi	r22,7
 8002c6c:	dd002d17 	ldw	r20,180(sp)
 8002c70:	00000306 	br	8002c80 <___svfprintf_internal_r+0x15d8>
 8002c74:	42000204 	addi	r8,r8,8
 8002c78:	843ffc04 	addi	r16,r16,-16
 8002c7c:	8c3ed70e 	bge	r17,r16,80027dc <__alt_data_end+0xfc0027dc>
 8002c80:	18c00404 	addi	r3,r3,16
 8002c84:	10800044 	addi	r2,r2,1
 8002c88:	45400015 	stw	r21,0(r8)
 8002c8c:	44400115 	stw	r17,4(r8)
 8002c90:	d8c02015 	stw	r3,128(sp)
 8002c94:	d8801f15 	stw	r2,124(sp)
 8002c98:	b0bff60e 	bge	r22,r2,8002c74 <__alt_data_end+0xfc002c74>
 8002c9c:	d9801e04 	addi	r6,sp,120
 8002ca0:	a00b883a 	mov	r5,r20
 8002ca4:	9809883a 	mov	r4,r19
 8002ca8:	8006f840 	call	8006f84 <__ssprint_r>
 8002cac:	103b651e 	bne	r2,zero,8001a44 <__alt_data_end+0xfc001a44>
 8002cb0:	d8c02017 	ldw	r3,128(sp)
 8002cb4:	d8801f17 	ldw	r2,124(sp)
 8002cb8:	da000404 	addi	r8,sp,16
 8002cbc:	003fee06 	br	8002c78 <__alt_data_end+0xfc002c78>
 8002cc0:	9088703a 	and	r4,r18,r2
 8002cc4:	203e8d1e 	bne	r4,zero,80026fc <__alt_data_end+0xfc0026fc>
 8002cc8:	dc401f17 	ldw	r17,124(sp)
 8002ccc:	40800115 	stw	r2,4(r8)
 8002cd0:	44000015 	stw	r16,0(r8)
 8002cd4:	8c400044 	addi	r17,r17,1
 8002cd8:	d8c02015 	stw	r3,128(sp)
 8002cdc:	dc401f15 	stw	r17,124(sp)
 8002ce0:	008001c4 	movi	r2,7
 8002ce4:	147f7f16 	blt	r2,r17,8002ae4 <__alt_data_end+0xfc002ae4>
 8002ce8:	45800204 	addi	r22,r8,8
 8002cec:	003eac06 	br	80027a0 <__alt_data_end+0xfc0027a0>
 8002cf0:	d9402d17 	ldw	r5,180(sp)
 8002cf4:	d9801e04 	addi	r6,sp,120
 8002cf8:	9809883a 	mov	r4,r19
 8002cfc:	8006f840 	call	8006f84 <__ssprint_r>
 8002d00:	103b501e 	bne	r2,zero,8001a44 <__alt_data_end+0xfc001a44>
 8002d04:	d8c02017 	ldw	r3,128(sp)
 8002d08:	dc401f17 	ldw	r17,124(sp)
 8002d0c:	da000404 	addi	r8,sp,16
 8002d10:	003e8406 	br	8002724 <__alt_data_end+0xfc002724>
 8002d14:	d9402d17 	ldw	r5,180(sp)
 8002d18:	d9801e04 	addi	r6,sp,120
 8002d1c:	9809883a 	mov	r4,r19
 8002d20:	8006f840 	call	8006f84 <__ssprint_r>
 8002d24:	103b471e 	bne	r2,zero,8001a44 <__alt_data_end+0xfc001a44>
 8002d28:	d8c02017 	ldw	r3,128(sp)
 8002d2c:	dc401f17 	ldw	r17,124(sp)
 8002d30:	dd800404 	addi	r22,sp,16
 8002d34:	003e8606 	br	8002750 <__alt_data_end+0xfc002750>
 8002d38:	0029883a 	mov	r20,zero
 8002d3c:	a5000c04 	addi	r20,r20,48
 8002d40:	dc001dc4 	addi	r16,sp,119
 8002d44:	dd001dc5 	stb	r20,119(sp)
 8002d48:	003f3806 	br	8002a2c <__alt_data_end+0xfc002a2c>
 8002d4c:	d9402d17 	ldw	r5,180(sp)
 8002d50:	d9801e04 	addi	r6,sp,120
 8002d54:	9809883a 	mov	r4,r19
 8002d58:	8006f840 	call	8006f84 <__ssprint_r>
 8002d5c:	103b391e 	bne	r2,zero,8001a44 <__alt_data_end+0xfc001a44>
 8002d60:	d8c02017 	ldw	r3,128(sp)
 8002d64:	da000404 	addi	r8,sp,16
 8002d68:	003c7306 	br	8001f38 <__alt_data_end+0xfc001f38>
 8002d6c:	d9003617 	ldw	r4,216(sp)
 8002d70:	d9403717 	ldw	r5,220(sp)
 8002d74:	da003e15 	stw	r8,248(sp)
 8002d78:	8006de00 	call	8006de0 <__fpclassifyd>
 8002d7c:	da003e17 	ldw	r8,248(sp)
 8002d80:	1000bd1e 	bne	r2,zero,8003078 <___svfprintf_internal_r+0x19d0>
 8002d84:	008011c4 	movi	r2,71
 8002d88:	14411e0e 	bge	r2,r17,8003204 <___svfprintf_internal_r+0x1b5c>
 8002d8c:	04020074 	movhi	r16,2049
 8002d90:	843af704 	addi	r16,r16,-5156
 8002d94:	00c000c4 	movi	r3,3
 8002d98:	00bfdfc4 	movi	r2,-129
 8002d9c:	d8c02915 	stw	r3,164(sp)
 8002da0:	90a4703a 	and	r18,r18,r2
 8002da4:	df002783 	ldbu	fp,158(sp)
 8002da8:	d8c02b15 	stw	r3,172(sp)
 8002dac:	d8002a15 	stw	zero,168(sp)
 8002db0:	d8003215 	stw	zero,200(sp)
 8002db4:	003bfa06 	br	8001da0 <__alt_data_end+0xfc001da0>
 8002db8:	9080100c 	andi	r2,r18,64
 8002dbc:	d8002785 	stb	zero,158(sp)
 8002dc0:	10009426 	beq	r2,zero,8003014 <___svfprintf_internal_r+0x196c>
 8002dc4:	d9402e17 	ldw	r5,184(sp)
 8002dc8:	d8c02a17 	ldw	r3,168(sp)
 8002dcc:	002d883a 	mov	r22,zero
 8002dd0:	28800104 	addi	r2,r5,4
 8002dd4:	2d00000b 	ldhu	r20,0(r5)
 8002dd8:	183ec10e 	bge	r3,zero,80028e0 <__alt_data_end+0xfc0028e0>
 8002ddc:	a586b03a 	or	r3,r20,r22
 8002de0:	d8802e15 	stw	r2,184(sp)
 8002de4:	183ec21e 	bne	r3,zero,80028f0 <__alt_data_end+0xfc0028f0>
 8002de8:	0039883a 	mov	fp,zero
 8002dec:	0005883a 	mov	r2,zero
 8002df0:	003db806 	br	80024d4 <__alt_data_end+0xfc0024d4>
 8002df4:	d8c02e17 	ldw	r3,184(sp)
 8002df8:	d9002e17 	ldw	r4,184(sp)
 8002dfc:	d9402e17 	ldw	r5,184(sp)
 8002e00:	18c00017 	ldw	r3,0(r3)
 8002e04:	21000117 	ldw	r4,4(r4)
 8002e08:	29400204 	addi	r5,r5,8
 8002e0c:	d8c03615 	stw	r3,216(sp)
 8002e10:	d9003715 	stw	r4,220(sp)
 8002e14:	d9402e15 	stw	r5,184(sp)
 8002e18:	003b5a06 	br	8001b84 <__alt_data_end+0xfc001b84>
 8002e1c:	9080100c 	andi	r2,r18,64
 8002e20:	10010726 	beq	r2,zero,8003240 <___svfprintf_internal_r+0x1b98>
 8002e24:	d8802e17 	ldw	r2,184(sp)
 8002e28:	1500000f 	ldh	r20,0(r2)
 8002e2c:	10800104 	addi	r2,r2,4
 8002e30:	d8802e15 	stw	r2,184(sp)
 8002e34:	a02dd7fa 	srai	r22,r20,31
 8002e38:	b005883a 	mov	r2,r22
 8002e3c:	003b7d06 	br	8001c34 <__alt_data_end+0xfc001c34>
 8002e40:	9080100c 	andi	r2,r18,64
 8002e44:	10010526 	beq	r2,zero,800325c <___svfprintf_internal_r+0x1bb4>
 8002e48:	d8c02e17 	ldw	r3,184(sp)
 8002e4c:	002d883a 	mov	r22,zero
 8002e50:	1d00000b 	ldhu	r20,0(r3)
 8002e54:	18c00104 	addi	r3,r3,4
 8002e58:	d8c02e15 	stw	r3,184(sp)
 8002e5c:	003ce206 	br	80021e8 <__alt_data_end+0xfc0021e8>
 8002e60:	bc400007 	ldb	r17,0(r23)
 8002e64:	003a6506 	br	80017fc <__alt_data_end+0xfc0017fc>
 8002e68:	9080040c 	andi	r2,r18,16
 8002e6c:	10010126 	beq	r2,zero,8003274 <___svfprintf_internal_r+0x1bcc>
 8002e70:	d8c02e17 	ldw	r3,184(sp)
 8002e74:	d9002f17 	ldw	r4,188(sp)
 8002e78:	18800017 	ldw	r2,0(r3)
 8002e7c:	18c00104 	addi	r3,r3,4
 8002e80:	d8c02e15 	stw	r3,184(sp)
 8002e84:	11000015 	stw	r4,0(r2)
 8002e88:	003a3206 	br	8001754 <__alt_data_end+0xfc001754>
 8002e8c:	d9002a17 	ldw	r4,168(sp)
 8002e90:	d8002785 	stb	zero,158(sp)
 8002e94:	203d8d16 	blt	r4,zero,80024cc <__alt_data_end+0xfc0024cc>
 8002e98:	00bfdfc4 	movi	r2,-129
 8002e9c:	90a4703a 	and	r18,r18,r2
 8002ea0:	003ad506 	br	80019f8 <__alt_data_end+0xfc0019f8>
 8002ea4:	01420074 	movhi	r5,2049
 8002ea8:	297b0484 	addi	r5,r5,-5102
 8002eac:	d9402c15 	stw	r5,176(sp)
 8002eb0:	d9402c17 	ldw	r5,176(sp)
 8002eb4:	1c47883a 	add	r3,r3,r17
 8002eb8:	10800044 	addi	r2,r2,1
 8002ebc:	41400015 	stw	r5,0(r8)
 8002ec0:	44400115 	stw	r17,4(r8)
 8002ec4:	d8c02015 	stw	r3,128(sp)
 8002ec8:	d8801f15 	stw	r2,124(sp)
 8002ecc:	010001c4 	movi	r4,7
 8002ed0:	20bf3016 	blt	r4,r2,8002b94 <__alt_data_end+0xfc002b94>
 8002ed4:	42000204 	addi	r8,r8,8
 8002ed8:	003f3506 	br	8002bb0 <__alt_data_end+0xfc002bb0>
 8002edc:	01020074 	movhi	r4,2049
 8002ee0:	213b0484 	addi	r4,r4,-5102
 8002ee4:	d9002c15 	stw	r4,176(sp)
 8002ee8:	003c3c06 	br	8001fdc <__alt_data_end+0xfc001fdc>
 8002eec:	d9402d17 	ldw	r5,180(sp)
 8002ef0:	d9801e04 	addi	r6,sp,120
 8002ef4:	9809883a 	mov	r4,r19
 8002ef8:	8006f840 	call	8006f84 <__ssprint_r>
 8002efc:	103ad11e 	bne	r2,zero,8001a44 <__alt_data_end+0xfc001a44>
 8002f00:	d8c02017 	ldw	r3,128(sp)
 8002f04:	da000404 	addi	r8,sp,16
 8002f08:	003d9306 	br	8002558 <__alt_data_end+0xfc002558>
 8002f0c:	d8801f17 	ldw	r2,124(sp)
 8002f10:	01420074 	movhi	r5,2049
 8002f14:	01000044 	movi	r4,1
 8002f18:	18c00044 	addi	r3,r3,1
 8002f1c:	10800044 	addi	r2,r2,1
 8002f20:	297b0404 	addi	r5,r5,-5104
 8002f24:	41000115 	stw	r4,4(r8)
 8002f28:	41400015 	stw	r5,0(r8)
 8002f2c:	d8c02015 	stw	r3,128(sp)
 8002f30:	d8801f15 	stw	r2,124(sp)
 8002f34:	010001c4 	movi	r4,7
 8002f38:	2080b516 	blt	r4,r2,8003210 <___svfprintf_internal_r+0x1b68>
 8002f3c:	42000204 	addi	r8,r8,8
 8002f40:	8800041e 	bne	r17,zero,8002f54 <___svfprintf_internal_r+0x18ac>
 8002f44:	d8803317 	ldw	r2,204(sp)
 8002f48:	1000021e 	bne	r2,zero,8002f54 <___svfprintf_internal_r+0x18ac>
 8002f4c:	9080004c 	andi	r2,r18,1
 8002f50:	103c3926 	beq	r2,zero,8002038 <__alt_data_end+0xfc002038>
 8002f54:	d9003817 	ldw	r4,224(sp)
 8002f58:	d8801f17 	ldw	r2,124(sp)
 8002f5c:	d9403417 	ldw	r5,208(sp)
 8002f60:	20c7883a 	add	r3,r4,r3
 8002f64:	10800044 	addi	r2,r2,1
 8002f68:	41000115 	stw	r4,4(r8)
 8002f6c:	41400015 	stw	r5,0(r8)
 8002f70:	d8c02015 	stw	r3,128(sp)
 8002f74:	d8801f15 	stw	r2,124(sp)
 8002f78:	010001c4 	movi	r4,7
 8002f7c:	20818016 	blt	r4,r2,8003580 <___svfprintf_internal_r+0x1ed8>
 8002f80:	42000204 	addi	r8,r8,8
 8002f84:	0463c83a 	sub	r17,zero,r17
 8002f88:	0440cb0e 	bge	zero,r17,80032b8 <___svfprintf_internal_r+0x1c10>
 8002f8c:	05800404 	movi	r22,16
 8002f90:	b440e80e 	bge	r22,r17,8003334 <___svfprintf_internal_r+0x1c8c>
 8002f94:	01420074 	movhi	r5,2049
 8002f98:	297b0484 	addi	r5,r5,-5102
 8002f9c:	d9402c15 	stw	r5,176(sp)
 8002fa0:	070001c4 	movi	fp,7
 8002fa4:	dd002d17 	ldw	r20,180(sp)
 8002fa8:	00000306 	br	8002fb8 <___svfprintf_internal_r+0x1910>
 8002fac:	42000204 	addi	r8,r8,8
 8002fb0:	8c7ffc04 	addi	r17,r17,-16
 8002fb4:	b440e20e 	bge	r22,r17,8003340 <___svfprintf_internal_r+0x1c98>
 8002fb8:	18c00404 	addi	r3,r3,16
 8002fbc:	10800044 	addi	r2,r2,1
 8002fc0:	45400015 	stw	r21,0(r8)
 8002fc4:	45800115 	stw	r22,4(r8)
 8002fc8:	d8c02015 	stw	r3,128(sp)
 8002fcc:	d8801f15 	stw	r2,124(sp)
 8002fd0:	e0bff60e 	bge	fp,r2,8002fac <__alt_data_end+0xfc002fac>
 8002fd4:	d9801e04 	addi	r6,sp,120
 8002fd8:	a00b883a 	mov	r5,r20
 8002fdc:	9809883a 	mov	r4,r19
 8002fe0:	8006f840 	call	8006f84 <__ssprint_r>
 8002fe4:	103a971e 	bne	r2,zero,8001a44 <__alt_data_end+0xfc001a44>
 8002fe8:	d8c02017 	ldw	r3,128(sp)
 8002fec:	d8801f17 	ldw	r2,124(sp)
 8002ff0:	da000404 	addi	r8,sp,16
 8002ff4:	003fee06 	br	8002fb0 <__alt_data_end+0xfc002fb0>
 8002ff8:	d9002e17 	ldw	r4,184(sp)
 8002ffc:	d9402a17 	ldw	r5,168(sp)
 8003000:	002d883a 	mov	r22,zero
 8003004:	20800104 	addi	r2,r4,4
 8003008:	25000017 	ldw	r20,0(r4)
 800300c:	283e7d0e 	bge	r5,zero,8002a04 <__alt_data_end+0xfc002a04>
 8003010:	003eda06 	br	8002b7c <__alt_data_end+0xfc002b7c>
 8003014:	d9002e17 	ldw	r4,184(sp)
 8003018:	d9402a17 	ldw	r5,168(sp)
 800301c:	002d883a 	mov	r22,zero
 8003020:	20800104 	addi	r2,r4,4
 8003024:	25000017 	ldw	r20,0(r4)
 8003028:	283e2d0e 	bge	r5,zero,80028e0 <__alt_data_end+0xfc0028e0>
 800302c:	003f6b06 	br	8002ddc <__alt_data_end+0xfc002ddc>
 8003030:	d8c02e15 	stw	r3,184(sp)
 8003034:	0039883a 	mov	fp,zero
 8003038:	003ed206 	br	8002b84 <__alt_data_end+0xfc002b84>
 800303c:	bc400043 	ldbu	r17,1(r23)
 8003040:	84000814 	ori	r16,r16,32
 8003044:	bdc00044 	addi	r23,r23,1
 8003048:	8c403fcc 	andi	r17,r17,255
 800304c:	8c40201c 	xori	r17,r17,128
 8003050:	8c7fe004 	addi	r17,r17,-128
 8003054:	0039e906 	br	80017fc <__alt_data_end+0xfc0017fc>
 8003058:	d9402d17 	ldw	r5,180(sp)
 800305c:	d9801e04 	addi	r6,sp,120
 8003060:	9809883a 	mov	r4,r19
 8003064:	8006f840 	call	8006f84 <__ssprint_r>
 8003068:	103a761e 	bne	r2,zero,8001a44 <__alt_data_end+0xfc001a44>
 800306c:	d8c02017 	ldw	r3,128(sp)
 8003070:	da000404 	addi	r8,sp,16
 8003074:	003d4a06 	br	80025a0 <__alt_data_end+0xfc0025a0>
 8003078:	d9002a17 	ldw	r4,168(sp)
 800307c:	05bff7c4 	movi	r22,-33
 8003080:	00bfffc4 	movi	r2,-1
 8003084:	8dac703a 	and	r22,r17,r22
 8003088:	20806a26 	beq	r4,r2,8003234 <___svfprintf_internal_r+0x1b8c>
 800308c:	008011c4 	movi	r2,71
 8003090:	b0813726 	beq	r22,r2,8003570 <___svfprintf_internal_r+0x1ec8>
 8003094:	d9003717 	ldw	r4,220(sp)
 8003098:	90c04014 	ori	r3,r18,256
 800309c:	d8c02c15 	stw	r3,176(sp)
 80030a0:	20015d16 	blt	r4,zero,8003618 <___svfprintf_internal_r+0x1f70>
 80030a4:	dd003717 	ldw	r20,220(sp)
 80030a8:	d8002905 	stb	zero,164(sp)
 80030ac:	00801984 	movi	r2,102
 80030b0:	88814026 	beq	r17,r2,80035b4 <___svfprintf_internal_r+0x1f0c>
 80030b4:	00801184 	movi	r2,70
 80030b8:	88817126 	beq	r17,r2,8003680 <___svfprintf_internal_r+0x1fd8>
 80030bc:	00801144 	movi	r2,69
 80030c0:	b0816226 	beq	r22,r2,800364c <___svfprintf_internal_r+0x1fa4>
 80030c4:	d8c02a17 	ldw	r3,168(sp)
 80030c8:	d8802104 	addi	r2,sp,132
 80030cc:	d8800315 	stw	r2,12(sp)
 80030d0:	d9403617 	ldw	r5,216(sp)
 80030d4:	d8802504 	addi	r2,sp,148
 80030d8:	d8800215 	stw	r2,8(sp)
 80030dc:	d8802604 	addi	r2,sp,152
 80030e0:	d8c00015 	stw	r3,0(sp)
 80030e4:	d8800115 	stw	r2,4(sp)
 80030e8:	01c00084 	movi	r7,2
 80030ec:	a00d883a 	mov	r6,r20
 80030f0:	9809883a 	mov	r4,r19
 80030f4:	d8c03d15 	stw	r3,244(sp)
 80030f8:	da003e15 	stw	r8,248(sp)
 80030fc:	8003b8c0 	call	8003b8c <_dtoa_r>
 8003100:	1021883a 	mov	r16,r2
 8003104:	008019c4 	movi	r2,103
 8003108:	d8c03d17 	ldw	r3,244(sp)
 800310c:	da003e17 	ldw	r8,248(sp)
 8003110:	8880e726 	beq	r17,r2,80034b0 <___svfprintf_internal_r+0x1e08>
 8003114:	008011c4 	movi	r2,71
 8003118:	8880d426 	beq	r17,r2,800346c <___svfprintf_internal_r+0x1dc4>
 800311c:	80f9883a 	add	fp,r16,r3
 8003120:	d9003617 	ldw	r4,216(sp)
 8003124:	000d883a 	mov	r6,zero
 8003128:	000f883a 	mov	r7,zero
 800312c:	a00b883a 	mov	r5,r20
 8003130:	da003e15 	stw	r8,248(sp)
 8003134:	800b1340 	call	800b134 <__eqdf2>
 8003138:	da003e17 	ldw	r8,248(sp)
 800313c:	1000e426 	beq	r2,zero,80034d0 <___svfprintf_internal_r+0x1e28>
 8003140:	d8802117 	ldw	r2,132(sp)
 8003144:	1700062e 	bgeu	r2,fp,8003160 <___svfprintf_internal_r+0x1ab8>
 8003148:	01000c04 	movi	r4,48
 800314c:	10c00044 	addi	r3,r2,1
 8003150:	d8c02115 	stw	r3,132(sp)
 8003154:	11000005 	stb	r4,0(r2)
 8003158:	d8802117 	ldw	r2,132(sp)
 800315c:	173ffb36 	bltu	r2,fp,800314c <__alt_data_end+0xfc00314c>
 8003160:	1405c83a 	sub	r2,r2,r16
 8003164:	d8803315 	stw	r2,204(sp)
 8003168:	008011c4 	movi	r2,71
 800316c:	b080c526 	beq	r22,r2,8003484 <___svfprintf_internal_r+0x1ddc>
 8003170:	00801944 	movi	r2,101
 8003174:	1441d80e 	bge	r2,r17,80038d8 <___svfprintf_internal_r+0x2230>
 8003178:	d8c02617 	ldw	r3,152(sp)
 800317c:	00801984 	movi	r2,102
 8003180:	d8c03215 	stw	r3,200(sp)
 8003184:	88813426 	beq	r17,r2,8003658 <___svfprintf_internal_r+0x1fb0>
 8003188:	d8c03217 	ldw	r3,200(sp)
 800318c:	d9003317 	ldw	r4,204(sp)
 8003190:	19012516 	blt	r3,r4,8003628 <___svfprintf_internal_r+0x1f80>
 8003194:	9480004c 	andi	r18,r18,1
 8003198:	9001841e 	bne	r18,zero,80037ac <___svfprintf_internal_r+0x2104>
 800319c:	1805883a 	mov	r2,r3
 80031a0:	1801cb16 	blt	r3,zero,80038d0 <___svfprintf_internal_r+0x2228>
 80031a4:	d8c03217 	ldw	r3,200(sp)
 80031a8:	044019c4 	movi	r17,103
 80031ac:	d8c02b15 	stw	r3,172(sp)
 80031b0:	df002907 	ldb	fp,164(sp)
 80031b4:	e000a61e 	bne	fp,zero,8003450 <___svfprintf_internal_r+0x1da8>
 80031b8:	df002783 	ldbu	fp,158(sp)
 80031bc:	d8802915 	stw	r2,164(sp)
 80031c0:	dc802c17 	ldw	r18,176(sp)
 80031c4:	d8002a15 	stw	zero,168(sp)
 80031c8:	003af506 	br	8001da0 <__alt_data_end+0xfc001da0>
 80031cc:	04020074 	movhi	r16,2049
 80031d0:	843af404 	addi	r16,r16,-5168
 80031d4:	003a7e06 	br	8001bd0 <__alt_data_end+0xfc001bd0>
 80031d8:	d9003917 	ldw	r4,228(sp)
 80031dc:	04001004 	movi	r16,64
 80031e0:	800b883a 	mov	r5,r16
 80031e4:	80052f00 	call	80052f0 <_malloc_r>
 80031e8:	d9002d17 	ldw	r4,180(sp)
 80031ec:	20800015 	stw	r2,0(r4)
 80031f0:	20800415 	stw	r2,16(r4)
 80031f4:	1001d026 	beq	r2,zero,8003938 <___svfprintf_internal_r+0x2290>
 80031f8:	d8802d17 	ldw	r2,180(sp)
 80031fc:	14000515 	stw	r16,20(r2)
 8003200:	00394406 	br	8001714 <__alt_data_end+0xfc001714>
 8003204:	04020074 	movhi	r16,2049
 8003208:	843af604 	addi	r16,r16,-5160
 800320c:	003ee106 	br	8002d94 <__alt_data_end+0xfc002d94>
 8003210:	d9402d17 	ldw	r5,180(sp)
 8003214:	d9801e04 	addi	r6,sp,120
 8003218:	9809883a 	mov	r4,r19
 800321c:	8006f840 	call	8006f84 <__ssprint_r>
 8003220:	103a081e 	bne	r2,zero,8001a44 <__alt_data_end+0xfc001a44>
 8003224:	dc402617 	ldw	r17,152(sp)
 8003228:	d8c02017 	ldw	r3,128(sp)
 800322c:	da000404 	addi	r8,sp,16
 8003230:	003f4306 	br	8002f40 <__alt_data_end+0xfc002f40>
 8003234:	01400184 	movi	r5,6
 8003238:	d9402a15 	stw	r5,168(sp)
 800323c:	003f9506 	br	8003094 <__alt_data_end+0xfc003094>
 8003240:	d8c02e17 	ldw	r3,184(sp)
 8003244:	1d000017 	ldw	r20,0(r3)
 8003248:	18c00104 	addi	r3,r3,4
 800324c:	d8c02e15 	stw	r3,184(sp)
 8003250:	a02dd7fa 	srai	r22,r20,31
 8003254:	b005883a 	mov	r2,r22
 8003258:	003a7606 	br	8001c34 <__alt_data_end+0xfc001c34>
 800325c:	d9002e17 	ldw	r4,184(sp)
 8003260:	002d883a 	mov	r22,zero
 8003264:	25000017 	ldw	r20,0(r4)
 8003268:	21000104 	addi	r4,r4,4
 800326c:	d9002e15 	stw	r4,184(sp)
 8003270:	003bdd06 	br	80021e8 <__alt_data_end+0xfc0021e8>
 8003274:	9480100c 	andi	r18,r18,64
 8003278:	90006e26 	beq	r18,zero,8003434 <___svfprintf_internal_r+0x1d8c>
 800327c:	d9402e17 	ldw	r5,184(sp)
 8003280:	d8c02f17 	ldw	r3,188(sp)
 8003284:	28800017 	ldw	r2,0(r5)
 8003288:	29400104 	addi	r5,r5,4
 800328c:	d9402e15 	stw	r5,184(sp)
 8003290:	10c0000d 	sth	r3,0(r2)
 8003294:	00392f06 	br	8001754 <__alt_data_end+0xfc001754>
 8003298:	d9402d17 	ldw	r5,180(sp)
 800329c:	d9801e04 	addi	r6,sp,120
 80032a0:	9809883a 	mov	r4,r19
 80032a4:	8006f840 	call	8006f84 <__ssprint_r>
 80032a8:	1039e61e 	bne	r2,zero,8001a44 <__alt_data_end+0xfc001a44>
 80032ac:	d8c02017 	ldw	r3,128(sp)
 80032b0:	d8801f17 	ldw	r2,124(sp)
 80032b4:	da000404 	addi	r8,sp,16
 80032b8:	d9403317 	ldw	r5,204(sp)
 80032bc:	10800044 	addi	r2,r2,1
 80032c0:	44000015 	stw	r16,0(r8)
 80032c4:	28c7883a 	add	r3,r5,r3
 80032c8:	003b5506 	br	8002020 <__alt_data_end+0xfc002020>
 80032cc:	8009883a 	mov	r4,r16
 80032d0:	df003e15 	stw	fp,248(sp)
 80032d4:	80016100 	call	8001610 <strlen>
 80032d8:	d8802b15 	stw	r2,172(sp)
 80032dc:	da003e17 	ldw	r8,248(sp)
 80032e0:	103c160e 	bge	r2,zero,800233c <__alt_data_end+0xfc00233c>
 80032e4:	0005883a 	mov	r2,zero
 80032e8:	003c1406 	br	800233c <__alt_data_end+0xfc00233c>
 80032ec:	00bfffc4 	movi	r2,-1
 80032f0:	0039d906 	br	8001a58 <__alt_data_end+0xfc001a58>
 80032f4:	01020074 	movhi	r4,2049
 80032f8:	213b0884 	addi	r4,r4,-5086
 80032fc:	d9003515 	stw	r4,212(sp)
 8003300:	003ae406 	br	8001e94 <__alt_data_end+0xfc001e94>
 8003304:	013fffc4 	movi	r4,-1
 8003308:	0039fa06 	br	8001af4 <__alt_data_end+0xfc001af4>
 800330c:	d9402d17 	ldw	r5,180(sp)
 8003310:	d9801e04 	addi	r6,sp,120
 8003314:	9809883a 	mov	r4,r19
 8003318:	8006f840 	call	8006f84 <__ssprint_r>
 800331c:	1039c91e 	bne	r2,zero,8001a44 <__alt_data_end+0xfc001a44>
 8003320:	d8c02017 	ldw	r3,128(sp)
 8003324:	da000404 	addi	r8,sp,16
 8003328:	003d8406 	br	800293c <__alt_data_end+0xfc00293c>
 800332c:	0023883a 	mov	r17,zero
 8003330:	003d8306 	br	8002940 <__alt_data_end+0xfc002940>
 8003334:	01020074 	movhi	r4,2049
 8003338:	213b0484 	addi	r4,r4,-5102
 800333c:	d9002c15 	stw	r4,176(sp)
 8003340:	d9002c17 	ldw	r4,176(sp)
 8003344:	1c47883a 	add	r3,r3,r17
 8003348:	10800044 	addi	r2,r2,1
 800334c:	41000015 	stw	r4,0(r8)
 8003350:	44400115 	stw	r17,4(r8)
 8003354:	d8c02015 	stw	r3,128(sp)
 8003358:	d8801f15 	stw	r2,124(sp)
 800335c:	010001c4 	movi	r4,7
 8003360:	20bfcd16 	blt	r4,r2,8003298 <__alt_data_end+0xfc003298>
 8003364:	42000204 	addi	r8,r8,8
 8003368:	003fd306 	br	80032b8 <__alt_data_end+0xfc0032b8>
 800336c:	d9402d17 	ldw	r5,180(sp)
 8003370:	d9801e04 	addi	r6,sp,120
 8003374:	9809883a 	mov	r4,r19
 8003378:	8006f840 	call	8006f84 <__ssprint_r>
 800337c:	1039b11e 	bne	r2,zero,8001a44 <__alt_data_end+0xfc001a44>
 8003380:	d8802617 	ldw	r2,152(sp)
 8003384:	d8c02017 	ldw	r3,128(sp)
 8003388:	da000404 	addi	r8,sp,16
 800338c:	003e1c06 	br	8002c00 <__alt_data_end+0xfc002c00>
 8003390:	d8802a17 	ldw	r2,168(sp)
 8003394:	00c00184 	movi	r3,6
 8003398:	1880012e 	bgeu	r3,r2,80033a0 <___svfprintf_internal_r+0x1cf8>
 800339c:	1805883a 	mov	r2,r3
 80033a0:	d8802b15 	stw	r2,172(sp)
 80033a4:	1000f316 	blt	r2,zero,8003774 <___svfprintf_internal_r+0x20cc>
 80033a8:	04020074 	movhi	r16,2049
 80033ac:	d8802915 	stw	r2,164(sp)
 80033b0:	dd002e15 	stw	r20,184(sp)
 80033b4:	d8002a15 	stw	zero,168(sp)
 80033b8:	d8003215 	stw	zero,200(sp)
 80033bc:	843b0204 	addi	r16,r16,-5112
 80033c0:	0039883a 	mov	fp,zero
 80033c4:	003a7d06 	br	8001dbc <__alt_data_end+0xfc001dbc>
 80033c8:	01020074 	movhi	r4,2049
 80033cc:	213b0884 	addi	r4,r4,-5086
 80033d0:	d9003515 	stw	r4,212(sp)
 80033d4:	003b3d06 	br	80020cc <__alt_data_end+0xfc0020cc>
 80033d8:	d9402d17 	ldw	r5,180(sp)
 80033dc:	d9801e04 	addi	r6,sp,120
 80033e0:	9809883a 	mov	r4,r19
 80033e4:	8006f840 	call	8006f84 <__ssprint_r>
 80033e8:	1039961e 	bne	r2,zero,8001a44 <__alt_data_end+0xfc001a44>
 80033ec:	d8802617 	ldw	r2,152(sp)
 80033f0:	d9403317 	ldw	r5,204(sp)
 80033f4:	d8c02017 	ldw	r3,128(sp)
 80033f8:	da000404 	addi	r8,sp,16
 80033fc:	2885c83a 	sub	r2,r5,r2
 8003400:	003e1006 	br	8002c44 <__alt_data_end+0xfc002c44>
 8003404:	00800044 	movi	r2,1
 8003408:	10803fcc 	andi	r2,r2,255
 800340c:	00c00044 	movi	r3,1
 8003410:	10fa1026 	beq	r2,r3,8001c54 <__alt_data_end+0xfc001c54>
 8003414:	00c00084 	movi	r3,2
 8003418:	10fb8226 	beq	r2,r3,8002224 <__alt_data_end+0xfc002224>
 800341c:	003a4206 	br	8001d28 <__alt_data_end+0xfc001d28>
 8003420:	0021883a 	mov	r16,zero
 8003424:	003e0806 	br	8002c48 <__alt_data_end+0xfc002c48>
 8003428:	07000b44 	movi	fp,45
 800342c:	df002785 	stb	fp,158(sp)
 8003430:	0039e306 	br	8001bc0 <__alt_data_end+0xfc001bc0>
 8003434:	d9002e17 	ldw	r4,184(sp)
 8003438:	d9402f17 	ldw	r5,188(sp)
 800343c:	20800017 	ldw	r2,0(r4)
 8003440:	21000104 	addi	r4,r4,4
 8003444:	d9002e15 	stw	r4,184(sp)
 8003448:	11400015 	stw	r5,0(r2)
 800344c:	0038c106 	br	8001754 <__alt_data_end+0xfc001754>
 8003450:	00c00b44 	movi	r3,45
 8003454:	d8c02785 	stb	r3,158(sp)
 8003458:	d8802915 	stw	r2,164(sp)
 800345c:	dc802c17 	ldw	r18,176(sp)
 8003460:	d8002a15 	stw	zero,168(sp)
 8003464:	07000b44 	movi	fp,45
 8003468:	003a5106 	br	8001db0 <__alt_data_end+0xfc001db0>
 800346c:	9080004c 	andi	r2,r18,1
 8003470:	1000941e 	bne	r2,zero,80036c4 <___svfprintf_internal_r+0x201c>
 8003474:	d8802117 	ldw	r2,132(sp)
 8003478:	1405c83a 	sub	r2,r2,r16
 800347c:	d8803315 	stw	r2,204(sp)
 8003480:	b441151e 	bne	r22,r17,80038d8 <___svfprintf_internal_r+0x2230>
 8003484:	dd802617 	ldw	r22,152(sp)
 8003488:	00bfff44 	movi	r2,-3
 800348c:	b0801a16 	blt	r22,r2,80034f8 <___svfprintf_internal_r+0x1e50>
 8003490:	d9402a17 	ldw	r5,168(sp)
 8003494:	2d801816 	blt	r5,r22,80034f8 <___svfprintf_internal_r+0x1e50>
 8003498:	dd803215 	stw	r22,200(sp)
 800349c:	003f3a06 	br	8003188 <__alt_data_end+0xfc003188>
 80034a0:	1025883a 	mov	r18,r2
 80034a4:	0039883a 	mov	fp,zero
 80034a8:	00800084 	movi	r2,2
 80034ac:	003fd606 	br	8003408 <__alt_data_end+0xfc003408>
 80034b0:	9080004c 	andi	r2,r18,1
 80034b4:	103f191e 	bne	r2,zero,800311c <__alt_data_end+0xfc00311c>
 80034b8:	d8802117 	ldw	r2,132(sp)
 80034bc:	003f2806 	br	8003160 <__alt_data_end+0xfc003160>
 80034c0:	01020074 	movhi	r4,2049
 80034c4:	213b0484 	addi	r4,r4,-5102
 80034c8:	d9002c15 	stw	r4,176(sp)
 80034cc:	003c7c06 	br	80026c0 <__alt_data_end+0xfc0026c0>
 80034d0:	e005883a 	mov	r2,fp
 80034d4:	003f2206 	br	8003160 <__alt_data_end+0xfc003160>
 80034d8:	d9002a17 	ldw	r4,168(sp)
 80034dc:	df002783 	ldbu	fp,158(sp)
 80034e0:	dd002e15 	stw	r20,184(sp)
 80034e4:	d9002915 	stw	r4,164(sp)
 80034e8:	d9002b15 	stw	r4,172(sp)
 80034ec:	d8002a15 	stw	zero,168(sp)
 80034f0:	d8003215 	stw	zero,200(sp)
 80034f4:	003a2a06 	br	8001da0 <__alt_data_end+0xfc001da0>
 80034f8:	8c7fff84 	addi	r17,r17,-2
 80034fc:	b5bfffc4 	addi	r22,r22,-1
 8003500:	dd802615 	stw	r22,152(sp)
 8003504:	dc4022c5 	stb	r17,139(sp)
 8003508:	b000c316 	blt	r22,zero,8003818 <___svfprintf_internal_r+0x2170>
 800350c:	00800ac4 	movi	r2,43
 8003510:	d8802305 	stb	r2,140(sp)
 8003514:	00800244 	movi	r2,9
 8003518:	15806e16 	blt	r2,r22,80036d4 <___svfprintf_internal_r+0x202c>
 800351c:	00800c04 	movi	r2,48
 8003520:	b5800c04 	addi	r22,r22,48
 8003524:	d8802345 	stb	r2,141(sp)
 8003528:	dd802385 	stb	r22,142(sp)
 800352c:	d88023c4 	addi	r2,sp,143
 8003530:	df0022c4 	addi	fp,sp,139
 8003534:	d8c03317 	ldw	r3,204(sp)
 8003538:	1739c83a 	sub	fp,r2,fp
 800353c:	d9003317 	ldw	r4,204(sp)
 8003540:	e0c7883a 	add	r3,fp,r3
 8003544:	df003b15 	stw	fp,236(sp)
 8003548:	d8c02b15 	stw	r3,172(sp)
 800354c:	00800044 	movi	r2,1
 8003550:	1100b70e 	bge	r2,r4,8003830 <___svfprintf_internal_r+0x2188>
 8003554:	d8c02b17 	ldw	r3,172(sp)
 8003558:	18c00044 	addi	r3,r3,1
 800355c:	d8c02b15 	stw	r3,172(sp)
 8003560:	1805883a 	mov	r2,r3
 8003564:	1800b016 	blt	r3,zero,8003828 <___svfprintf_internal_r+0x2180>
 8003568:	d8003215 	stw	zero,200(sp)
 800356c:	003f1006 	br	80031b0 <__alt_data_end+0xfc0031b0>
 8003570:	d8802a17 	ldw	r2,168(sp)
 8003574:	103ec71e 	bne	r2,zero,8003094 <__alt_data_end+0xfc003094>
 8003578:	dc002a15 	stw	r16,168(sp)
 800357c:	003ec506 	br	8003094 <__alt_data_end+0xfc003094>
 8003580:	d9402d17 	ldw	r5,180(sp)
 8003584:	d9801e04 	addi	r6,sp,120
 8003588:	9809883a 	mov	r4,r19
 800358c:	8006f840 	call	8006f84 <__ssprint_r>
 8003590:	10392c1e 	bne	r2,zero,8001a44 <__alt_data_end+0xfc001a44>
 8003594:	dc402617 	ldw	r17,152(sp)
 8003598:	d8c02017 	ldw	r3,128(sp)
 800359c:	d8801f17 	ldw	r2,124(sp)
 80035a0:	da000404 	addi	r8,sp,16
 80035a4:	003e7706 	br	8002f84 <__alt_data_end+0xfc002f84>
 80035a8:	182f883a 	mov	r23,r3
 80035ac:	d8002a15 	stw	zero,168(sp)
 80035b0:	00389306 	br	8001800 <__alt_data_end+0xfc001800>
 80035b4:	d8c02a17 	ldw	r3,168(sp)
 80035b8:	d8802104 	addi	r2,sp,132
 80035bc:	d8800315 	stw	r2,12(sp)
 80035c0:	d9403617 	ldw	r5,216(sp)
 80035c4:	d8802504 	addi	r2,sp,148
 80035c8:	d8800215 	stw	r2,8(sp)
 80035cc:	d8802604 	addi	r2,sp,152
 80035d0:	d8c00015 	stw	r3,0(sp)
 80035d4:	9809883a 	mov	r4,r19
 80035d8:	d8800115 	stw	r2,4(sp)
 80035dc:	01c000c4 	movi	r7,3
 80035e0:	a00d883a 	mov	r6,r20
 80035e4:	da003e15 	stw	r8,248(sp)
 80035e8:	8003b8c0 	call	8003b8c <_dtoa_r>
 80035ec:	d9002a17 	ldw	r4,168(sp)
 80035f0:	da003e17 	ldw	r8,248(sp)
 80035f4:	1021883a 	mov	r16,r2
 80035f8:	1139883a 	add	fp,r2,r4
 80035fc:	2007883a 	mov	r3,r4
 8003600:	81000007 	ldb	r4,0(r16)
 8003604:	00800c04 	movi	r2,48
 8003608:	20806f26 	beq	r4,r2,80037c8 <___svfprintf_internal_r+0x2120>
 800360c:	d8c02617 	ldw	r3,152(sp)
 8003610:	e0f9883a 	add	fp,fp,r3
 8003614:	003ec206 	br	8003120 <__alt_data_end+0xfc003120>
 8003618:	00c00b44 	movi	r3,45
 800361c:	2520003c 	xorhi	r20,r4,32768
 8003620:	d8c02905 	stb	r3,164(sp)
 8003624:	003ea106 	br	80030ac <__alt_data_end+0xfc0030ac>
 8003628:	d8c03217 	ldw	r3,200(sp)
 800362c:	00c0890e 	bge	zero,r3,8003854 <___svfprintf_internal_r+0x21ac>
 8003630:	00800044 	movi	r2,1
 8003634:	d9003317 	ldw	r4,204(sp)
 8003638:	1105883a 	add	r2,r2,r4
 800363c:	d8802b15 	stw	r2,172(sp)
 8003640:	10005f16 	blt	r2,zero,80037c0 <___svfprintf_internal_r+0x2118>
 8003644:	044019c4 	movi	r17,103
 8003648:	003ed906 	br	80031b0 <__alt_data_end+0xfc0031b0>
 800364c:	d9002a17 	ldw	r4,168(sp)
 8003650:	20c00044 	addi	r3,r4,1
 8003654:	003e9c06 	br	80030c8 <__alt_data_end+0xfc0030c8>
 8003658:	d9002a17 	ldw	r4,168(sp)
 800365c:	00c0680e 	bge	zero,r3,8003800 <___svfprintf_internal_r+0x2158>
 8003660:	2000461e 	bne	r4,zero,800377c <___svfprintf_internal_r+0x20d4>
 8003664:	9480004c 	andi	r18,r18,1
 8003668:	9000441e 	bne	r18,zero,800377c <___svfprintf_internal_r+0x20d4>
 800366c:	1805883a 	mov	r2,r3
 8003670:	1800a116 	blt	r3,zero,80038f8 <___svfprintf_internal_r+0x2250>
 8003674:	d8c03217 	ldw	r3,200(sp)
 8003678:	d8c02b15 	stw	r3,172(sp)
 800367c:	003ecc06 	br	80031b0 <__alt_data_end+0xfc0031b0>
 8003680:	d9402a17 	ldw	r5,168(sp)
 8003684:	d8802104 	addi	r2,sp,132
 8003688:	d8800315 	stw	r2,12(sp)
 800368c:	d9400015 	stw	r5,0(sp)
 8003690:	d8802504 	addi	r2,sp,148
 8003694:	d9403617 	ldw	r5,216(sp)
 8003698:	d8800215 	stw	r2,8(sp)
 800369c:	d8802604 	addi	r2,sp,152
 80036a0:	d8800115 	stw	r2,4(sp)
 80036a4:	01c000c4 	movi	r7,3
 80036a8:	a00d883a 	mov	r6,r20
 80036ac:	9809883a 	mov	r4,r19
 80036b0:	da003e15 	stw	r8,248(sp)
 80036b4:	8003b8c0 	call	8003b8c <_dtoa_r>
 80036b8:	d8c02a17 	ldw	r3,168(sp)
 80036bc:	da003e17 	ldw	r8,248(sp)
 80036c0:	1021883a 	mov	r16,r2
 80036c4:	00801184 	movi	r2,70
 80036c8:	80f9883a 	add	fp,r16,r3
 80036cc:	88bfcc26 	beq	r17,r2,8003600 <__alt_data_end+0xfc003600>
 80036d0:	003e9306 	br	8003120 <__alt_data_end+0xfc003120>
 80036d4:	df0022c4 	addi	fp,sp,139
 80036d8:	dc002a15 	stw	r16,168(sp)
 80036dc:	9829883a 	mov	r20,r19
 80036e0:	e021883a 	mov	r16,fp
 80036e4:	4027883a 	mov	r19,r8
 80036e8:	b009883a 	mov	r4,r22
 80036ec:	01400284 	movi	r5,10
 80036f0:	80013780 	call	8001378 <__modsi3>
 80036f4:	10800c04 	addi	r2,r2,48
 80036f8:	843fffc4 	addi	r16,r16,-1
 80036fc:	b009883a 	mov	r4,r22
 8003700:	01400284 	movi	r5,10
 8003704:	80800005 	stb	r2,0(r16)
 8003708:	80012f40 	call	80012f4 <__divsi3>
 800370c:	102d883a 	mov	r22,r2
 8003710:	00800244 	movi	r2,9
 8003714:	15bff416 	blt	r2,r22,80036e8 <__alt_data_end+0xfc0036e8>
 8003718:	9811883a 	mov	r8,r19
 800371c:	b0800c04 	addi	r2,r22,48
 8003720:	a027883a 	mov	r19,r20
 8003724:	8029883a 	mov	r20,r16
 8003728:	a17fffc4 	addi	r5,r20,-1
 800372c:	a0bfffc5 	stb	r2,-1(r20)
 8003730:	dc002a17 	ldw	r16,168(sp)
 8003734:	2f00782e 	bgeu	r5,fp,8003918 <___svfprintf_internal_r+0x2270>
 8003738:	d9c02384 	addi	r7,sp,142
 800373c:	3d0fc83a 	sub	r7,r7,r20
 8003740:	d9002344 	addi	r4,sp,141
 8003744:	e1cf883a 	add	r7,fp,r7
 8003748:	00000106 	br	8003750 <___svfprintf_internal_r+0x20a8>
 800374c:	28800003 	ldbu	r2,0(r5)
 8003750:	20800005 	stb	r2,0(r4)
 8003754:	21000044 	addi	r4,r4,1
 8003758:	29400044 	addi	r5,r5,1
 800375c:	21fffb1e 	bne	r4,r7,800374c <__alt_data_end+0xfc00374c>
 8003760:	d8802304 	addi	r2,sp,140
 8003764:	1505c83a 	sub	r2,r2,r20
 8003768:	d8c02344 	addi	r3,sp,141
 800376c:	1885883a 	add	r2,r3,r2
 8003770:	003f7006 	br	8003534 <__alt_data_end+0xfc003534>
 8003774:	0005883a 	mov	r2,zero
 8003778:	003f0b06 	br	80033a8 <__alt_data_end+0xfc0033a8>
 800377c:	d9002a17 	ldw	r4,168(sp)
 8003780:	d8c03217 	ldw	r3,200(sp)
 8003784:	20800044 	addi	r2,r4,1
 8003788:	1885883a 	add	r2,r3,r2
 800378c:	d8802b15 	stw	r2,172(sp)
 8003790:	103e870e 	bge	r2,zero,80031b0 <__alt_data_end+0xfc0031b0>
 8003794:	0005883a 	mov	r2,zero
 8003798:	003e8506 	br	80031b0 <__alt_data_end+0xfc0031b0>
 800379c:	01020074 	movhi	r4,2049
 80037a0:	213b0484 	addi	r4,r4,-5102
 80037a4:	d9002c15 	stw	r4,176(sp)
 80037a8:	003cc506 	br	8002ac0 <__alt_data_end+0xfc002ac0>
 80037ac:	d8c03217 	ldw	r3,200(sp)
 80037b0:	18c00044 	addi	r3,r3,1
 80037b4:	d8c02b15 	stw	r3,172(sp)
 80037b8:	1805883a 	mov	r2,r3
 80037bc:	183fa10e 	bge	r3,zero,8003644 <__alt_data_end+0xfc003644>
 80037c0:	0005883a 	mov	r2,zero
 80037c4:	003f9f06 	br	8003644 <__alt_data_end+0xfc003644>
 80037c8:	d9003617 	ldw	r4,216(sp)
 80037cc:	000d883a 	mov	r6,zero
 80037d0:	000f883a 	mov	r7,zero
 80037d4:	a00b883a 	mov	r5,r20
 80037d8:	d8c03d15 	stw	r3,244(sp)
 80037dc:	da003e15 	stw	r8,248(sp)
 80037e0:	800b1340 	call	800b134 <__eqdf2>
 80037e4:	d8c03d17 	ldw	r3,244(sp)
 80037e8:	da003e17 	ldw	r8,248(sp)
 80037ec:	103f8726 	beq	r2,zero,800360c <__alt_data_end+0xfc00360c>
 80037f0:	00800044 	movi	r2,1
 80037f4:	10c7c83a 	sub	r3,r2,r3
 80037f8:	d8c02615 	stw	r3,152(sp)
 80037fc:	003f8406 	br	8003610 <__alt_data_end+0xfc003610>
 8003800:	20000e1e 	bne	r4,zero,800383c <___svfprintf_internal_r+0x2194>
 8003804:	9480004c 	andi	r18,r18,1
 8003808:	90000c1e 	bne	r18,zero,800383c <___svfprintf_internal_r+0x2194>
 800380c:	00800044 	movi	r2,1
 8003810:	d8802b15 	stw	r2,172(sp)
 8003814:	003e6606 	br	80031b0 <__alt_data_end+0xfc0031b0>
 8003818:	00800b44 	movi	r2,45
 800381c:	05adc83a 	sub	r22,zero,r22
 8003820:	d8802305 	stb	r2,140(sp)
 8003824:	003f3b06 	br	8003514 <__alt_data_end+0xfc003514>
 8003828:	0005883a 	mov	r2,zero
 800382c:	003f4e06 	br	8003568 <__alt_data_end+0xfc003568>
 8003830:	90a4703a 	and	r18,r18,r2
 8003834:	903f4a26 	beq	r18,zero,8003560 <__alt_data_end+0xfc003560>
 8003838:	003f4606 	br	8003554 <__alt_data_end+0xfc003554>
 800383c:	d8c02a17 	ldw	r3,168(sp)
 8003840:	18c00084 	addi	r3,r3,2
 8003844:	d8c02b15 	stw	r3,172(sp)
 8003848:	1805883a 	mov	r2,r3
 800384c:	183e580e 	bge	r3,zero,80031b0 <__alt_data_end+0xfc0031b0>
 8003850:	003fd006 	br	8003794 <__alt_data_end+0xfc003794>
 8003854:	00800084 	movi	r2,2
 8003858:	10c5c83a 	sub	r2,r2,r3
 800385c:	003f7506 	br	8003634 <__alt_data_end+0xfc003634>
 8003860:	d9402e17 	ldw	r5,184(sp)
 8003864:	d9002e17 	ldw	r4,184(sp)
 8003868:	bc400043 	ldbu	r17,1(r23)
 800386c:	29400017 	ldw	r5,0(r5)
 8003870:	20800104 	addi	r2,r4,4
 8003874:	d8802e15 	stw	r2,184(sp)
 8003878:	d9402a15 	stw	r5,168(sp)
 800387c:	182f883a 	mov	r23,r3
 8003880:	283df10e 	bge	r5,zero,8003048 <__alt_data_end+0xfc003048>
 8003884:	8c403fcc 	andi	r17,r17,255
 8003888:	017fffc4 	movi	r5,-1
 800388c:	8c40201c 	xori	r17,r17,128
 8003890:	d9402a15 	stw	r5,168(sp)
 8003894:	8c7fe004 	addi	r17,r17,-128
 8003898:	0037d806 	br	80017fc <__alt_data_end+0xfc0017fc>
 800389c:	9080004c 	andi	r2,r18,1
 80038a0:	0039883a 	mov	fp,zero
 80038a4:	10000726 	beq	r2,zero,80038c4 <___svfprintf_internal_r+0x221c>
 80038a8:	d8c02817 	ldw	r3,160(sp)
 80038ac:	dc001dc4 	addi	r16,sp,119
 80038b0:	00800c04 	movi	r2,48
 80038b4:	1c07c83a 	sub	r3,r3,r16
 80038b8:	d8801dc5 	stb	r2,119(sp)
 80038bc:	d8c02b15 	stw	r3,172(sp)
 80038c0:	00393106 	br	8001d88 <__alt_data_end+0xfc001d88>
 80038c4:	d8002b15 	stw	zero,172(sp)
 80038c8:	dc001e04 	addi	r16,sp,120
 80038cc:	00392e06 	br	8001d88 <__alt_data_end+0xfc001d88>
 80038d0:	0005883a 	mov	r2,zero
 80038d4:	003e3306 	br	80031a4 <__alt_data_end+0xfc0031a4>
 80038d8:	dd802617 	ldw	r22,152(sp)
 80038dc:	003f0706 	br	80034fc <__alt_data_end+0xfc0034fc>
 80038e0:	d8c02b03 	ldbu	r3,172(sp)
 80038e4:	d8c02785 	stb	r3,158(sp)
 80038e8:	003a3506 	br	80021c0 <__alt_data_end+0xfc0021c0>
 80038ec:	d8c02b03 	ldbu	r3,172(sp)
 80038f0:	d8c02785 	stb	r3,158(sp)
 80038f4:	003a1706 	br	8002154 <__alt_data_end+0xfc002154>
 80038f8:	0005883a 	mov	r2,zero
 80038fc:	003f5d06 	br	8003674 <__alt_data_end+0xfc003674>
 8003900:	d8c02b03 	ldbu	r3,172(sp)
 8003904:	d8c02785 	stb	r3,158(sp)
 8003908:	0038f306 	br	8001cd8 <__alt_data_end+0xfc001cd8>
 800390c:	d8c02b03 	ldbu	r3,172(sp)
 8003910:	d8c02785 	stb	r3,158(sp)
 8003914:	0038be06 	br	8001c10 <__alt_data_end+0xfc001c10>
 8003918:	d8802344 	addi	r2,sp,141
 800391c:	003f0506 	br	8003534 <__alt_data_end+0xfc003534>
 8003920:	d8c02b03 	ldbu	r3,172(sp)
 8003924:	d8c02785 	stb	r3,158(sp)
 8003928:	00388b06 	br	8001b58 <__alt_data_end+0xfc001b58>
 800392c:	d8c02b03 	ldbu	r3,172(sp)
 8003930:	d8c02785 	stb	r3,158(sp)
 8003934:	003ad706 	br	8002494 <__alt_data_end+0xfc002494>
 8003938:	d9403917 	ldw	r5,228(sp)
 800393c:	00800304 	movi	r2,12
 8003940:	28800015 	stw	r2,0(r5)
 8003944:	00bfffc4 	movi	r2,-1
 8003948:	00384306 	br	8001a58 <__alt_data_end+0xfc001a58>
 800394c:	d8c02b03 	ldbu	r3,172(sp)
 8003950:	d8c02785 	stb	r3,158(sp)
 8003954:	003ab606 	br	8002430 <__alt_data_end+0xfc002430>
 8003958:	d8c02b03 	ldbu	r3,172(sp)
 800395c:	d8c02785 	stb	r3,158(sp)
 8003960:	003a8906 	br	8002388 <__alt_data_end+0xfc002388>

08003964 <quorem>:
 8003964:	defff204 	addi	sp,sp,-56
 8003968:	ddc00b15 	stw	r23,44(sp)
 800396c:	20800417 	ldw	r2,16(r4)
 8003970:	2dc00417 	ldw	r23,16(r5)
 8003974:	dfc00d15 	stw	ra,52(sp)
 8003978:	df000c15 	stw	fp,48(sp)
 800397c:	dd800a15 	stw	r22,40(sp)
 8003980:	dd400915 	stw	r21,36(sp)
 8003984:	dd000815 	stw	r20,32(sp)
 8003988:	dcc00715 	stw	r19,28(sp)
 800398c:	dc800615 	stw	r18,24(sp)
 8003990:	dc400515 	stw	r17,20(sp)
 8003994:	dc000415 	stw	r16,16(sp)
 8003998:	15c07a16 	blt	r2,r23,8003b84 <quorem+0x220>
 800399c:	bdffffc4 	addi	r23,r23,-1
 80039a0:	bde9883a 	add	r20,r23,r23
 80039a4:	28c00504 	addi	r3,r5,20
 80039a8:	a529883a 	add	r20,r20,r20
 80039ac:	1d39883a 	add	fp,r3,r20
 80039b0:	24c00504 	addi	r19,r4,20
 80039b4:	d9400215 	stw	r5,8(sp)
 80039b8:	9d29883a 	add	r20,r19,r20
 80039bc:	e1400017 	ldw	r5,0(fp)
 80039c0:	d9000015 	stw	r4,0(sp)
 80039c4:	a1000017 	ldw	r4,0(r20)
 80039c8:	29400044 	addi	r5,r5,1
 80039cc:	d8c00115 	stw	r3,4(sp)
 80039d0:	dd000315 	stw	r20,12(sp)
 80039d4:	80013ec0 	call	80013ec <__udivsi3>
 80039d8:	1025883a 	mov	r18,r2
 80039dc:	10003026 	beq	r2,zero,8003aa0 <quorem+0x13c>
 80039e0:	dc400117 	ldw	r17,4(sp)
 80039e4:	9829883a 	mov	r20,r19
 80039e8:	002d883a 	mov	r22,zero
 80039ec:	0021883a 	mov	r16,zero
 80039f0:	8d400017 	ldw	r21,0(r17)
 80039f4:	900b883a 	mov	r5,r18
 80039f8:	8c400104 	addi	r17,r17,4
 80039fc:	a93fffcc 	andi	r4,r21,65535
 8003a00:	80014a80 	call	80014a8 <__mulsi3>
 8003a04:	a808d43a 	srli	r4,r21,16
 8003a08:	900b883a 	mov	r5,r18
 8003a0c:	15ad883a 	add	r22,r2,r22
 8003a10:	80014a80 	call	80014a8 <__mulsi3>
 8003a14:	a1000017 	ldw	r4,0(r20)
 8003a18:	b00cd43a 	srli	r6,r22,16
 8003a1c:	b0ffffcc 	andi	r3,r22,65535
 8003a20:	217fffcc 	andi	r5,r4,65535
 8003a24:	2c21883a 	add	r16,r5,r16
 8003a28:	80c7c83a 	sub	r3,r16,r3
 8003a2c:	2008d43a 	srli	r4,r4,16
 8003a30:	1185883a 	add	r2,r2,r6
 8003a34:	1821d43a 	srai	r16,r3,16
 8003a38:	117fffcc 	andi	r5,r2,65535
 8003a3c:	2149c83a 	sub	r4,r4,r5
 8003a40:	2421883a 	add	r16,r4,r16
 8003a44:	8008943a 	slli	r4,r16,16
 8003a48:	18ffffcc 	andi	r3,r3,65535
 8003a4c:	102cd43a 	srli	r22,r2,16
 8003a50:	20c8b03a 	or	r4,r4,r3
 8003a54:	a1000015 	stw	r4,0(r20)
 8003a58:	8021d43a 	srai	r16,r16,16
 8003a5c:	a5000104 	addi	r20,r20,4
 8003a60:	e47fe32e 	bgeu	fp,r17,80039f0 <__alt_data_end+0xfc0039f0>
 8003a64:	d8c00317 	ldw	r3,12(sp)
 8003a68:	18800017 	ldw	r2,0(r3)
 8003a6c:	10000c1e 	bne	r2,zero,8003aa0 <quorem+0x13c>
 8003a70:	18bfff04 	addi	r2,r3,-4
 8003a74:	9880082e 	bgeu	r19,r2,8003a98 <quorem+0x134>
 8003a78:	18ffff17 	ldw	r3,-4(r3)
 8003a7c:	18000326 	beq	r3,zero,8003a8c <quorem+0x128>
 8003a80:	00000506 	br	8003a98 <quorem+0x134>
 8003a84:	10c00017 	ldw	r3,0(r2)
 8003a88:	1800031e 	bne	r3,zero,8003a98 <quorem+0x134>
 8003a8c:	10bfff04 	addi	r2,r2,-4
 8003a90:	bdffffc4 	addi	r23,r23,-1
 8003a94:	98bffb36 	bltu	r19,r2,8003a84 <__alt_data_end+0xfc003a84>
 8003a98:	d8c00017 	ldw	r3,0(sp)
 8003a9c:	1dc00415 	stw	r23,16(r3)
 8003aa0:	d9400217 	ldw	r5,8(sp)
 8003aa4:	d9000017 	ldw	r4,0(sp)
 8003aa8:	80066ac0 	call	80066ac <__mcmp>
 8003aac:	10002816 	blt	r2,zero,8003b50 <quorem+0x1ec>
 8003ab0:	dc400117 	ldw	r17,4(sp)
 8003ab4:	94800044 	addi	r18,r18,1
 8003ab8:	980d883a 	mov	r6,r19
 8003abc:	0007883a 	mov	r3,zero
 8003ac0:	31000017 	ldw	r4,0(r6)
 8003ac4:	89400017 	ldw	r5,0(r17)
 8003ac8:	31800104 	addi	r6,r6,4
 8003acc:	20bfffcc 	andi	r2,r4,65535
 8003ad0:	10c7883a 	add	r3,r2,r3
 8003ad4:	28bfffcc 	andi	r2,r5,65535
 8003ad8:	1885c83a 	sub	r2,r3,r2
 8003adc:	280ad43a 	srli	r5,r5,16
 8003ae0:	2008d43a 	srli	r4,r4,16
 8003ae4:	1007d43a 	srai	r3,r2,16
 8003ae8:	10bfffcc 	andi	r2,r2,65535
 8003aec:	2149c83a 	sub	r4,r4,r5
 8003af0:	20c9883a 	add	r4,r4,r3
 8003af4:	200a943a 	slli	r5,r4,16
 8003af8:	8c400104 	addi	r17,r17,4
 8003afc:	2007d43a 	srai	r3,r4,16
 8003b00:	2884b03a 	or	r2,r5,r2
 8003b04:	30bfff15 	stw	r2,-4(r6)
 8003b08:	e47fed2e 	bgeu	fp,r17,8003ac0 <__alt_data_end+0xfc003ac0>
 8003b0c:	bdc5883a 	add	r2,r23,r23
 8003b10:	1085883a 	add	r2,r2,r2
 8003b14:	9887883a 	add	r3,r19,r2
 8003b18:	18800017 	ldw	r2,0(r3)
 8003b1c:	10000c1e 	bne	r2,zero,8003b50 <quorem+0x1ec>
 8003b20:	18bfff04 	addi	r2,r3,-4
 8003b24:	9880082e 	bgeu	r19,r2,8003b48 <quorem+0x1e4>
 8003b28:	18ffff17 	ldw	r3,-4(r3)
 8003b2c:	18000326 	beq	r3,zero,8003b3c <quorem+0x1d8>
 8003b30:	00000506 	br	8003b48 <quorem+0x1e4>
 8003b34:	10c00017 	ldw	r3,0(r2)
 8003b38:	1800031e 	bne	r3,zero,8003b48 <quorem+0x1e4>
 8003b3c:	10bfff04 	addi	r2,r2,-4
 8003b40:	bdffffc4 	addi	r23,r23,-1
 8003b44:	98bffb36 	bltu	r19,r2,8003b34 <__alt_data_end+0xfc003b34>
 8003b48:	d8c00017 	ldw	r3,0(sp)
 8003b4c:	1dc00415 	stw	r23,16(r3)
 8003b50:	9005883a 	mov	r2,r18
 8003b54:	dfc00d17 	ldw	ra,52(sp)
 8003b58:	df000c17 	ldw	fp,48(sp)
 8003b5c:	ddc00b17 	ldw	r23,44(sp)
 8003b60:	dd800a17 	ldw	r22,40(sp)
 8003b64:	dd400917 	ldw	r21,36(sp)
 8003b68:	dd000817 	ldw	r20,32(sp)
 8003b6c:	dcc00717 	ldw	r19,28(sp)
 8003b70:	dc800617 	ldw	r18,24(sp)
 8003b74:	dc400517 	ldw	r17,20(sp)
 8003b78:	dc000417 	ldw	r16,16(sp)
 8003b7c:	dec00e04 	addi	sp,sp,56
 8003b80:	f800283a 	ret
 8003b84:	0005883a 	mov	r2,zero
 8003b88:	003ff206 	br	8003b54 <__alt_data_end+0xfc003b54>

08003b8c <_dtoa_r>:
 8003b8c:	20801017 	ldw	r2,64(r4)
 8003b90:	deffde04 	addi	sp,sp,-136
 8003b94:	df002015 	stw	fp,128(sp)
 8003b98:	dcc01b15 	stw	r19,108(sp)
 8003b9c:	dc801a15 	stw	r18,104(sp)
 8003ba0:	dc401915 	stw	r17,100(sp)
 8003ba4:	dc001815 	stw	r16,96(sp)
 8003ba8:	dfc02115 	stw	ra,132(sp)
 8003bac:	ddc01f15 	stw	r23,124(sp)
 8003bb0:	dd801e15 	stw	r22,120(sp)
 8003bb4:	dd401d15 	stw	r21,116(sp)
 8003bb8:	dd001c15 	stw	r20,112(sp)
 8003bbc:	d9c00315 	stw	r7,12(sp)
 8003bc0:	2039883a 	mov	fp,r4
 8003bc4:	3023883a 	mov	r17,r6
 8003bc8:	2825883a 	mov	r18,r5
 8003bcc:	dc002417 	ldw	r16,144(sp)
 8003bd0:	3027883a 	mov	r19,r6
 8003bd4:	10000826 	beq	r2,zero,8003bf8 <_dtoa_r+0x6c>
 8003bd8:	21801117 	ldw	r6,68(r4)
 8003bdc:	00c00044 	movi	r3,1
 8003be0:	100b883a 	mov	r5,r2
 8003be4:	1986983a 	sll	r3,r3,r6
 8003be8:	11800115 	stw	r6,4(r2)
 8003bec:	10c00215 	stw	r3,8(r2)
 8003bf0:	8005dd00 	call	8005dd0 <_Bfree>
 8003bf4:	e0001015 	stw	zero,64(fp)
 8003bf8:	88002e16 	blt	r17,zero,8003cb4 <_dtoa_r+0x128>
 8003bfc:	80000015 	stw	zero,0(r16)
 8003c00:	889ffc2c 	andhi	r2,r17,32752
 8003c04:	00dffc34 	movhi	r3,32752
 8003c08:	10c01c26 	beq	r2,r3,8003c7c <_dtoa_r+0xf0>
 8003c0c:	000d883a 	mov	r6,zero
 8003c10:	000f883a 	mov	r7,zero
 8003c14:	9009883a 	mov	r4,r18
 8003c18:	980b883a 	mov	r5,r19
 8003c1c:	800b1340 	call	800b134 <__eqdf2>
 8003c20:	10002b1e 	bne	r2,zero,8003cd0 <_dtoa_r+0x144>
 8003c24:	d9c02317 	ldw	r7,140(sp)
 8003c28:	00800044 	movi	r2,1
 8003c2c:	38800015 	stw	r2,0(r7)
 8003c30:	d8802517 	ldw	r2,148(sp)
 8003c34:	10019e26 	beq	r2,zero,80042b0 <_dtoa_r+0x724>
 8003c38:	d8c02517 	ldw	r3,148(sp)
 8003c3c:	00820074 	movhi	r2,2049
 8003c40:	10bb0444 	addi	r2,r2,-5103
 8003c44:	18800015 	stw	r2,0(r3)
 8003c48:	10bfffc4 	addi	r2,r2,-1
 8003c4c:	dfc02117 	ldw	ra,132(sp)
 8003c50:	df002017 	ldw	fp,128(sp)
 8003c54:	ddc01f17 	ldw	r23,124(sp)
 8003c58:	dd801e17 	ldw	r22,120(sp)
 8003c5c:	dd401d17 	ldw	r21,116(sp)
 8003c60:	dd001c17 	ldw	r20,112(sp)
 8003c64:	dcc01b17 	ldw	r19,108(sp)
 8003c68:	dc801a17 	ldw	r18,104(sp)
 8003c6c:	dc401917 	ldw	r17,100(sp)
 8003c70:	dc001817 	ldw	r16,96(sp)
 8003c74:	dec02204 	addi	sp,sp,136
 8003c78:	f800283a 	ret
 8003c7c:	d8c02317 	ldw	r3,140(sp)
 8003c80:	0089c3c4 	movi	r2,9999
 8003c84:	18800015 	stw	r2,0(r3)
 8003c88:	90017726 	beq	r18,zero,8004268 <_dtoa_r+0x6dc>
 8003c8c:	00820074 	movhi	r2,2049
 8003c90:	10bb1004 	addi	r2,r2,-5056
 8003c94:	d9002517 	ldw	r4,148(sp)
 8003c98:	203fec26 	beq	r4,zero,8003c4c <__alt_data_end+0xfc003c4c>
 8003c9c:	10c000c7 	ldb	r3,3(r2)
 8003ca0:	1801781e 	bne	r3,zero,8004284 <_dtoa_r+0x6f8>
 8003ca4:	10c000c4 	addi	r3,r2,3
 8003ca8:	d9802517 	ldw	r6,148(sp)
 8003cac:	30c00015 	stw	r3,0(r6)
 8003cb0:	003fe606 	br	8003c4c <__alt_data_end+0xfc003c4c>
 8003cb4:	04e00034 	movhi	r19,32768
 8003cb8:	9cffffc4 	addi	r19,r19,-1
 8003cbc:	00800044 	movi	r2,1
 8003cc0:	8ce6703a 	and	r19,r17,r19
 8003cc4:	80800015 	stw	r2,0(r16)
 8003cc8:	9823883a 	mov	r17,r19
 8003ccc:	003fcc06 	br	8003c00 <__alt_data_end+0xfc003c00>
 8003cd0:	d8800204 	addi	r2,sp,8
 8003cd4:	d8800015 	stw	r2,0(sp)
 8003cd8:	d9c00104 	addi	r7,sp,4
 8003cdc:	900b883a 	mov	r5,r18
 8003ce0:	980d883a 	mov	r6,r19
 8003ce4:	e009883a 	mov	r4,fp
 8003ce8:	8820d53a 	srli	r16,r17,20
 8003cec:	8006a780 	call	8006a78 <__d2b>
 8003cf0:	d8800915 	stw	r2,36(sp)
 8003cf4:	8001651e 	bne	r16,zero,800428c <_dtoa_r+0x700>
 8003cf8:	dd800217 	ldw	r22,8(sp)
 8003cfc:	dc000117 	ldw	r16,4(sp)
 8003d00:	00800804 	movi	r2,32
 8003d04:	b421883a 	add	r16,r22,r16
 8003d08:	80c10c84 	addi	r3,r16,1074
 8003d0c:	10c2d10e 	bge	r2,r3,8004854 <_dtoa_r+0xcc8>
 8003d10:	00801004 	movi	r2,64
 8003d14:	81010484 	addi	r4,r16,1042
 8003d18:	10c7c83a 	sub	r3,r2,r3
 8003d1c:	9108d83a 	srl	r4,r18,r4
 8003d20:	88e2983a 	sll	r17,r17,r3
 8003d24:	2448b03a 	or	r4,r4,r17
 8003d28:	800c6500 	call	800c650 <__floatunsidf>
 8003d2c:	017f8434 	movhi	r5,65040
 8003d30:	01800044 	movi	r6,1
 8003d34:	1009883a 	mov	r4,r2
 8003d38:	194b883a 	add	r5,r3,r5
 8003d3c:	843fffc4 	addi	r16,r16,-1
 8003d40:	d9801115 	stw	r6,68(sp)
 8003d44:	000d883a 	mov	r6,zero
 8003d48:	01cffe34 	movhi	r7,16376
 8003d4c:	800bbf80 	call	800bbf8 <__subdf3>
 8003d50:	0198dbf4 	movhi	r6,25455
 8003d54:	01cff4f4 	movhi	r7,16339
 8003d58:	3190d844 	addi	r6,r6,17249
 8003d5c:	39e1e9c4 	addi	r7,r7,-30809
 8003d60:	1009883a 	mov	r4,r2
 8003d64:	180b883a 	mov	r5,r3
 8003d68:	800b38c0 	call	800b38c <__muldf3>
 8003d6c:	01a2d874 	movhi	r6,35681
 8003d70:	01cff1f4 	movhi	r7,16327
 8003d74:	31b22cc4 	addi	r6,r6,-14157
 8003d78:	39e28a04 	addi	r7,r7,-30168
 8003d7c:	180b883a 	mov	r5,r3
 8003d80:	1009883a 	mov	r4,r2
 8003d84:	8009eb80 	call	8009eb8 <__adddf3>
 8003d88:	8009883a 	mov	r4,r16
 8003d8c:	1029883a 	mov	r20,r2
 8003d90:	1823883a 	mov	r17,r3
 8003d94:	800c5740 	call	800c574 <__floatsidf>
 8003d98:	019427f4 	movhi	r6,20639
 8003d9c:	01cff4f4 	movhi	r7,16339
 8003da0:	319e7ec4 	addi	r6,r6,31227
 8003da4:	39d104c4 	addi	r7,r7,17427
 8003da8:	1009883a 	mov	r4,r2
 8003dac:	180b883a 	mov	r5,r3
 8003db0:	800b38c0 	call	800b38c <__muldf3>
 8003db4:	100d883a 	mov	r6,r2
 8003db8:	180f883a 	mov	r7,r3
 8003dbc:	a009883a 	mov	r4,r20
 8003dc0:	880b883a 	mov	r5,r17
 8003dc4:	8009eb80 	call	8009eb8 <__adddf3>
 8003dc8:	1009883a 	mov	r4,r2
 8003dcc:	180b883a 	mov	r5,r3
 8003dd0:	1029883a 	mov	r20,r2
 8003dd4:	1823883a 	mov	r17,r3
 8003dd8:	800c4f40 	call	800c4f4 <__fixdfsi>
 8003ddc:	000d883a 	mov	r6,zero
 8003de0:	000f883a 	mov	r7,zero
 8003de4:	a009883a 	mov	r4,r20
 8003de8:	880b883a 	mov	r5,r17
 8003dec:	d8800515 	stw	r2,20(sp)
 8003df0:	800b2980 	call	800b298 <__ledf2>
 8003df4:	10028716 	blt	r2,zero,8004814 <_dtoa_r+0xc88>
 8003df8:	d8c00517 	ldw	r3,20(sp)
 8003dfc:	00800584 	movi	r2,22
 8003e00:	10c27536 	bltu	r2,r3,80047d8 <_dtoa_r+0xc4c>
 8003e04:	180490fa 	slli	r2,r3,3
 8003e08:	00c20074 	movhi	r3,2049
 8003e0c:	18fb2c04 	addi	r3,r3,-4944
 8003e10:	1885883a 	add	r2,r3,r2
 8003e14:	11000017 	ldw	r4,0(r2)
 8003e18:	11400117 	ldw	r5,4(r2)
 8003e1c:	900d883a 	mov	r6,r18
 8003e20:	980f883a 	mov	r7,r19
 8003e24:	800b1bc0 	call	800b1bc <__gedf2>
 8003e28:	00828d0e 	bge	zero,r2,8004860 <_dtoa_r+0xcd4>
 8003e2c:	d9000517 	ldw	r4,20(sp)
 8003e30:	d8000e15 	stw	zero,56(sp)
 8003e34:	213fffc4 	addi	r4,r4,-1
 8003e38:	d9000515 	stw	r4,20(sp)
 8003e3c:	b42dc83a 	sub	r22,r22,r16
 8003e40:	b5bfffc4 	addi	r22,r22,-1
 8003e44:	b0026f16 	blt	r22,zero,8004804 <_dtoa_r+0xc78>
 8003e48:	d8000815 	stw	zero,32(sp)
 8003e4c:	d9c00517 	ldw	r7,20(sp)
 8003e50:	38026416 	blt	r7,zero,80047e4 <_dtoa_r+0xc58>
 8003e54:	b1ed883a 	add	r22,r22,r7
 8003e58:	d9c00d15 	stw	r7,52(sp)
 8003e5c:	d8000a15 	stw	zero,40(sp)
 8003e60:	d9800317 	ldw	r6,12(sp)
 8003e64:	00800244 	movi	r2,9
 8003e68:	11811436 	bltu	r2,r6,80042bc <_dtoa_r+0x730>
 8003e6c:	00800144 	movi	r2,5
 8003e70:	1184e10e 	bge	r2,r6,80051f8 <_dtoa_r+0x166c>
 8003e74:	31bfff04 	addi	r6,r6,-4
 8003e78:	d9800315 	stw	r6,12(sp)
 8003e7c:	0023883a 	mov	r17,zero
 8003e80:	d9800317 	ldw	r6,12(sp)
 8003e84:	008000c4 	movi	r2,3
 8003e88:	30836726 	beq	r6,r2,8004c28 <_dtoa_r+0x109c>
 8003e8c:	1183410e 	bge	r2,r6,8004b94 <_dtoa_r+0x1008>
 8003e90:	d9c00317 	ldw	r7,12(sp)
 8003e94:	00800104 	movi	r2,4
 8003e98:	38827c26 	beq	r7,r2,800488c <_dtoa_r+0xd00>
 8003e9c:	00800144 	movi	r2,5
 8003ea0:	3884c41e 	bne	r7,r2,80051b4 <_dtoa_r+0x1628>
 8003ea4:	00800044 	movi	r2,1
 8003ea8:	d8800b15 	stw	r2,44(sp)
 8003eac:	d8c00517 	ldw	r3,20(sp)
 8003eb0:	d9002217 	ldw	r4,136(sp)
 8003eb4:	1907883a 	add	r3,r3,r4
 8003eb8:	19800044 	addi	r6,r3,1
 8003ebc:	d8c00c15 	stw	r3,48(sp)
 8003ec0:	d9800615 	stw	r6,24(sp)
 8003ec4:	0183a40e 	bge	zero,r6,8004d58 <_dtoa_r+0x11cc>
 8003ec8:	d9800617 	ldw	r6,24(sp)
 8003ecc:	3021883a 	mov	r16,r6
 8003ed0:	e0001115 	stw	zero,68(fp)
 8003ed4:	008005c4 	movi	r2,23
 8003ed8:	1184c92e 	bgeu	r2,r6,8005200 <_dtoa_r+0x1674>
 8003edc:	00c00044 	movi	r3,1
 8003ee0:	00800104 	movi	r2,4
 8003ee4:	1085883a 	add	r2,r2,r2
 8003ee8:	11000504 	addi	r4,r2,20
 8003eec:	180b883a 	mov	r5,r3
 8003ef0:	18c00044 	addi	r3,r3,1
 8003ef4:	313ffb2e 	bgeu	r6,r4,8003ee4 <__alt_data_end+0xfc003ee4>
 8003ef8:	e1401115 	stw	r5,68(fp)
 8003efc:	e009883a 	mov	r4,fp
 8003f00:	8005d280 	call	8005d28 <_Balloc>
 8003f04:	d8800715 	stw	r2,28(sp)
 8003f08:	e0801015 	stw	r2,64(fp)
 8003f0c:	00800384 	movi	r2,14
 8003f10:	1400f736 	bltu	r2,r16,80042f0 <_dtoa_r+0x764>
 8003f14:	8800f626 	beq	r17,zero,80042f0 <_dtoa_r+0x764>
 8003f18:	d9c00517 	ldw	r7,20(sp)
 8003f1c:	01c39a0e 	bge	zero,r7,8004d88 <_dtoa_r+0x11fc>
 8003f20:	388003cc 	andi	r2,r7,15
 8003f24:	100490fa 	slli	r2,r2,3
 8003f28:	382bd13a 	srai	r21,r7,4
 8003f2c:	00c20074 	movhi	r3,2049
 8003f30:	18fb2c04 	addi	r3,r3,-4944
 8003f34:	1885883a 	add	r2,r3,r2
 8003f38:	a8c0040c 	andi	r3,r21,16
 8003f3c:	12400017 	ldw	r9,0(r2)
 8003f40:	12000117 	ldw	r8,4(r2)
 8003f44:	18037926 	beq	r3,zero,8004d2c <_dtoa_r+0x11a0>
 8003f48:	00820074 	movhi	r2,2049
 8003f4c:	10bb2204 	addi	r2,r2,-4984
 8003f50:	11800817 	ldw	r6,32(r2)
 8003f54:	11c00917 	ldw	r7,36(r2)
 8003f58:	9009883a 	mov	r4,r18
 8003f5c:	980b883a 	mov	r5,r19
 8003f60:	da001715 	stw	r8,92(sp)
 8003f64:	da401615 	stw	r9,88(sp)
 8003f68:	800a7640 	call	800a764 <__divdf3>
 8003f6c:	da001717 	ldw	r8,92(sp)
 8003f70:	da401617 	ldw	r9,88(sp)
 8003f74:	ad4003cc 	andi	r21,r21,15
 8003f78:	040000c4 	movi	r16,3
 8003f7c:	1023883a 	mov	r17,r2
 8003f80:	1829883a 	mov	r20,r3
 8003f84:	a8001126 	beq	r21,zero,8003fcc <_dtoa_r+0x440>
 8003f88:	05c20074 	movhi	r23,2049
 8003f8c:	bdfb2204 	addi	r23,r23,-4984
 8003f90:	4805883a 	mov	r2,r9
 8003f94:	4007883a 	mov	r3,r8
 8003f98:	a980004c 	andi	r6,r21,1
 8003f9c:	1009883a 	mov	r4,r2
 8003fa0:	a82bd07a 	srai	r21,r21,1
 8003fa4:	180b883a 	mov	r5,r3
 8003fa8:	30000426 	beq	r6,zero,8003fbc <_dtoa_r+0x430>
 8003fac:	b9800017 	ldw	r6,0(r23)
 8003fb0:	b9c00117 	ldw	r7,4(r23)
 8003fb4:	84000044 	addi	r16,r16,1
 8003fb8:	800b38c0 	call	800b38c <__muldf3>
 8003fbc:	bdc00204 	addi	r23,r23,8
 8003fc0:	a83ff51e 	bne	r21,zero,8003f98 <__alt_data_end+0xfc003f98>
 8003fc4:	1013883a 	mov	r9,r2
 8003fc8:	1811883a 	mov	r8,r3
 8003fcc:	480d883a 	mov	r6,r9
 8003fd0:	400f883a 	mov	r7,r8
 8003fd4:	8809883a 	mov	r4,r17
 8003fd8:	a00b883a 	mov	r5,r20
 8003fdc:	800a7640 	call	800a764 <__divdf3>
 8003fe0:	d8800f15 	stw	r2,60(sp)
 8003fe4:	d8c01015 	stw	r3,64(sp)
 8003fe8:	d8c00e17 	ldw	r3,56(sp)
 8003fec:	18000626 	beq	r3,zero,8004008 <_dtoa_r+0x47c>
 8003ff0:	d9000f17 	ldw	r4,60(sp)
 8003ff4:	d9401017 	ldw	r5,64(sp)
 8003ff8:	000d883a 	mov	r6,zero
 8003ffc:	01cffc34 	movhi	r7,16368
 8004000:	800b2980 	call	800b298 <__ledf2>
 8004004:	10040b16 	blt	r2,zero,8005034 <_dtoa_r+0x14a8>
 8004008:	8009883a 	mov	r4,r16
 800400c:	800c5740 	call	800c574 <__floatsidf>
 8004010:	d9800f17 	ldw	r6,60(sp)
 8004014:	d9c01017 	ldw	r7,64(sp)
 8004018:	1009883a 	mov	r4,r2
 800401c:	180b883a 	mov	r5,r3
 8004020:	800b38c0 	call	800b38c <__muldf3>
 8004024:	000d883a 	mov	r6,zero
 8004028:	01d00734 	movhi	r7,16412
 800402c:	1009883a 	mov	r4,r2
 8004030:	180b883a 	mov	r5,r3
 8004034:	8009eb80 	call	8009eb8 <__adddf3>
 8004038:	1021883a 	mov	r16,r2
 800403c:	d8800617 	ldw	r2,24(sp)
 8004040:	047f3034 	movhi	r17,64704
 8004044:	1c63883a 	add	r17,r3,r17
 8004048:	10031826 	beq	r2,zero,8004cac <_dtoa_r+0x1120>
 800404c:	d8c00517 	ldw	r3,20(sp)
 8004050:	db000617 	ldw	r12,24(sp)
 8004054:	d8c01315 	stw	r3,76(sp)
 8004058:	d9000b17 	ldw	r4,44(sp)
 800405c:	20038f26 	beq	r4,zero,8004e9c <_dtoa_r+0x1310>
 8004060:	60bfffc4 	addi	r2,r12,-1
 8004064:	100490fa 	slli	r2,r2,3
 8004068:	00c20074 	movhi	r3,2049
 800406c:	18fb2c04 	addi	r3,r3,-4944
 8004070:	1885883a 	add	r2,r3,r2
 8004074:	11800017 	ldw	r6,0(r2)
 8004078:	11c00117 	ldw	r7,4(r2)
 800407c:	d8800717 	ldw	r2,28(sp)
 8004080:	0009883a 	mov	r4,zero
 8004084:	014ff834 	movhi	r5,16352
 8004088:	db001615 	stw	r12,88(sp)
 800408c:	15c00044 	addi	r23,r2,1
 8004090:	800a7640 	call	800a764 <__divdf3>
 8004094:	800d883a 	mov	r6,r16
 8004098:	880f883a 	mov	r7,r17
 800409c:	1009883a 	mov	r4,r2
 80040a0:	180b883a 	mov	r5,r3
 80040a4:	800bbf80 	call	800bbf8 <__subdf3>
 80040a8:	d9401017 	ldw	r5,64(sp)
 80040ac:	d9000f17 	ldw	r4,60(sp)
 80040b0:	102b883a 	mov	r21,r2
 80040b4:	d8c01215 	stw	r3,72(sp)
 80040b8:	800c4f40 	call	800c4f4 <__fixdfsi>
 80040bc:	1009883a 	mov	r4,r2
 80040c0:	1029883a 	mov	r20,r2
 80040c4:	800c5740 	call	800c574 <__floatsidf>
 80040c8:	d9000f17 	ldw	r4,60(sp)
 80040cc:	d9401017 	ldw	r5,64(sp)
 80040d0:	100d883a 	mov	r6,r2
 80040d4:	180f883a 	mov	r7,r3
 80040d8:	800bbf80 	call	800bbf8 <__subdf3>
 80040dc:	1823883a 	mov	r17,r3
 80040e0:	d8c00717 	ldw	r3,28(sp)
 80040e4:	d9401217 	ldw	r5,72(sp)
 80040e8:	a2000c04 	addi	r8,r20,48
 80040ec:	1021883a 	mov	r16,r2
 80040f0:	1a000005 	stb	r8,0(r3)
 80040f4:	800d883a 	mov	r6,r16
 80040f8:	880f883a 	mov	r7,r17
 80040fc:	a809883a 	mov	r4,r21
 8004100:	4029883a 	mov	r20,r8
 8004104:	800b1bc0 	call	800b1bc <__gedf2>
 8004108:	00841d16 	blt	zero,r2,8005180 <_dtoa_r+0x15f4>
 800410c:	800d883a 	mov	r6,r16
 8004110:	880f883a 	mov	r7,r17
 8004114:	0009883a 	mov	r4,zero
 8004118:	014ffc34 	movhi	r5,16368
 800411c:	800bbf80 	call	800bbf8 <__subdf3>
 8004120:	d9401217 	ldw	r5,72(sp)
 8004124:	100d883a 	mov	r6,r2
 8004128:	180f883a 	mov	r7,r3
 800412c:	a809883a 	mov	r4,r21
 8004130:	800b1bc0 	call	800b1bc <__gedf2>
 8004134:	db001617 	ldw	r12,88(sp)
 8004138:	00840e16 	blt	zero,r2,8005174 <_dtoa_r+0x15e8>
 800413c:	00800044 	movi	r2,1
 8004140:	13006b0e 	bge	r2,r12,80042f0 <_dtoa_r+0x764>
 8004144:	d9000717 	ldw	r4,28(sp)
 8004148:	dd800f15 	stw	r22,60(sp)
 800414c:	dcc01015 	stw	r19,64(sp)
 8004150:	2319883a 	add	r12,r4,r12
 8004154:	dcc01217 	ldw	r19,72(sp)
 8004158:	602d883a 	mov	r22,r12
 800415c:	dc801215 	stw	r18,72(sp)
 8004160:	b825883a 	mov	r18,r23
 8004164:	00000906 	br	800418c <_dtoa_r+0x600>
 8004168:	800bbf80 	call	800bbf8 <__subdf3>
 800416c:	a80d883a 	mov	r6,r21
 8004170:	980f883a 	mov	r7,r19
 8004174:	1009883a 	mov	r4,r2
 8004178:	180b883a 	mov	r5,r3
 800417c:	800b2980 	call	800b298 <__ledf2>
 8004180:	1003e816 	blt	r2,zero,8005124 <_dtoa_r+0x1598>
 8004184:	b825883a 	mov	r18,r23
 8004188:	bd83e926 	beq	r23,r22,8005130 <_dtoa_r+0x15a4>
 800418c:	a809883a 	mov	r4,r21
 8004190:	980b883a 	mov	r5,r19
 8004194:	000d883a 	mov	r6,zero
 8004198:	01d00934 	movhi	r7,16420
 800419c:	800b38c0 	call	800b38c <__muldf3>
 80041a0:	000d883a 	mov	r6,zero
 80041a4:	01d00934 	movhi	r7,16420
 80041a8:	8009883a 	mov	r4,r16
 80041ac:	880b883a 	mov	r5,r17
 80041b0:	102b883a 	mov	r21,r2
 80041b4:	1827883a 	mov	r19,r3
 80041b8:	800b38c0 	call	800b38c <__muldf3>
 80041bc:	180b883a 	mov	r5,r3
 80041c0:	1009883a 	mov	r4,r2
 80041c4:	1821883a 	mov	r16,r3
 80041c8:	1023883a 	mov	r17,r2
 80041cc:	800c4f40 	call	800c4f4 <__fixdfsi>
 80041d0:	1009883a 	mov	r4,r2
 80041d4:	1029883a 	mov	r20,r2
 80041d8:	800c5740 	call	800c574 <__floatsidf>
 80041dc:	8809883a 	mov	r4,r17
 80041e0:	800b883a 	mov	r5,r16
 80041e4:	100d883a 	mov	r6,r2
 80041e8:	180f883a 	mov	r7,r3
 80041ec:	800bbf80 	call	800bbf8 <__subdf3>
 80041f0:	a5000c04 	addi	r20,r20,48
 80041f4:	a80d883a 	mov	r6,r21
 80041f8:	980f883a 	mov	r7,r19
 80041fc:	1009883a 	mov	r4,r2
 8004200:	180b883a 	mov	r5,r3
 8004204:	95000005 	stb	r20,0(r18)
 8004208:	1021883a 	mov	r16,r2
 800420c:	1823883a 	mov	r17,r3
 8004210:	800b2980 	call	800b298 <__ledf2>
 8004214:	bdc00044 	addi	r23,r23,1
 8004218:	800d883a 	mov	r6,r16
 800421c:	880f883a 	mov	r7,r17
 8004220:	0009883a 	mov	r4,zero
 8004224:	014ffc34 	movhi	r5,16368
 8004228:	103fcf0e 	bge	r2,zero,8004168 <__alt_data_end+0xfc004168>
 800422c:	d8c01317 	ldw	r3,76(sp)
 8004230:	d8c00515 	stw	r3,20(sp)
 8004234:	d9400917 	ldw	r5,36(sp)
 8004238:	e009883a 	mov	r4,fp
 800423c:	8005dd00 	call	8005dd0 <_Bfree>
 8004240:	d9000517 	ldw	r4,20(sp)
 8004244:	d9802317 	ldw	r6,140(sp)
 8004248:	d9c02517 	ldw	r7,148(sp)
 800424c:	b8000005 	stb	zero,0(r23)
 8004250:	20800044 	addi	r2,r4,1
 8004254:	30800015 	stw	r2,0(r6)
 8004258:	3802aa26 	beq	r7,zero,8004d04 <_dtoa_r+0x1178>
 800425c:	3dc00015 	stw	r23,0(r7)
 8004260:	d8800717 	ldw	r2,28(sp)
 8004264:	003e7906 	br	8003c4c <__alt_data_end+0xfc003c4c>
 8004268:	00800434 	movhi	r2,16
 800426c:	10bfffc4 	addi	r2,r2,-1
 8004270:	88a2703a 	and	r17,r17,r2
 8004274:	883e851e 	bne	r17,zero,8003c8c <__alt_data_end+0xfc003c8c>
 8004278:	00820074 	movhi	r2,2049
 800427c:	10bb0d04 	addi	r2,r2,-5068
 8004280:	003e8406 	br	8003c94 <__alt_data_end+0xfc003c94>
 8004284:	10c00204 	addi	r3,r2,8
 8004288:	003e8706 	br	8003ca8 <__alt_data_end+0xfc003ca8>
 800428c:	01400434 	movhi	r5,16
 8004290:	297fffc4 	addi	r5,r5,-1
 8004294:	994a703a 	and	r5,r19,r5
 8004298:	9009883a 	mov	r4,r18
 800429c:	843f0044 	addi	r16,r16,-1023
 80042a0:	294ffc34 	orhi	r5,r5,16368
 80042a4:	dd800217 	ldw	r22,8(sp)
 80042a8:	d8001115 	stw	zero,68(sp)
 80042ac:	003ea506 	br	8003d44 <__alt_data_end+0xfc003d44>
 80042b0:	00820074 	movhi	r2,2049
 80042b4:	10bb0404 	addi	r2,r2,-5104
 80042b8:	003e6406 	br	8003c4c <__alt_data_end+0xfc003c4c>
 80042bc:	e0001115 	stw	zero,68(fp)
 80042c0:	000b883a 	mov	r5,zero
 80042c4:	e009883a 	mov	r4,fp
 80042c8:	8005d280 	call	8005d28 <_Balloc>
 80042cc:	01bfffc4 	movi	r6,-1
 80042d0:	01c00044 	movi	r7,1
 80042d4:	d8800715 	stw	r2,28(sp)
 80042d8:	d9800c15 	stw	r6,48(sp)
 80042dc:	e0801015 	stw	r2,64(fp)
 80042e0:	d8000315 	stw	zero,12(sp)
 80042e4:	d9c00b15 	stw	r7,44(sp)
 80042e8:	d9800615 	stw	r6,24(sp)
 80042ec:	d8002215 	stw	zero,136(sp)
 80042f0:	d8800117 	ldw	r2,4(sp)
 80042f4:	10008916 	blt	r2,zero,800451c <_dtoa_r+0x990>
 80042f8:	d9000517 	ldw	r4,20(sp)
 80042fc:	00c00384 	movi	r3,14
 8004300:	19008616 	blt	r3,r4,800451c <_dtoa_r+0x990>
 8004304:	200490fa 	slli	r2,r4,3
 8004308:	00c20074 	movhi	r3,2049
 800430c:	d9802217 	ldw	r6,136(sp)
 8004310:	18fb2c04 	addi	r3,r3,-4944
 8004314:	1885883a 	add	r2,r3,r2
 8004318:	14000017 	ldw	r16,0(r2)
 800431c:	14400117 	ldw	r17,4(r2)
 8004320:	30016316 	blt	r6,zero,80048b0 <_dtoa_r+0xd24>
 8004324:	800d883a 	mov	r6,r16
 8004328:	880f883a 	mov	r7,r17
 800432c:	9009883a 	mov	r4,r18
 8004330:	980b883a 	mov	r5,r19
 8004334:	800a7640 	call	800a764 <__divdf3>
 8004338:	180b883a 	mov	r5,r3
 800433c:	1009883a 	mov	r4,r2
 8004340:	800c4f40 	call	800c4f4 <__fixdfsi>
 8004344:	1009883a 	mov	r4,r2
 8004348:	102b883a 	mov	r21,r2
 800434c:	800c5740 	call	800c574 <__floatsidf>
 8004350:	800d883a 	mov	r6,r16
 8004354:	880f883a 	mov	r7,r17
 8004358:	1009883a 	mov	r4,r2
 800435c:	180b883a 	mov	r5,r3
 8004360:	800b38c0 	call	800b38c <__muldf3>
 8004364:	100d883a 	mov	r6,r2
 8004368:	180f883a 	mov	r7,r3
 800436c:	9009883a 	mov	r4,r18
 8004370:	980b883a 	mov	r5,r19
 8004374:	800bbf80 	call	800bbf8 <__subdf3>
 8004378:	d9c00717 	ldw	r7,28(sp)
 800437c:	1009883a 	mov	r4,r2
 8004380:	a8800c04 	addi	r2,r21,48
 8004384:	38800005 	stb	r2,0(r7)
 8004388:	3dc00044 	addi	r23,r7,1
 800438c:	d9c00617 	ldw	r7,24(sp)
 8004390:	01800044 	movi	r6,1
 8004394:	180b883a 	mov	r5,r3
 8004398:	2005883a 	mov	r2,r4
 800439c:	39803826 	beq	r7,r6,8004480 <_dtoa_r+0x8f4>
 80043a0:	000d883a 	mov	r6,zero
 80043a4:	01d00934 	movhi	r7,16420
 80043a8:	800b38c0 	call	800b38c <__muldf3>
 80043ac:	000d883a 	mov	r6,zero
 80043b0:	000f883a 	mov	r7,zero
 80043b4:	1009883a 	mov	r4,r2
 80043b8:	180b883a 	mov	r5,r3
 80043bc:	1025883a 	mov	r18,r2
 80043c0:	1827883a 	mov	r19,r3
 80043c4:	800b1340 	call	800b134 <__eqdf2>
 80043c8:	103f9a26 	beq	r2,zero,8004234 <__alt_data_end+0xfc004234>
 80043cc:	d9c00617 	ldw	r7,24(sp)
 80043d0:	d8c00717 	ldw	r3,28(sp)
 80043d4:	b829883a 	mov	r20,r23
 80043d8:	38bfffc4 	addi	r2,r7,-1
 80043dc:	18ad883a 	add	r22,r3,r2
 80043e0:	00000a06 	br	800440c <_dtoa_r+0x880>
 80043e4:	800b38c0 	call	800b38c <__muldf3>
 80043e8:	000d883a 	mov	r6,zero
 80043ec:	000f883a 	mov	r7,zero
 80043f0:	1009883a 	mov	r4,r2
 80043f4:	180b883a 	mov	r5,r3
 80043f8:	1025883a 	mov	r18,r2
 80043fc:	1827883a 	mov	r19,r3
 8004400:	b829883a 	mov	r20,r23
 8004404:	800b1340 	call	800b134 <__eqdf2>
 8004408:	103f8a26 	beq	r2,zero,8004234 <__alt_data_end+0xfc004234>
 800440c:	800d883a 	mov	r6,r16
 8004410:	880f883a 	mov	r7,r17
 8004414:	9009883a 	mov	r4,r18
 8004418:	980b883a 	mov	r5,r19
 800441c:	800a7640 	call	800a764 <__divdf3>
 8004420:	180b883a 	mov	r5,r3
 8004424:	1009883a 	mov	r4,r2
 8004428:	800c4f40 	call	800c4f4 <__fixdfsi>
 800442c:	1009883a 	mov	r4,r2
 8004430:	102b883a 	mov	r21,r2
 8004434:	800c5740 	call	800c574 <__floatsidf>
 8004438:	800d883a 	mov	r6,r16
 800443c:	880f883a 	mov	r7,r17
 8004440:	1009883a 	mov	r4,r2
 8004444:	180b883a 	mov	r5,r3
 8004448:	800b38c0 	call	800b38c <__muldf3>
 800444c:	100d883a 	mov	r6,r2
 8004450:	180f883a 	mov	r7,r3
 8004454:	9009883a 	mov	r4,r18
 8004458:	980b883a 	mov	r5,r19
 800445c:	800bbf80 	call	800bbf8 <__subdf3>
 8004460:	aa000c04 	addi	r8,r21,48
 8004464:	a2000005 	stb	r8,0(r20)
 8004468:	000d883a 	mov	r6,zero
 800446c:	01d00934 	movhi	r7,16420
 8004470:	1009883a 	mov	r4,r2
 8004474:	180b883a 	mov	r5,r3
 8004478:	a5c00044 	addi	r23,r20,1
 800447c:	b53fd91e 	bne	r22,r20,80043e4 <__alt_data_end+0xfc0043e4>
 8004480:	100d883a 	mov	r6,r2
 8004484:	180f883a 	mov	r7,r3
 8004488:	1009883a 	mov	r4,r2
 800448c:	180b883a 	mov	r5,r3
 8004490:	8009eb80 	call	8009eb8 <__adddf3>
 8004494:	100d883a 	mov	r6,r2
 8004498:	180f883a 	mov	r7,r3
 800449c:	8009883a 	mov	r4,r16
 80044a0:	880b883a 	mov	r5,r17
 80044a4:	1027883a 	mov	r19,r2
 80044a8:	1825883a 	mov	r18,r3
 80044ac:	800b2980 	call	800b298 <__ledf2>
 80044b0:	10000816 	blt	r2,zero,80044d4 <_dtoa_r+0x948>
 80044b4:	980d883a 	mov	r6,r19
 80044b8:	900f883a 	mov	r7,r18
 80044bc:	8009883a 	mov	r4,r16
 80044c0:	880b883a 	mov	r5,r17
 80044c4:	800b1340 	call	800b134 <__eqdf2>
 80044c8:	103f5a1e 	bne	r2,zero,8004234 <__alt_data_end+0xfc004234>
 80044cc:	ad40004c 	andi	r21,r21,1
 80044d0:	a83f5826 	beq	r21,zero,8004234 <__alt_data_end+0xfc004234>
 80044d4:	bd3fffc3 	ldbu	r20,-1(r23)
 80044d8:	b8bfffc4 	addi	r2,r23,-1
 80044dc:	1007883a 	mov	r3,r2
 80044e0:	01400e44 	movi	r5,57
 80044e4:	d9800717 	ldw	r6,28(sp)
 80044e8:	00000506 	br	8004500 <_dtoa_r+0x974>
 80044ec:	18ffffc4 	addi	r3,r3,-1
 80044f0:	11824726 	beq	r2,r6,8004e10 <_dtoa_r+0x1284>
 80044f4:	1d000003 	ldbu	r20,0(r3)
 80044f8:	102f883a 	mov	r23,r2
 80044fc:	10bfffc4 	addi	r2,r2,-1
 8004500:	a1003fcc 	andi	r4,r20,255
 8004504:	2100201c 	xori	r4,r4,128
 8004508:	213fe004 	addi	r4,r4,-128
 800450c:	217ff726 	beq	r4,r5,80044ec <__alt_data_end+0xfc0044ec>
 8004510:	a2000044 	addi	r8,r20,1
 8004514:	12000005 	stb	r8,0(r2)
 8004518:	003f4606 	br	8004234 <__alt_data_end+0xfc004234>
 800451c:	d9000b17 	ldw	r4,44(sp)
 8004520:	2000c826 	beq	r4,zero,8004844 <_dtoa_r+0xcb8>
 8004524:	d9800317 	ldw	r6,12(sp)
 8004528:	00c00044 	movi	r3,1
 800452c:	1980f90e 	bge	r3,r6,8004914 <_dtoa_r+0xd88>
 8004530:	d8800617 	ldw	r2,24(sp)
 8004534:	d8c00a17 	ldw	r3,40(sp)
 8004538:	157fffc4 	addi	r21,r2,-1
 800453c:	1d41f316 	blt	r3,r21,8004d0c <_dtoa_r+0x1180>
 8004540:	1d6bc83a 	sub	r21,r3,r21
 8004544:	d9c00617 	ldw	r7,24(sp)
 8004548:	3802aa16 	blt	r7,zero,8004ff4 <_dtoa_r+0x1468>
 800454c:	dd000817 	ldw	r20,32(sp)
 8004550:	d8800617 	ldw	r2,24(sp)
 8004554:	d8c00817 	ldw	r3,32(sp)
 8004558:	01400044 	movi	r5,1
 800455c:	e009883a 	mov	r4,fp
 8004560:	1887883a 	add	r3,r3,r2
 8004564:	d8c00815 	stw	r3,32(sp)
 8004568:	b0ad883a 	add	r22,r22,r2
 800456c:	800615c0 	call	800615c <__i2b>
 8004570:	1023883a 	mov	r17,r2
 8004574:	a0000826 	beq	r20,zero,8004598 <_dtoa_r+0xa0c>
 8004578:	0580070e 	bge	zero,r22,8004598 <_dtoa_r+0xa0c>
 800457c:	a005883a 	mov	r2,r20
 8004580:	b500b916 	blt	r22,r20,8004868 <_dtoa_r+0xcdc>
 8004584:	d9000817 	ldw	r4,32(sp)
 8004588:	a0a9c83a 	sub	r20,r20,r2
 800458c:	b0adc83a 	sub	r22,r22,r2
 8004590:	2089c83a 	sub	r4,r4,r2
 8004594:	d9000815 	stw	r4,32(sp)
 8004598:	d9800a17 	ldw	r6,40(sp)
 800459c:	0181810e 	bge	zero,r6,8004ba4 <_dtoa_r+0x1018>
 80045a0:	d9c00b17 	ldw	r7,44(sp)
 80045a4:	3800b326 	beq	r7,zero,8004874 <_dtoa_r+0xce8>
 80045a8:	a800b226 	beq	r21,zero,8004874 <_dtoa_r+0xce8>
 80045ac:	880b883a 	mov	r5,r17
 80045b0:	a80d883a 	mov	r6,r21
 80045b4:	e009883a 	mov	r4,fp
 80045b8:	80064240 	call	8006424 <__pow5mult>
 80045bc:	d9800917 	ldw	r6,36(sp)
 80045c0:	100b883a 	mov	r5,r2
 80045c4:	e009883a 	mov	r4,fp
 80045c8:	1023883a 	mov	r17,r2
 80045cc:	80061980 	call	8006198 <__multiply>
 80045d0:	1021883a 	mov	r16,r2
 80045d4:	d8800a17 	ldw	r2,40(sp)
 80045d8:	d9400917 	ldw	r5,36(sp)
 80045dc:	e009883a 	mov	r4,fp
 80045e0:	1545c83a 	sub	r2,r2,r21
 80045e4:	d8800a15 	stw	r2,40(sp)
 80045e8:	8005dd00 	call	8005dd0 <_Bfree>
 80045ec:	d8c00a17 	ldw	r3,40(sp)
 80045f0:	18009f1e 	bne	r3,zero,8004870 <_dtoa_r+0xce4>
 80045f4:	05c00044 	movi	r23,1
 80045f8:	e009883a 	mov	r4,fp
 80045fc:	b80b883a 	mov	r5,r23
 8004600:	800615c0 	call	800615c <__i2b>
 8004604:	d9000d17 	ldw	r4,52(sp)
 8004608:	102b883a 	mov	r21,r2
 800460c:	2000ce26 	beq	r4,zero,8004948 <_dtoa_r+0xdbc>
 8004610:	200d883a 	mov	r6,r4
 8004614:	100b883a 	mov	r5,r2
 8004618:	e009883a 	mov	r4,fp
 800461c:	80064240 	call	8006424 <__pow5mult>
 8004620:	d9800317 	ldw	r6,12(sp)
 8004624:	102b883a 	mov	r21,r2
 8004628:	b981810e 	bge	r23,r6,8004c30 <_dtoa_r+0x10a4>
 800462c:	0027883a 	mov	r19,zero
 8004630:	a8800417 	ldw	r2,16(r21)
 8004634:	05c00804 	movi	r23,32
 8004638:	10800104 	addi	r2,r2,4
 800463c:	1085883a 	add	r2,r2,r2
 8004640:	1085883a 	add	r2,r2,r2
 8004644:	a885883a 	add	r2,r21,r2
 8004648:	11000017 	ldw	r4,0(r2)
 800464c:	80060440 	call	8006044 <__hi0bits>
 8004650:	b885c83a 	sub	r2,r23,r2
 8004654:	1585883a 	add	r2,r2,r22
 8004658:	108007cc 	andi	r2,r2,31
 800465c:	1000b326 	beq	r2,zero,800492c <_dtoa_r+0xda0>
 8004660:	00c00804 	movi	r3,32
 8004664:	1887c83a 	sub	r3,r3,r2
 8004668:	01000104 	movi	r4,4
 800466c:	20c2cd0e 	bge	r4,r3,80051a4 <_dtoa_r+0x1618>
 8004670:	00c00704 	movi	r3,28
 8004674:	1885c83a 	sub	r2,r3,r2
 8004678:	d8c00817 	ldw	r3,32(sp)
 800467c:	a0a9883a 	add	r20,r20,r2
 8004680:	b0ad883a 	add	r22,r22,r2
 8004684:	1887883a 	add	r3,r3,r2
 8004688:	d8c00815 	stw	r3,32(sp)
 800468c:	d9800817 	ldw	r6,32(sp)
 8004690:	0180040e 	bge	zero,r6,80046a4 <_dtoa_r+0xb18>
 8004694:	800b883a 	mov	r5,r16
 8004698:	e009883a 	mov	r4,fp
 800469c:	80065640 	call	8006564 <__lshift>
 80046a0:	1021883a 	mov	r16,r2
 80046a4:	0580050e 	bge	zero,r22,80046bc <_dtoa_r+0xb30>
 80046a8:	a80b883a 	mov	r5,r21
 80046ac:	b00d883a 	mov	r6,r22
 80046b0:	e009883a 	mov	r4,fp
 80046b4:	80065640 	call	8006564 <__lshift>
 80046b8:	102b883a 	mov	r21,r2
 80046bc:	d9c00e17 	ldw	r7,56(sp)
 80046c0:	3801211e 	bne	r7,zero,8004b48 <_dtoa_r+0xfbc>
 80046c4:	d9800617 	ldw	r6,24(sp)
 80046c8:	0181380e 	bge	zero,r6,8004bac <_dtoa_r+0x1020>
 80046cc:	d8c00b17 	ldw	r3,44(sp)
 80046d0:	1800ab1e 	bne	r3,zero,8004980 <_dtoa_r+0xdf4>
 80046d4:	dc800717 	ldw	r18,28(sp)
 80046d8:	dcc00617 	ldw	r19,24(sp)
 80046dc:	9029883a 	mov	r20,r18
 80046e0:	00000206 	br	80046ec <_dtoa_r+0xb60>
 80046e4:	8005df80 	call	8005df8 <__multadd>
 80046e8:	1021883a 	mov	r16,r2
 80046ec:	a80b883a 	mov	r5,r21
 80046f0:	8009883a 	mov	r4,r16
 80046f4:	80039640 	call	8003964 <quorem>
 80046f8:	10800c04 	addi	r2,r2,48
 80046fc:	90800005 	stb	r2,0(r18)
 8004700:	94800044 	addi	r18,r18,1
 8004704:	9507c83a 	sub	r3,r18,r20
 8004708:	000f883a 	mov	r7,zero
 800470c:	01800284 	movi	r6,10
 8004710:	800b883a 	mov	r5,r16
 8004714:	e009883a 	mov	r4,fp
 8004718:	1cfff216 	blt	r3,r19,80046e4 <__alt_data_end+0xfc0046e4>
 800471c:	1011883a 	mov	r8,r2
 8004720:	d8800617 	ldw	r2,24(sp)
 8004724:	0082370e 	bge	zero,r2,8005004 <_dtoa_r+0x1478>
 8004728:	d9000717 	ldw	r4,28(sp)
 800472c:	0025883a 	mov	r18,zero
 8004730:	20af883a 	add	r23,r4,r2
 8004734:	01800044 	movi	r6,1
 8004738:	800b883a 	mov	r5,r16
 800473c:	e009883a 	mov	r4,fp
 8004740:	da001715 	stw	r8,92(sp)
 8004744:	80065640 	call	8006564 <__lshift>
 8004748:	a80b883a 	mov	r5,r21
 800474c:	1009883a 	mov	r4,r2
 8004750:	d8800915 	stw	r2,36(sp)
 8004754:	80066ac0 	call	80066ac <__mcmp>
 8004758:	da001717 	ldw	r8,92(sp)
 800475c:	0081800e 	bge	zero,r2,8004d60 <_dtoa_r+0x11d4>
 8004760:	b93fffc3 	ldbu	r4,-1(r23)
 8004764:	b8bfffc4 	addi	r2,r23,-1
 8004768:	1007883a 	mov	r3,r2
 800476c:	01800e44 	movi	r6,57
 8004770:	d9c00717 	ldw	r7,28(sp)
 8004774:	00000506 	br	800478c <_dtoa_r+0xc00>
 8004778:	18ffffc4 	addi	r3,r3,-1
 800477c:	11c12326 	beq	r2,r7,8004c0c <_dtoa_r+0x1080>
 8004780:	19000003 	ldbu	r4,0(r3)
 8004784:	102f883a 	mov	r23,r2
 8004788:	10bfffc4 	addi	r2,r2,-1
 800478c:	21403fcc 	andi	r5,r4,255
 8004790:	2940201c 	xori	r5,r5,128
 8004794:	297fe004 	addi	r5,r5,-128
 8004798:	29bff726 	beq	r5,r6,8004778 <__alt_data_end+0xfc004778>
 800479c:	21000044 	addi	r4,r4,1
 80047a0:	11000005 	stb	r4,0(r2)
 80047a4:	a80b883a 	mov	r5,r21
 80047a8:	e009883a 	mov	r4,fp
 80047ac:	8005dd00 	call	8005dd0 <_Bfree>
 80047b0:	883ea026 	beq	r17,zero,8004234 <__alt_data_end+0xfc004234>
 80047b4:	90000426 	beq	r18,zero,80047c8 <_dtoa_r+0xc3c>
 80047b8:	94400326 	beq	r18,r17,80047c8 <_dtoa_r+0xc3c>
 80047bc:	900b883a 	mov	r5,r18
 80047c0:	e009883a 	mov	r4,fp
 80047c4:	8005dd00 	call	8005dd0 <_Bfree>
 80047c8:	880b883a 	mov	r5,r17
 80047cc:	e009883a 	mov	r4,fp
 80047d0:	8005dd00 	call	8005dd0 <_Bfree>
 80047d4:	003e9706 	br	8004234 <__alt_data_end+0xfc004234>
 80047d8:	01800044 	movi	r6,1
 80047dc:	d9800e15 	stw	r6,56(sp)
 80047e0:	003d9606 	br	8003e3c <__alt_data_end+0xfc003e3c>
 80047e4:	d8800817 	ldw	r2,32(sp)
 80047e8:	d8c00517 	ldw	r3,20(sp)
 80047ec:	d8000d15 	stw	zero,52(sp)
 80047f0:	10c5c83a 	sub	r2,r2,r3
 80047f4:	00c9c83a 	sub	r4,zero,r3
 80047f8:	d8800815 	stw	r2,32(sp)
 80047fc:	d9000a15 	stw	r4,40(sp)
 8004800:	003d9706 	br	8003e60 <__alt_data_end+0xfc003e60>
 8004804:	05adc83a 	sub	r22,zero,r22
 8004808:	dd800815 	stw	r22,32(sp)
 800480c:	002d883a 	mov	r22,zero
 8004810:	003d8e06 	br	8003e4c <__alt_data_end+0xfc003e4c>
 8004814:	d9000517 	ldw	r4,20(sp)
 8004818:	800c5740 	call	800c574 <__floatsidf>
 800481c:	100d883a 	mov	r6,r2
 8004820:	180f883a 	mov	r7,r3
 8004824:	a009883a 	mov	r4,r20
 8004828:	880b883a 	mov	r5,r17
 800482c:	800b1340 	call	800b134 <__eqdf2>
 8004830:	103d7126 	beq	r2,zero,8003df8 <__alt_data_end+0xfc003df8>
 8004834:	d9c00517 	ldw	r7,20(sp)
 8004838:	39ffffc4 	addi	r7,r7,-1
 800483c:	d9c00515 	stw	r7,20(sp)
 8004840:	003d6d06 	br	8003df8 <__alt_data_end+0xfc003df8>
 8004844:	dd400a17 	ldw	r21,40(sp)
 8004848:	dd000817 	ldw	r20,32(sp)
 800484c:	0023883a 	mov	r17,zero
 8004850:	003f4806 	br	8004574 <__alt_data_end+0xfc004574>
 8004854:	10e3c83a 	sub	r17,r2,r3
 8004858:	9448983a 	sll	r4,r18,r17
 800485c:	003d3206 	br	8003d28 <__alt_data_end+0xfc003d28>
 8004860:	d8000e15 	stw	zero,56(sp)
 8004864:	003d7506 	br	8003e3c <__alt_data_end+0xfc003e3c>
 8004868:	b005883a 	mov	r2,r22
 800486c:	003f4506 	br	8004584 <__alt_data_end+0xfc004584>
 8004870:	dc000915 	stw	r16,36(sp)
 8004874:	d9800a17 	ldw	r6,40(sp)
 8004878:	d9400917 	ldw	r5,36(sp)
 800487c:	e009883a 	mov	r4,fp
 8004880:	80064240 	call	8006424 <__pow5mult>
 8004884:	1021883a 	mov	r16,r2
 8004888:	003f5a06 	br	80045f4 <__alt_data_end+0xfc0045f4>
 800488c:	01c00044 	movi	r7,1
 8004890:	d9c00b15 	stw	r7,44(sp)
 8004894:	d8802217 	ldw	r2,136(sp)
 8004898:	0081280e 	bge	zero,r2,8004d3c <_dtoa_r+0x11b0>
 800489c:	100d883a 	mov	r6,r2
 80048a0:	1021883a 	mov	r16,r2
 80048a4:	d8800c15 	stw	r2,48(sp)
 80048a8:	d8800615 	stw	r2,24(sp)
 80048ac:	003d8806 	br	8003ed0 <__alt_data_end+0xfc003ed0>
 80048b0:	d8800617 	ldw	r2,24(sp)
 80048b4:	00be9b16 	blt	zero,r2,8004324 <__alt_data_end+0xfc004324>
 80048b8:	10010f1e 	bne	r2,zero,8004cf8 <_dtoa_r+0x116c>
 80048bc:	880b883a 	mov	r5,r17
 80048c0:	000d883a 	mov	r6,zero
 80048c4:	01d00534 	movhi	r7,16404
 80048c8:	8009883a 	mov	r4,r16
 80048cc:	800b38c0 	call	800b38c <__muldf3>
 80048d0:	900d883a 	mov	r6,r18
 80048d4:	980f883a 	mov	r7,r19
 80048d8:	1009883a 	mov	r4,r2
 80048dc:	180b883a 	mov	r5,r3
 80048e0:	800b1bc0 	call	800b1bc <__gedf2>
 80048e4:	002b883a 	mov	r21,zero
 80048e8:	0023883a 	mov	r17,zero
 80048ec:	1000bf16 	blt	r2,zero,8004bec <_dtoa_r+0x1060>
 80048f0:	d9802217 	ldw	r6,136(sp)
 80048f4:	ddc00717 	ldw	r23,28(sp)
 80048f8:	018c303a 	nor	r6,zero,r6
 80048fc:	d9800515 	stw	r6,20(sp)
 8004900:	a80b883a 	mov	r5,r21
 8004904:	e009883a 	mov	r4,fp
 8004908:	8005dd00 	call	8005dd0 <_Bfree>
 800490c:	883e4926 	beq	r17,zero,8004234 <__alt_data_end+0xfc004234>
 8004910:	003fad06 	br	80047c8 <__alt_data_end+0xfc0047c8>
 8004914:	d9c01117 	ldw	r7,68(sp)
 8004918:	3801bc26 	beq	r7,zero,800500c <_dtoa_r+0x1480>
 800491c:	10810cc4 	addi	r2,r2,1075
 8004920:	dd400a17 	ldw	r21,40(sp)
 8004924:	dd000817 	ldw	r20,32(sp)
 8004928:	003f0a06 	br	8004554 <__alt_data_end+0xfc004554>
 800492c:	00800704 	movi	r2,28
 8004930:	d9000817 	ldw	r4,32(sp)
 8004934:	a0a9883a 	add	r20,r20,r2
 8004938:	b0ad883a 	add	r22,r22,r2
 800493c:	2089883a 	add	r4,r4,r2
 8004940:	d9000815 	stw	r4,32(sp)
 8004944:	003f5106 	br	800468c <__alt_data_end+0xfc00468c>
 8004948:	d8c00317 	ldw	r3,12(sp)
 800494c:	b8c1fc0e 	bge	r23,r3,8005140 <_dtoa_r+0x15b4>
 8004950:	0027883a 	mov	r19,zero
 8004954:	b805883a 	mov	r2,r23
 8004958:	003f3e06 	br	8004654 <__alt_data_end+0xfc004654>
 800495c:	880b883a 	mov	r5,r17
 8004960:	e009883a 	mov	r4,fp
 8004964:	000f883a 	mov	r7,zero
 8004968:	01800284 	movi	r6,10
 800496c:	8005df80 	call	8005df8 <__multadd>
 8004970:	d9000c17 	ldw	r4,48(sp)
 8004974:	1023883a 	mov	r17,r2
 8004978:	0102040e 	bge	zero,r4,800518c <_dtoa_r+0x1600>
 800497c:	d9000615 	stw	r4,24(sp)
 8004980:	0500050e 	bge	zero,r20,8004998 <_dtoa_r+0xe0c>
 8004984:	880b883a 	mov	r5,r17
 8004988:	a00d883a 	mov	r6,r20
 800498c:	e009883a 	mov	r4,fp
 8004990:	80065640 	call	8006564 <__lshift>
 8004994:	1023883a 	mov	r17,r2
 8004998:	9801241e 	bne	r19,zero,8004e2c <_dtoa_r+0x12a0>
 800499c:	8829883a 	mov	r20,r17
 80049a0:	d9000617 	ldw	r4,24(sp)
 80049a4:	dcc00717 	ldw	r19,28(sp)
 80049a8:	9480004c 	andi	r18,r18,1
 80049ac:	20bfffc4 	addi	r2,r4,-1
 80049b0:	9885883a 	add	r2,r19,r2
 80049b4:	d8800415 	stw	r2,16(sp)
 80049b8:	dc800615 	stw	r18,24(sp)
 80049bc:	a80b883a 	mov	r5,r21
 80049c0:	8009883a 	mov	r4,r16
 80049c4:	80039640 	call	8003964 <quorem>
 80049c8:	880b883a 	mov	r5,r17
 80049cc:	8009883a 	mov	r4,r16
 80049d0:	102f883a 	mov	r23,r2
 80049d4:	80066ac0 	call	80066ac <__mcmp>
 80049d8:	a80b883a 	mov	r5,r21
 80049dc:	a00d883a 	mov	r6,r20
 80049e0:	e009883a 	mov	r4,fp
 80049e4:	102d883a 	mov	r22,r2
 80049e8:	800670c0 	call	800670c <__mdiff>
 80049ec:	1007883a 	mov	r3,r2
 80049f0:	10800317 	ldw	r2,12(r2)
 80049f4:	bc800c04 	addi	r18,r23,48
 80049f8:	180b883a 	mov	r5,r3
 80049fc:	10004e1e 	bne	r2,zero,8004b38 <_dtoa_r+0xfac>
 8004a00:	8009883a 	mov	r4,r16
 8004a04:	d8c01615 	stw	r3,88(sp)
 8004a08:	80066ac0 	call	80066ac <__mcmp>
 8004a0c:	d8c01617 	ldw	r3,88(sp)
 8004a10:	e009883a 	mov	r4,fp
 8004a14:	d8801615 	stw	r2,88(sp)
 8004a18:	180b883a 	mov	r5,r3
 8004a1c:	8005dd00 	call	8005dd0 <_Bfree>
 8004a20:	d8801617 	ldw	r2,88(sp)
 8004a24:	1000041e 	bne	r2,zero,8004a38 <_dtoa_r+0xeac>
 8004a28:	d9800317 	ldw	r6,12(sp)
 8004a2c:	3000021e 	bne	r6,zero,8004a38 <_dtoa_r+0xeac>
 8004a30:	d8c00617 	ldw	r3,24(sp)
 8004a34:	18003726 	beq	r3,zero,8004b14 <_dtoa_r+0xf88>
 8004a38:	b0002016 	blt	r22,zero,8004abc <_dtoa_r+0xf30>
 8004a3c:	b000041e 	bne	r22,zero,8004a50 <_dtoa_r+0xec4>
 8004a40:	d9000317 	ldw	r4,12(sp)
 8004a44:	2000021e 	bne	r4,zero,8004a50 <_dtoa_r+0xec4>
 8004a48:	d8c00617 	ldw	r3,24(sp)
 8004a4c:	18001b26 	beq	r3,zero,8004abc <_dtoa_r+0xf30>
 8004a50:	00810716 	blt	zero,r2,8004e70 <_dtoa_r+0x12e4>
 8004a54:	d8c00417 	ldw	r3,16(sp)
 8004a58:	9d800044 	addi	r22,r19,1
 8004a5c:	9c800005 	stb	r18,0(r19)
 8004a60:	b02f883a 	mov	r23,r22
 8004a64:	98c10626 	beq	r19,r3,8004e80 <_dtoa_r+0x12f4>
 8004a68:	800b883a 	mov	r5,r16
 8004a6c:	000f883a 	mov	r7,zero
 8004a70:	01800284 	movi	r6,10
 8004a74:	e009883a 	mov	r4,fp
 8004a78:	8005df80 	call	8005df8 <__multadd>
 8004a7c:	1021883a 	mov	r16,r2
 8004a80:	000f883a 	mov	r7,zero
 8004a84:	01800284 	movi	r6,10
 8004a88:	880b883a 	mov	r5,r17
 8004a8c:	e009883a 	mov	r4,fp
 8004a90:	8d002526 	beq	r17,r20,8004b28 <_dtoa_r+0xf9c>
 8004a94:	8005df80 	call	8005df8 <__multadd>
 8004a98:	a00b883a 	mov	r5,r20
 8004a9c:	000f883a 	mov	r7,zero
 8004aa0:	01800284 	movi	r6,10
 8004aa4:	e009883a 	mov	r4,fp
 8004aa8:	1023883a 	mov	r17,r2
 8004aac:	8005df80 	call	8005df8 <__multadd>
 8004ab0:	1029883a 	mov	r20,r2
 8004ab4:	b027883a 	mov	r19,r22
 8004ab8:	003fc006 	br	80049bc <__alt_data_end+0xfc0049bc>
 8004abc:	9011883a 	mov	r8,r18
 8004ac0:	00800e0e 	bge	zero,r2,8004afc <_dtoa_r+0xf70>
 8004ac4:	800b883a 	mov	r5,r16
 8004ac8:	01800044 	movi	r6,1
 8004acc:	e009883a 	mov	r4,fp
 8004ad0:	da001715 	stw	r8,92(sp)
 8004ad4:	80065640 	call	8006564 <__lshift>
 8004ad8:	a80b883a 	mov	r5,r21
 8004adc:	1009883a 	mov	r4,r2
 8004ae0:	1021883a 	mov	r16,r2
 8004ae4:	80066ac0 	call	80066ac <__mcmp>
 8004ae8:	da001717 	ldw	r8,92(sp)
 8004aec:	0081960e 	bge	zero,r2,8005148 <_dtoa_r+0x15bc>
 8004af0:	00800e44 	movi	r2,57
 8004af4:	40817026 	beq	r8,r2,80050b8 <_dtoa_r+0x152c>
 8004af8:	ba000c44 	addi	r8,r23,49
 8004afc:	8825883a 	mov	r18,r17
 8004b00:	9dc00044 	addi	r23,r19,1
 8004b04:	9a000005 	stb	r8,0(r19)
 8004b08:	a023883a 	mov	r17,r20
 8004b0c:	dc000915 	stw	r16,36(sp)
 8004b10:	003f2406 	br	80047a4 <__alt_data_end+0xfc0047a4>
 8004b14:	00800e44 	movi	r2,57
 8004b18:	9011883a 	mov	r8,r18
 8004b1c:	90816626 	beq	r18,r2,80050b8 <_dtoa_r+0x152c>
 8004b20:	05bff516 	blt	zero,r22,8004af8 <__alt_data_end+0xfc004af8>
 8004b24:	003ff506 	br	8004afc <__alt_data_end+0xfc004afc>
 8004b28:	8005df80 	call	8005df8 <__multadd>
 8004b2c:	1023883a 	mov	r17,r2
 8004b30:	1029883a 	mov	r20,r2
 8004b34:	003fdf06 	br	8004ab4 <__alt_data_end+0xfc004ab4>
 8004b38:	e009883a 	mov	r4,fp
 8004b3c:	8005dd00 	call	8005dd0 <_Bfree>
 8004b40:	00800044 	movi	r2,1
 8004b44:	003fbc06 	br	8004a38 <__alt_data_end+0xfc004a38>
 8004b48:	a80b883a 	mov	r5,r21
 8004b4c:	8009883a 	mov	r4,r16
 8004b50:	80066ac0 	call	80066ac <__mcmp>
 8004b54:	103edb0e 	bge	r2,zero,80046c4 <__alt_data_end+0xfc0046c4>
 8004b58:	800b883a 	mov	r5,r16
 8004b5c:	000f883a 	mov	r7,zero
 8004b60:	01800284 	movi	r6,10
 8004b64:	e009883a 	mov	r4,fp
 8004b68:	8005df80 	call	8005df8 <__multadd>
 8004b6c:	1021883a 	mov	r16,r2
 8004b70:	d8800517 	ldw	r2,20(sp)
 8004b74:	d8c00b17 	ldw	r3,44(sp)
 8004b78:	10bfffc4 	addi	r2,r2,-1
 8004b7c:	d8800515 	stw	r2,20(sp)
 8004b80:	183f761e 	bne	r3,zero,800495c <__alt_data_end+0xfc00495c>
 8004b84:	d9000c17 	ldw	r4,48(sp)
 8004b88:	0101730e 	bge	zero,r4,8005158 <_dtoa_r+0x15cc>
 8004b8c:	d9000615 	stw	r4,24(sp)
 8004b90:	003ed006 	br	80046d4 <__alt_data_end+0xfc0046d4>
 8004b94:	00800084 	movi	r2,2
 8004b98:	3081861e 	bne	r6,r2,80051b4 <_dtoa_r+0x1628>
 8004b9c:	d8000b15 	stw	zero,44(sp)
 8004ba0:	003f3c06 	br	8004894 <__alt_data_end+0xfc004894>
 8004ba4:	dc000917 	ldw	r16,36(sp)
 8004ba8:	003e9206 	br	80045f4 <__alt_data_end+0xfc0045f4>
 8004bac:	d9c00317 	ldw	r7,12(sp)
 8004bb0:	00800084 	movi	r2,2
 8004bb4:	11fec50e 	bge	r2,r7,80046cc <__alt_data_end+0xfc0046cc>
 8004bb8:	d9000617 	ldw	r4,24(sp)
 8004bbc:	20013c1e 	bne	r4,zero,80050b0 <_dtoa_r+0x1524>
 8004bc0:	a80b883a 	mov	r5,r21
 8004bc4:	000f883a 	mov	r7,zero
 8004bc8:	01800144 	movi	r6,5
 8004bcc:	e009883a 	mov	r4,fp
 8004bd0:	8005df80 	call	8005df8 <__multadd>
 8004bd4:	100b883a 	mov	r5,r2
 8004bd8:	8009883a 	mov	r4,r16
 8004bdc:	102b883a 	mov	r21,r2
 8004be0:	80066ac0 	call	80066ac <__mcmp>
 8004be4:	dc000915 	stw	r16,36(sp)
 8004be8:	00bf410e 	bge	zero,r2,80048f0 <__alt_data_end+0xfc0048f0>
 8004bec:	d9c00717 	ldw	r7,28(sp)
 8004bf0:	00800c44 	movi	r2,49
 8004bf4:	38800005 	stb	r2,0(r7)
 8004bf8:	d8800517 	ldw	r2,20(sp)
 8004bfc:	3dc00044 	addi	r23,r7,1
 8004c00:	10800044 	addi	r2,r2,1
 8004c04:	d8800515 	stw	r2,20(sp)
 8004c08:	003f3d06 	br	8004900 <__alt_data_end+0xfc004900>
 8004c0c:	d9800517 	ldw	r6,20(sp)
 8004c10:	d9c00717 	ldw	r7,28(sp)
 8004c14:	00800c44 	movi	r2,49
 8004c18:	31800044 	addi	r6,r6,1
 8004c1c:	d9800515 	stw	r6,20(sp)
 8004c20:	38800005 	stb	r2,0(r7)
 8004c24:	003edf06 	br	80047a4 <__alt_data_end+0xfc0047a4>
 8004c28:	d8000b15 	stw	zero,44(sp)
 8004c2c:	003c9f06 	br	8003eac <__alt_data_end+0xfc003eac>
 8004c30:	903e7e1e 	bne	r18,zero,800462c <__alt_data_end+0xfc00462c>
 8004c34:	00800434 	movhi	r2,16
 8004c38:	10bfffc4 	addi	r2,r2,-1
 8004c3c:	9884703a 	and	r2,r19,r2
 8004c40:	1000ea1e 	bne	r2,zero,8004fec <_dtoa_r+0x1460>
 8004c44:	9cdffc2c 	andhi	r19,r19,32752
 8004c48:	9800e826 	beq	r19,zero,8004fec <_dtoa_r+0x1460>
 8004c4c:	d9c00817 	ldw	r7,32(sp)
 8004c50:	b5800044 	addi	r22,r22,1
 8004c54:	04c00044 	movi	r19,1
 8004c58:	39c00044 	addi	r7,r7,1
 8004c5c:	d9c00815 	stw	r7,32(sp)
 8004c60:	d8800d17 	ldw	r2,52(sp)
 8004c64:	103e721e 	bne	r2,zero,8004630 <__alt_data_end+0xfc004630>
 8004c68:	00800044 	movi	r2,1
 8004c6c:	003e7906 	br	8004654 <__alt_data_end+0xfc004654>
 8004c70:	8009883a 	mov	r4,r16
 8004c74:	800c5740 	call	800c574 <__floatsidf>
 8004c78:	d9800f17 	ldw	r6,60(sp)
 8004c7c:	d9c01017 	ldw	r7,64(sp)
 8004c80:	1009883a 	mov	r4,r2
 8004c84:	180b883a 	mov	r5,r3
 8004c88:	800b38c0 	call	800b38c <__muldf3>
 8004c8c:	000d883a 	mov	r6,zero
 8004c90:	01d00734 	movhi	r7,16412
 8004c94:	1009883a 	mov	r4,r2
 8004c98:	180b883a 	mov	r5,r3
 8004c9c:	8009eb80 	call	8009eb8 <__adddf3>
 8004ca0:	047f3034 	movhi	r17,64704
 8004ca4:	1021883a 	mov	r16,r2
 8004ca8:	1c63883a 	add	r17,r3,r17
 8004cac:	d9000f17 	ldw	r4,60(sp)
 8004cb0:	d9401017 	ldw	r5,64(sp)
 8004cb4:	000d883a 	mov	r6,zero
 8004cb8:	01d00534 	movhi	r7,16404
 8004cbc:	800bbf80 	call	800bbf8 <__subdf3>
 8004cc0:	800d883a 	mov	r6,r16
 8004cc4:	880f883a 	mov	r7,r17
 8004cc8:	1009883a 	mov	r4,r2
 8004ccc:	180b883a 	mov	r5,r3
 8004cd0:	102b883a 	mov	r21,r2
 8004cd4:	1829883a 	mov	r20,r3
 8004cd8:	800b1bc0 	call	800b1bc <__gedf2>
 8004cdc:	00806c16 	blt	zero,r2,8004e90 <_dtoa_r+0x1304>
 8004ce0:	89e0003c 	xorhi	r7,r17,32768
 8004ce4:	800d883a 	mov	r6,r16
 8004ce8:	a809883a 	mov	r4,r21
 8004cec:	a00b883a 	mov	r5,r20
 8004cf0:	800b2980 	call	800b298 <__ledf2>
 8004cf4:	103d7e0e 	bge	r2,zero,80042f0 <__alt_data_end+0xfc0042f0>
 8004cf8:	002b883a 	mov	r21,zero
 8004cfc:	0023883a 	mov	r17,zero
 8004d00:	003efb06 	br	80048f0 <__alt_data_end+0xfc0048f0>
 8004d04:	d8800717 	ldw	r2,28(sp)
 8004d08:	003bd006 	br	8003c4c <__alt_data_end+0xfc003c4c>
 8004d0c:	d9000a17 	ldw	r4,40(sp)
 8004d10:	d9800d17 	ldw	r6,52(sp)
 8004d14:	dd400a15 	stw	r21,40(sp)
 8004d18:	a905c83a 	sub	r2,r21,r4
 8004d1c:	308d883a 	add	r6,r6,r2
 8004d20:	d9800d15 	stw	r6,52(sp)
 8004d24:	002b883a 	mov	r21,zero
 8004d28:	003e0606 	br	8004544 <__alt_data_end+0xfc004544>
 8004d2c:	9023883a 	mov	r17,r18
 8004d30:	9829883a 	mov	r20,r19
 8004d34:	04000084 	movi	r16,2
 8004d38:	003c9206 	br	8003f84 <__alt_data_end+0xfc003f84>
 8004d3c:	04000044 	movi	r16,1
 8004d40:	dc000c15 	stw	r16,48(sp)
 8004d44:	dc000615 	stw	r16,24(sp)
 8004d48:	dc002215 	stw	r16,136(sp)
 8004d4c:	e0001115 	stw	zero,68(fp)
 8004d50:	000b883a 	mov	r5,zero
 8004d54:	003c6906 	br	8003efc <__alt_data_end+0xfc003efc>
 8004d58:	3021883a 	mov	r16,r6
 8004d5c:	003ffb06 	br	8004d4c <__alt_data_end+0xfc004d4c>
 8004d60:	1000021e 	bne	r2,zero,8004d6c <_dtoa_r+0x11e0>
 8004d64:	4200004c 	andi	r8,r8,1
 8004d68:	403e7d1e 	bne	r8,zero,8004760 <__alt_data_end+0xfc004760>
 8004d6c:	01000c04 	movi	r4,48
 8004d70:	00000106 	br	8004d78 <_dtoa_r+0x11ec>
 8004d74:	102f883a 	mov	r23,r2
 8004d78:	b8bfffc4 	addi	r2,r23,-1
 8004d7c:	10c00007 	ldb	r3,0(r2)
 8004d80:	193ffc26 	beq	r3,r4,8004d74 <__alt_data_end+0xfc004d74>
 8004d84:	003e8706 	br	80047a4 <__alt_data_end+0xfc0047a4>
 8004d88:	d8800517 	ldw	r2,20(sp)
 8004d8c:	00a3c83a 	sub	r17,zero,r2
 8004d90:	8800a426 	beq	r17,zero,8005024 <_dtoa_r+0x1498>
 8004d94:	888003cc 	andi	r2,r17,15
 8004d98:	100490fa 	slli	r2,r2,3
 8004d9c:	00c20074 	movhi	r3,2049
 8004da0:	18fb2c04 	addi	r3,r3,-4944
 8004da4:	1885883a 	add	r2,r3,r2
 8004da8:	11800017 	ldw	r6,0(r2)
 8004dac:	11c00117 	ldw	r7,4(r2)
 8004db0:	9009883a 	mov	r4,r18
 8004db4:	980b883a 	mov	r5,r19
 8004db8:	8823d13a 	srai	r17,r17,4
 8004dbc:	800b38c0 	call	800b38c <__muldf3>
 8004dc0:	d8800f15 	stw	r2,60(sp)
 8004dc4:	d8c01015 	stw	r3,64(sp)
 8004dc8:	8800e826 	beq	r17,zero,800516c <_dtoa_r+0x15e0>
 8004dcc:	05020074 	movhi	r20,2049
 8004dd0:	a53b2204 	addi	r20,r20,-4984
 8004dd4:	04000084 	movi	r16,2
 8004dd8:	8980004c 	andi	r6,r17,1
 8004ddc:	1009883a 	mov	r4,r2
 8004de0:	8823d07a 	srai	r17,r17,1
 8004de4:	180b883a 	mov	r5,r3
 8004de8:	30000426 	beq	r6,zero,8004dfc <_dtoa_r+0x1270>
 8004dec:	a1800017 	ldw	r6,0(r20)
 8004df0:	a1c00117 	ldw	r7,4(r20)
 8004df4:	84000044 	addi	r16,r16,1
 8004df8:	800b38c0 	call	800b38c <__muldf3>
 8004dfc:	a5000204 	addi	r20,r20,8
 8004e00:	883ff51e 	bne	r17,zero,8004dd8 <__alt_data_end+0xfc004dd8>
 8004e04:	d8800f15 	stw	r2,60(sp)
 8004e08:	d8c01015 	stw	r3,64(sp)
 8004e0c:	003c7606 	br	8003fe8 <__alt_data_end+0xfc003fe8>
 8004e10:	00c00c04 	movi	r3,48
 8004e14:	10c00005 	stb	r3,0(r2)
 8004e18:	d8c00517 	ldw	r3,20(sp)
 8004e1c:	bd3fffc3 	ldbu	r20,-1(r23)
 8004e20:	18c00044 	addi	r3,r3,1
 8004e24:	d8c00515 	stw	r3,20(sp)
 8004e28:	003db906 	br	8004510 <__alt_data_end+0xfc004510>
 8004e2c:	89400117 	ldw	r5,4(r17)
 8004e30:	e009883a 	mov	r4,fp
 8004e34:	8005d280 	call	8005d28 <_Balloc>
 8004e38:	89800417 	ldw	r6,16(r17)
 8004e3c:	89400304 	addi	r5,r17,12
 8004e40:	11000304 	addi	r4,r2,12
 8004e44:	31800084 	addi	r6,r6,2
 8004e48:	318d883a 	add	r6,r6,r6
 8004e4c:	318d883a 	add	r6,r6,r6
 8004e50:	1027883a 	mov	r19,r2
 8004e54:	8005be00 	call	8005be0 <memcpy>
 8004e58:	01800044 	movi	r6,1
 8004e5c:	980b883a 	mov	r5,r19
 8004e60:	e009883a 	mov	r4,fp
 8004e64:	80065640 	call	8006564 <__lshift>
 8004e68:	1029883a 	mov	r20,r2
 8004e6c:	003ecc06 	br	80049a0 <__alt_data_end+0xfc0049a0>
 8004e70:	00800e44 	movi	r2,57
 8004e74:	90809026 	beq	r18,r2,80050b8 <_dtoa_r+0x152c>
 8004e78:	92000044 	addi	r8,r18,1
 8004e7c:	003f1f06 	br	8004afc <__alt_data_end+0xfc004afc>
 8004e80:	9011883a 	mov	r8,r18
 8004e84:	8825883a 	mov	r18,r17
 8004e88:	a023883a 	mov	r17,r20
 8004e8c:	003e2906 	br	8004734 <__alt_data_end+0xfc004734>
 8004e90:	002b883a 	mov	r21,zero
 8004e94:	0023883a 	mov	r17,zero
 8004e98:	003f5406 	br	8004bec <__alt_data_end+0xfc004bec>
 8004e9c:	61bfffc4 	addi	r6,r12,-1
 8004ea0:	300490fa 	slli	r2,r6,3
 8004ea4:	00c20074 	movhi	r3,2049
 8004ea8:	18fb2c04 	addi	r3,r3,-4944
 8004eac:	1885883a 	add	r2,r3,r2
 8004eb0:	11000017 	ldw	r4,0(r2)
 8004eb4:	11400117 	ldw	r5,4(r2)
 8004eb8:	d8800717 	ldw	r2,28(sp)
 8004ebc:	880f883a 	mov	r7,r17
 8004ec0:	d9801215 	stw	r6,72(sp)
 8004ec4:	800d883a 	mov	r6,r16
 8004ec8:	db001615 	stw	r12,88(sp)
 8004ecc:	15c00044 	addi	r23,r2,1
 8004ed0:	800b38c0 	call	800b38c <__muldf3>
 8004ed4:	d9401017 	ldw	r5,64(sp)
 8004ed8:	d9000f17 	ldw	r4,60(sp)
 8004edc:	d8c01515 	stw	r3,84(sp)
 8004ee0:	d8801415 	stw	r2,80(sp)
 8004ee4:	800c4f40 	call	800c4f4 <__fixdfsi>
 8004ee8:	1009883a 	mov	r4,r2
 8004eec:	1021883a 	mov	r16,r2
 8004ef0:	800c5740 	call	800c574 <__floatsidf>
 8004ef4:	d9000f17 	ldw	r4,60(sp)
 8004ef8:	d9401017 	ldw	r5,64(sp)
 8004efc:	100d883a 	mov	r6,r2
 8004f00:	180f883a 	mov	r7,r3
 8004f04:	800bbf80 	call	800bbf8 <__subdf3>
 8004f08:	1829883a 	mov	r20,r3
 8004f0c:	d8c00717 	ldw	r3,28(sp)
 8004f10:	84000c04 	addi	r16,r16,48
 8004f14:	1023883a 	mov	r17,r2
 8004f18:	1c000005 	stb	r16,0(r3)
 8004f1c:	db001617 	ldw	r12,88(sp)
 8004f20:	00800044 	movi	r2,1
 8004f24:	60802226 	beq	r12,r2,8004fb0 <_dtoa_r+0x1424>
 8004f28:	d9c00717 	ldw	r7,28(sp)
 8004f2c:	8805883a 	mov	r2,r17
 8004f30:	b82b883a 	mov	r21,r23
 8004f34:	3b19883a 	add	r12,r7,r12
 8004f38:	6023883a 	mov	r17,r12
 8004f3c:	a007883a 	mov	r3,r20
 8004f40:	dc800f15 	stw	r18,60(sp)
 8004f44:	000d883a 	mov	r6,zero
 8004f48:	01d00934 	movhi	r7,16420
 8004f4c:	1009883a 	mov	r4,r2
 8004f50:	180b883a 	mov	r5,r3
 8004f54:	800b38c0 	call	800b38c <__muldf3>
 8004f58:	180b883a 	mov	r5,r3
 8004f5c:	1009883a 	mov	r4,r2
 8004f60:	1829883a 	mov	r20,r3
 8004f64:	1025883a 	mov	r18,r2
 8004f68:	800c4f40 	call	800c4f4 <__fixdfsi>
 8004f6c:	1009883a 	mov	r4,r2
 8004f70:	1021883a 	mov	r16,r2
 8004f74:	800c5740 	call	800c574 <__floatsidf>
 8004f78:	100d883a 	mov	r6,r2
 8004f7c:	180f883a 	mov	r7,r3
 8004f80:	9009883a 	mov	r4,r18
 8004f84:	a00b883a 	mov	r5,r20
 8004f88:	84000c04 	addi	r16,r16,48
 8004f8c:	800bbf80 	call	800bbf8 <__subdf3>
 8004f90:	ad400044 	addi	r21,r21,1
 8004f94:	ac3fffc5 	stb	r16,-1(r21)
 8004f98:	ac7fea1e 	bne	r21,r17,8004f44 <__alt_data_end+0xfc004f44>
 8004f9c:	1023883a 	mov	r17,r2
 8004fa0:	d8801217 	ldw	r2,72(sp)
 8004fa4:	dc800f17 	ldw	r18,60(sp)
 8004fa8:	1829883a 	mov	r20,r3
 8004fac:	b8af883a 	add	r23,r23,r2
 8004fb0:	d9001417 	ldw	r4,80(sp)
 8004fb4:	d9401517 	ldw	r5,84(sp)
 8004fb8:	000d883a 	mov	r6,zero
 8004fbc:	01cff834 	movhi	r7,16352
 8004fc0:	8009eb80 	call	8009eb8 <__adddf3>
 8004fc4:	880d883a 	mov	r6,r17
 8004fc8:	a00f883a 	mov	r7,r20
 8004fcc:	1009883a 	mov	r4,r2
 8004fd0:	180b883a 	mov	r5,r3
 8004fd4:	800b2980 	call	800b298 <__ledf2>
 8004fd8:	10003e0e 	bge	r2,zero,80050d4 <_dtoa_r+0x1548>
 8004fdc:	d9001317 	ldw	r4,76(sp)
 8004fe0:	bd3fffc3 	ldbu	r20,-1(r23)
 8004fe4:	d9000515 	stw	r4,20(sp)
 8004fe8:	003d3b06 	br	80044d8 <__alt_data_end+0xfc0044d8>
 8004fec:	0027883a 	mov	r19,zero
 8004ff0:	003f1b06 	br	8004c60 <__alt_data_end+0xfc004c60>
 8004ff4:	d8800817 	ldw	r2,32(sp)
 8004ff8:	11e9c83a 	sub	r20,r2,r7
 8004ffc:	0005883a 	mov	r2,zero
 8005000:	003d5406 	br	8004554 <__alt_data_end+0xfc004554>
 8005004:	00800044 	movi	r2,1
 8005008:	003dc706 	br	8004728 <__alt_data_end+0xfc004728>
 800500c:	d8c00217 	ldw	r3,8(sp)
 8005010:	00800d84 	movi	r2,54
 8005014:	dd400a17 	ldw	r21,40(sp)
 8005018:	10c5c83a 	sub	r2,r2,r3
 800501c:	dd000817 	ldw	r20,32(sp)
 8005020:	003d4c06 	br	8004554 <__alt_data_end+0xfc004554>
 8005024:	dc800f15 	stw	r18,60(sp)
 8005028:	dcc01015 	stw	r19,64(sp)
 800502c:	04000084 	movi	r16,2
 8005030:	003bed06 	br	8003fe8 <__alt_data_end+0xfc003fe8>
 8005034:	d9000617 	ldw	r4,24(sp)
 8005038:	203f0d26 	beq	r4,zero,8004c70 <__alt_data_end+0xfc004c70>
 800503c:	d9800c17 	ldw	r6,48(sp)
 8005040:	01bcab0e 	bge	zero,r6,80042f0 <__alt_data_end+0xfc0042f0>
 8005044:	d9401017 	ldw	r5,64(sp)
 8005048:	d9000f17 	ldw	r4,60(sp)
 800504c:	000d883a 	mov	r6,zero
 8005050:	01d00934 	movhi	r7,16420
 8005054:	800b38c0 	call	800b38c <__muldf3>
 8005058:	81000044 	addi	r4,r16,1
 800505c:	d8800f15 	stw	r2,60(sp)
 8005060:	d8c01015 	stw	r3,64(sp)
 8005064:	800c5740 	call	800c574 <__floatsidf>
 8005068:	d9800f17 	ldw	r6,60(sp)
 800506c:	d9c01017 	ldw	r7,64(sp)
 8005070:	1009883a 	mov	r4,r2
 8005074:	180b883a 	mov	r5,r3
 8005078:	800b38c0 	call	800b38c <__muldf3>
 800507c:	01d00734 	movhi	r7,16412
 8005080:	000d883a 	mov	r6,zero
 8005084:	1009883a 	mov	r4,r2
 8005088:	180b883a 	mov	r5,r3
 800508c:	8009eb80 	call	8009eb8 <__adddf3>
 8005090:	d9c00517 	ldw	r7,20(sp)
 8005094:	047f3034 	movhi	r17,64704
 8005098:	1021883a 	mov	r16,r2
 800509c:	39ffffc4 	addi	r7,r7,-1
 80050a0:	d9c01315 	stw	r7,76(sp)
 80050a4:	1c63883a 	add	r17,r3,r17
 80050a8:	db000c17 	ldw	r12,48(sp)
 80050ac:	003bea06 	br	8004058 <__alt_data_end+0xfc004058>
 80050b0:	dc000915 	stw	r16,36(sp)
 80050b4:	003e0e06 	br	80048f0 <__alt_data_end+0xfc0048f0>
 80050b8:	01000e44 	movi	r4,57
 80050bc:	8825883a 	mov	r18,r17
 80050c0:	9dc00044 	addi	r23,r19,1
 80050c4:	99000005 	stb	r4,0(r19)
 80050c8:	a023883a 	mov	r17,r20
 80050cc:	dc000915 	stw	r16,36(sp)
 80050d0:	003da406 	br	8004764 <__alt_data_end+0xfc004764>
 80050d4:	d9801417 	ldw	r6,80(sp)
 80050d8:	d9c01517 	ldw	r7,84(sp)
 80050dc:	0009883a 	mov	r4,zero
 80050e0:	014ff834 	movhi	r5,16352
 80050e4:	800bbf80 	call	800bbf8 <__subdf3>
 80050e8:	880d883a 	mov	r6,r17
 80050ec:	a00f883a 	mov	r7,r20
 80050f0:	1009883a 	mov	r4,r2
 80050f4:	180b883a 	mov	r5,r3
 80050f8:	800b1bc0 	call	800b1bc <__gedf2>
 80050fc:	00bc7c0e 	bge	zero,r2,80042f0 <__alt_data_end+0xfc0042f0>
 8005100:	01000c04 	movi	r4,48
 8005104:	00000106 	br	800510c <_dtoa_r+0x1580>
 8005108:	102f883a 	mov	r23,r2
 800510c:	b8bfffc4 	addi	r2,r23,-1
 8005110:	10c00007 	ldb	r3,0(r2)
 8005114:	193ffc26 	beq	r3,r4,8005108 <__alt_data_end+0xfc005108>
 8005118:	d9801317 	ldw	r6,76(sp)
 800511c:	d9800515 	stw	r6,20(sp)
 8005120:	003c4406 	br	8004234 <__alt_data_end+0xfc004234>
 8005124:	d9801317 	ldw	r6,76(sp)
 8005128:	d9800515 	stw	r6,20(sp)
 800512c:	003cea06 	br	80044d8 <__alt_data_end+0xfc0044d8>
 8005130:	dd800f17 	ldw	r22,60(sp)
 8005134:	dcc01017 	ldw	r19,64(sp)
 8005138:	dc801217 	ldw	r18,72(sp)
 800513c:	003c6c06 	br	80042f0 <__alt_data_end+0xfc0042f0>
 8005140:	903e031e 	bne	r18,zero,8004950 <__alt_data_end+0xfc004950>
 8005144:	003ebb06 	br	8004c34 <__alt_data_end+0xfc004c34>
 8005148:	103e6c1e 	bne	r2,zero,8004afc <__alt_data_end+0xfc004afc>
 800514c:	4080004c 	andi	r2,r8,1
 8005150:	103e6a26 	beq	r2,zero,8004afc <__alt_data_end+0xfc004afc>
 8005154:	003e6606 	br	8004af0 <__alt_data_end+0xfc004af0>
 8005158:	d8c00317 	ldw	r3,12(sp)
 800515c:	00800084 	movi	r2,2
 8005160:	10c02916 	blt	r2,r3,8005208 <_dtoa_r+0x167c>
 8005164:	d9000c17 	ldw	r4,48(sp)
 8005168:	003e8806 	br	8004b8c <__alt_data_end+0xfc004b8c>
 800516c:	04000084 	movi	r16,2
 8005170:	003b9d06 	br	8003fe8 <__alt_data_end+0xfc003fe8>
 8005174:	d9001317 	ldw	r4,76(sp)
 8005178:	d9000515 	stw	r4,20(sp)
 800517c:	003cd606 	br	80044d8 <__alt_data_end+0xfc0044d8>
 8005180:	d8801317 	ldw	r2,76(sp)
 8005184:	d8800515 	stw	r2,20(sp)
 8005188:	003c2a06 	br	8004234 <__alt_data_end+0xfc004234>
 800518c:	d9800317 	ldw	r6,12(sp)
 8005190:	00800084 	movi	r2,2
 8005194:	11801516 	blt	r2,r6,80051ec <_dtoa_r+0x1660>
 8005198:	d9c00c17 	ldw	r7,48(sp)
 800519c:	d9c00615 	stw	r7,24(sp)
 80051a0:	003df706 	br	8004980 <__alt_data_end+0xfc004980>
 80051a4:	193d3926 	beq	r3,r4,800468c <__alt_data_end+0xfc00468c>
 80051a8:	00c00f04 	movi	r3,60
 80051ac:	1885c83a 	sub	r2,r3,r2
 80051b0:	003ddf06 	br	8004930 <__alt_data_end+0xfc004930>
 80051b4:	e009883a 	mov	r4,fp
 80051b8:	e0001115 	stw	zero,68(fp)
 80051bc:	000b883a 	mov	r5,zero
 80051c0:	8005d280 	call	8005d28 <_Balloc>
 80051c4:	d8800715 	stw	r2,28(sp)
 80051c8:	d8c00717 	ldw	r3,28(sp)
 80051cc:	00bfffc4 	movi	r2,-1
 80051d0:	01000044 	movi	r4,1
 80051d4:	d8800c15 	stw	r2,48(sp)
 80051d8:	e0c01015 	stw	r3,64(fp)
 80051dc:	d9000b15 	stw	r4,44(sp)
 80051e0:	d8800615 	stw	r2,24(sp)
 80051e4:	d8002215 	stw	zero,136(sp)
 80051e8:	003c4106 	br	80042f0 <__alt_data_end+0xfc0042f0>
 80051ec:	d8c00c17 	ldw	r3,48(sp)
 80051f0:	d8c00615 	stw	r3,24(sp)
 80051f4:	003e7006 	br	8004bb8 <__alt_data_end+0xfc004bb8>
 80051f8:	04400044 	movi	r17,1
 80051fc:	003b2006 	br	8003e80 <__alt_data_end+0xfc003e80>
 8005200:	000b883a 	mov	r5,zero
 8005204:	003b3d06 	br	8003efc <__alt_data_end+0xfc003efc>
 8005208:	d8800c17 	ldw	r2,48(sp)
 800520c:	d8800615 	stw	r2,24(sp)
 8005210:	003e6906 	br	8004bb8 <__alt_data_end+0xfc004bb8>

08005214 <_setlocale_r>:
 8005214:	30001b26 	beq	r6,zero,8005284 <_setlocale_r+0x70>
 8005218:	01420074 	movhi	r5,2049
 800521c:	defffe04 	addi	sp,sp,-8
 8005220:	297b1204 	addi	r5,r5,-5048
 8005224:	3009883a 	mov	r4,r6
 8005228:	dc000015 	stw	r16,0(sp)
 800522c:	dfc00115 	stw	ra,4(sp)
 8005230:	3021883a 	mov	r16,r6
 8005234:	8006ea80 	call	8006ea8 <strcmp>
 8005238:	1000061e 	bne	r2,zero,8005254 <_setlocale_r+0x40>
 800523c:	00820074 	movhi	r2,2049
 8005240:	10bb1104 	addi	r2,r2,-5052
 8005244:	dfc00117 	ldw	ra,4(sp)
 8005248:	dc000017 	ldw	r16,0(sp)
 800524c:	dec00204 	addi	sp,sp,8
 8005250:	f800283a 	ret
 8005254:	01420074 	movhi	r5,2049
 8005258:	297b1104 	addi	r5,r5,-5052
 800525c:	8009883a 	mov	r4,r16
 8005260:	8006ea80 	call	8006ea8 <strcmp>
 8005264:	103ff526 	beq	r2,zero,800523c <__alt_data_end+0xfc00523c>
 8005268:	01420074 	movhi	r5,2049
 800526c:	297afc04 	addi	r5,r5,-5136
 8005270:	8009883a 	mov	r4,r16
 8005274:	8006ea80 	call	8006ea8 <strcmp>
 8005278:	103ff026 	beq	r2,zero,800523c <__alt_data_end+0xfc00523c>
 800527c:	0005883a 	mov	r2,zero
 8005280:	003ff006 	br	8005244 <__alt_data_end+0xfc005244>
 8005284:	00820074 	movhi	r2,2049
 8005288:	10bb1104 	addi	r2,r2,-5052
 800528c:	f800283a 	ret

08005290 <__locale_charset>:
 8005290:	00820074 	movhi	r2,2049
 8005294:	10bd2004 	addi	r2,r2,-2944
 8005298:	f800283a 	ret

0800529c <__locale_mb_cur_max>:
 800529c:	00820074 	movhi	r2,2049
 80052a0:	1082bd04 	addi	r2,r2,2804
 80052a4:	10800017 	ldw	r2,0(r2)
 80052a8:	f800283a 	ret

080052ac <__locale_msgcharset>:
 80052ac:	00820074 	movhi	r2,2049
 80052b0:	10bd1804 	addi	r2,r2,-2976
 80052b4:	f800283a 	ret

080052b8 <__locale_cjk_lang>:
 80052b8:	0005883a 	mov	r2,zero
 80052bc:	f800283a 	ret

080052c0 <_localeconv_r>:
 80052c0:	00820074 	movhi	r2,2049
 80052c4:	10bd2804 	addi	r2,r2,-2912
 80052c8:	f800283a 	ret

080052cc <setlocale>:
 80052cc:	00820074 	movhi	r2,2049
 80052d0:	1082bc04 	addi	r2,r2,2800
 80052d4:	280d883a 	mov	r6,r5
 80052d8:	200b883a 	mov	r5,r4
 80052dc:	11000017 	ldw	r4,0(r2)
 80052e0:	80052141 	jmpi	8005214 <_setlocale_r>

080052e4 <localeconv>:
 80052e4:	00820074 	movhi	r2,2049
 80052e8:	10bd2804 	addi	r2,r2,-2912
 80052ec:	f800283a 	ret

080052f0 <_malloc_r>:
 80052f0:	defff504 	addi	sp,sp,-44
 80052f4:	dc800315 	stw	r18,12(sp)
 80052f8:	dfc00a15 	stw	ra,40(sp)
 80052fc:	df000915 	stw	fp,36(sp)
 8005300:	ddc00815 	stw	r23,32(sp)
 8005304:	dd800715 	stw	r22,28(sp)
 8005308:	dd400615 	stw	r21,24(sp)
 800530c:	dd000515 	stw	r20,20(sp)
 8005310:	dcc00415 	stw	r19,16(sp)
 8005314:	dc400215 	stw	r17,8(sp)
 8005318:	dc000115 	stw	r16,4(sp)
 800531c:	288002c4 	addi	r2,r5,11
 8005320:	00c00584 	movi	r3,22
 8005324:	2025883a 	mov	r18,r4
 8005328:	18807f2e 	bgeu	r3,r2,8005528 <_malloc_r+0x238>
 800532c:	047ffe04 	movi	r17,-8
 8005330:	1462703a 	and	r17,r2,r17
 8005334:	8800a316 	blt	r17,zero,80055c4 <_malloc_r+0x2d4>
 8005338:	8940a236 	bltu	r17,r5,80055c4 <_malloc_r+0x2d4>
 800533c:	800c8c40 	call	800c8c4 <__malloc_lock>
 8005340:	00807dc4 	movi	r2,503
 8005344:	1441e92e 	bgeu	r2,r17,8005aec <_malloc_r+0x7fc>
 8005348:	8804d27a 	srli	r2,r17,9
 800534c:	1000a126 	beq	r2,zero,80055d4 <_malloc_r+0x2e4>
 8005350:	00c00104 	movi	r3,4
 8005354:	18811e36 	bltu	r3,r2,80057d0 <_malloc_r+0x4e0>
 8005358:	8804d1ba 	srli	r2,r17,6
 800535c:	12000e44 	addi	r8,r2,57
 8005360:	11c00e04 	addi	r7,r2,56
 8005364:	4209883a 	add	r4,r8,r8
 8005368:	04c20074 	movhi	r19,2049
 800536c:	2109883a 	add	r4,r4,r4
 8005370:	9cfd3604 	addi	r19,r19,-2856
 8005374:	2109883a 	add	r4,r4,r4
 8005378:	9909883a 	add	r4,r19,r4
 800537c:	24000117 	ldw	r16,4(r4)
 8005380:	213ffe04 	addi	r4,r4,-8
 8005384:	24009726 	beq	r4,r16,80055e4 <_malloc_r+0x2f4>
 8005388:	80800117 	ldw	r2,4(r16)
 800538c:	01bfff04 	movi	r6,-4
 8005390:	014003c4 	movi	r5,15
 8005394:	1184703a 	and	r2,r2,r6
 8005398:	1447c83a 	sub	r3,r2,r17
 800539c:	28c00716 	blt	r5,r3,80053bc <_malloc_r+0xcc>
 80053a0:	1800920e 	bge	r3,zero,80055ec <_malloc_r+0x2fc>
 80053a4:	84000317 	ldw	r16,12(r16)
 80053a8:	24008e26 	beq	r4,r16,80055e4 <_malloc_r+0x2f4>
 80053ac:	80800117 	ldw	r2,4(r16)
 80053b0:	1184703a 	and	r2,r2,r6
 80053b4:	1447c83a 	sub	r3,r2,r17
 80053b8:	28fff90e 	bge	r5,r3,80053a0 <__alt_data_end+0xfc0053a0>
 80053bc:	3809883a 	mov	r4,r7
 80053c0:	01820074 	movhi	r6,2049
 80053c4:	9c000417 	ldw	r16,16(r19)
 80053c8:	31bd3604 	addi	r6,r6,-2856
 80053cc:	32000204 	addi	r8,r6,8
 80053d0:	82013426 	beq	r16,r8,80058a4 <_malloc_r+0x5b4>
 80053d4:	80c00117 	ldw	r3,4(r16)
 80053d8:	00bfff04 	movi	r2,-4
 80053dc:	188e703a 	and	r7,r3,r2
 80053e0:	3c45c83a 	sub	r2,r7,r17
 80053e4:	00c003c4 	movi	r3,15
 80053e8:	18811f16 	blt	r3,r2,8005868 <_malloc_r+0x578>
 80053ec:	32000515 	stw	r8,20(r6)
 80053f0:	32000415 	stw	r8,16(r6)
 80053f4:	10007f0e 	bge	r2,zero,80055f4 <_malloc_r+0x304>
 80053f8:	00807fc4 	movi	r2,511
 80053fc:	11c0fd36 	bltu	r2,r7,80057f4 <_malloc_r+0x504>
 8005400:	3806d0fa 	srli	r3,r7,3
 8005404:	01c00044 	movi	r7,1
 8005408:	30800117 	ldw	r2,4(r6)
 800540c:	19400044 	addi	r5,r3,1
 8005410:	294b883a 	add	r5,r5,r5
 8005414:	1807d0ba 	srai	r3,r3,2
 8005418:	294b883a 	add	r5,r5,r5
 800541c:	294b883a 	add	r5,r5,r5
 8005420:	298b883a 	add	r5,r5,r6
 8005424:	38c6983a 	sll	r3,r7,r3
 8005428:	29c00017 	ldw	r7,0(r5)
 800542c:	2a7ffe04 	addi	r9,r5,-8
 8005430:	1886b03a 	or	r3,r3,r2
 8005434:	82400315 	stw	r9,12(r16)
 8005438:	81c00215 	stw	r7,8(r16)
 800543c:	30c00115 	stw	r3,4(r6)
 8005440:	2c000015 	stw	r16,0(r5)
 8005444:	3c000315 	stw	r16,12(r7)
 8005448:	2005d0ba 	srai	r2,r4,2
 800544c:	01400044 	movi	r5,1
 8005450:	288a983a 	sll	r5,r5,r2
 8005454:	19406f36 	bltu	r3,r5,8005614 <_malloc_r+0x324>
 8005458:	28c4703a 	and	r2,r5,r3
 800545c:	10000a1e 	bne	r2,zero,8005488 <_malloc_r+0x198>
 8005460:	00bfff04 	movi	r2,-4
 8005464:	294b883a 	add	r5,r5,r5
 8005468:	2088703a 	and	r4,r4,r2
 800546c:	28c4703a 	and	r2,r5,r3
 8005470:	21000104 	addi	r4,r4,4
 8005474:	1000041e 	bne	r2,zero,8005488 <_malloc_r+0x198>
 8005478:	294b883a 	add	r5,r5,r5
 800547c:	28c4703a 	and	r2,r5,r3
 8005480:	21000104 	addi	r4,r4,4
 8005484:	103ffc26 	beq	r2,zero,8005478 <__alt_data_end+0xfc005478>
 8005488:	02bfff04 	movi	r10,-4
 800548c:	024003c4 	movi	r9,15
 8005490:	21800044 	addi	r6,r4,1
 8005494:	318d883a 	add	r6,r6,r6
 8005498:	318d883a 	add	r6,r6,r6
 800549c:	318d883a 	add	r6,r6,r6
 80054a0:	998d883a 	add	r6,r19,r6
 80054a4:	333ffe04 	addi	r12,r6,-8
 80054a8:	2017883a 	mov	r11,r4
 80054ac:	31800104 	addi	r6,r6,4
 80054b0:	34000017 	ldw	r16,0(r6)
 80054b4:	31fffd04 	addi	r7,r6,-12
 80054b8:	81c0041e 	bne	r16,r7,80054cc <_malloc_r+0x1dc>
 80054bc:	0000fb06 	br	80058ac <_malloc_r+0x5bc>
 80054c0:	1801030e 	bge	r3,zero,80058d0 <_malloc_r+0x5e0>
 80054c4:	84000317 	ldw	r16,12(r16)
 80054c8:	81c0f826 	beq	r16,r7,80058ac <_malloc_r+0x5bc>
 80054cc:	80800117 	ldw	r2,4(r16)
 80054d0:	1284703a 	and	r2,r2,r10
 80054d4:	1447c83a 	sub	r3,r2,r17
 80054d8:	48fff90e 	bge	r9,r3,80054c0 <__alt_data_end+0xfc0054c0>
 80054dc:	80800317 	ldw	r2,12(r16)
 80054e0:	81000217 	ldw	r4,8(r16)
 80054e4:	89400054 	ori	r5,r17,1
 80054e8:	81400115 	stw	r5,4(r16)
 80054ec:	20800315 	stw	r2,12(r4)
 80054f0:	11000215 	stw	r4,8(r2)
 80054f4:	8463883a 	add	r17,r16,r17
 80054f8:	9c400515 	stw	r17,20(r19)
 80054fc:	9c400415 	stw	r17,16(r19)
 8005500:	18800054 	ori	r2,r3,1
 8005504:	88800115 	stw	r2,4(r17)
 8005508:	8a000315 	stw	r8,12(r17)
 800550c:	8a000215 	stw	r8,8(r17)
 8005510:	88e3883a 	add	r17,r17,r3
 8005514:	88c00015 	stw	r3,0(r17)
 8005518:	9009883a 	mov	r4,r18
 800551c:	800c8e80 	call	800c8e8 <__malloc_unlock>
 8005520:	80800204 	addi	r2,r16,8
 8005524:	00001b06 	br	8005594 <_malloc_r+0x2a4>
 8005528:	04400404 	movi	r17,16
 800552c:	89402536 	bltu	r17,r5,80055c4 <_malloc_r+0x2d4>
 8005530:	800c8c40 	call	800c8c4 <__malloc_lock>
 8005534:	00800184 	movi	r2,6
 8005538:	01000084 	movi	r4,2
 800553c:	04c20074 	movhi	r19,2049
 8005540:	1085883a 	add	r2,r2,r2
 8005544:	9cfd3604 	addi	r19,r19,-2856
 8005548:	1085883a 	add	r2,r2,r2
 800554c:	9885883a 	add	r2,r19,r2
 8005550:	14000117 	ldw	r16,4(r2)
 8005554:	10fffe04 	addi	r3,r2,-8
 8005558:	80c0d926 	beq	r16,r3,80058c0 <_malloc_r+0x5d0>
 800555c:	80c00117 	ldw	r3,4(r16)
 8005560:	81000317 	ldw	r4,12(r16)
 8005564:	00bfff04 	movi	r2,-4
 8005568:	1884703a 	and	r2,r3,r2
 800556c:	81400217 	ldw	r5,8(r16)
 8005570:	8085883a 	add	r2,r16,r2
 8005574:	10c00117 	ldw	r3,4(r2)
 8005578:	29000315 	stw	r4,12(r5)
 800557c:	21400215 	stw	r5,8(r4)
 8005580:	18c00054 	ori	r3,r3,1
 8005584:	10c00115 	stw	r3,4(r2)
 8005588:	9009883a 	mov	r4,r18
 800558c:	800c8e80 	call	800c8e8 <__malloc_unlock>
 8005590:	80800204 	addi	r2,r16,8
 8005594:	dfc00a17 	ldw	ra,40(sp)
 8005598:	df000917 	ldw	fp,36(sp)
 800559c:	ddc00817 	ldw	r23,32(sp)
 80055a0:	dd800717 	ldw	r22,28(sp)
 80055a4:	dd400617 	ldw	r21,24(sp)
 80055a8:	dd000517 	ldw	r20,20(sp)
 80055ac:	dcc00417 	ldw	r19,16(sp)
 80055b0:	dc800317 	ldw	r18,12(sp)
 80055b4:	dc400217 	ldw	r17,8(sp)
 80055b8:	dc000117 	ldw	r16,4(sp)
 80055bc:	dec00b04 	addi	sp,sp,44
 80055c0:	f800283a 	ret
 80055c4:	00800304 	movi	r2,12
 80055c8:	90800015 	stw	r2,0(r18)
 80055cc:	0005883a 	mov	r2,zero
 80055d0:	003ff006 	br	8005594 <__alt_data_end+0xfc005594>
 80055d4:	01002004 	movi	r4,128
 80055d8:	02001004 	movi	r8,64
 80055dc:	01c00fc4 	movi	r7,63
 80055e0:	003f6106 	br	8005368 <__alt_data_end+0xfc005368>
 80055e4:	4009883a 	mov	r4,r8
 80055e8:	003f7506 	br	80053c0 <__alt_data_end+0xfc0053c0>
 80055ec:	81000317 	ldw	r4,12(r16)
 80055f0:	003fde06 	br	800556c <__alt_data_end+0xfc00556c>
 80055f4:	81c5883a 	add	r2,r16,r7
 80055f8:	11400117 	ldw	r5,4(r2)
 80055fc:	9009883a 	mov	r4,r18
 8005600:	29400054 	ori	r5,r5,1
 8005604:	11400115 	stw	r5,4(r2)
 8005608:	800c8e80 	call	800c8e8 <__malloc_unlock>
 800560c:	80800204 	addi	r2,r16,8
 8005610:	003fe006 	br	8005594 <__alt_data_end+0xfc005594>
 8005614:	9c000217 	ldw	r16,8(r19)
 8005618:	00bfff04 	movi	r2,-4
 800561c:	85800117 	ldw	r22,4(r16)
 8005620:	b0ac703a 	and	r22,r22,r2
 8005624:	b4400336 	bltu	r22,r17,8005634 <_malloc_r+0x344>
 8005628:	b445c83a 	sub	r2,r22,r17
 800562c:	00c003c4 	movi	r3,15
 8005630:	18805d16 	blt	r3,r2,80057a8 <_malloc_r+0x4b8>
 8005634:	05c20074 	movhi	r23,2049
 8005638:	00820074 	movhi	r2,2049
 800563c:	1089e604 	addi	r2,r2,10136
 8005640:	bdc2be04 	addi	r23,r23,2808
 8005644:	15400017 	ldw	r21,0(r2)
 8005648:	b8c00017 	ldw	r3,0(r23)
 800564c:	00bfffc4 	movi	r2,-1
 8005650:	858d883a 	add	r6,r16,r22
 8005654:	8d6b883a 	add	r21,r17,r21
 8005658:	1880ea26 	beq	r3,r2,8005a04 <_malloc_r+0x714>
 800565c:	ad4403c4 	addi	r21,r21,4111
 8005660:	00bc0004 	movi	r2,-4096
 8005664:	a8aa703a 	and	r21,r21,r2
 8005668:	a80b883a 	mov	r5,r21
 800566c:	9009883a 	mov	r4,r18
 8005670:	d9800015 	stw	r6,0(sp)
 8005674:	8006e540 	call	8006e54 <_sbrk_r>
 8005678:	1029883a 	mov	r20,r2
 800567c:	00bfffc4 	movi	r2,-1
 8005680:	d9800017 	ldw	r6,0(sp)
 8005684:	a080e826 	beq	r20,r2,8005a28 <_malloc_r+0x738>
 8005688:	a180a636 	bltu	r20,r6,8005924 <_malloc_r+0x634>
 800568c:	07020074 	movhi	fp,2049
 8005690:	e709ef04 	addi	fp,fp,10172
 8005694:	e0800017 	ldw	r2,0(fp)
 8005698:	a887883a 	add	r3,r21,r2
 800569c:	e0c00015 	stw	r3,0(fp)
 80056a0:	3500e626 	beq	r6,r20,8005a3c <_malloc_r+0x74c>
 80056a4:	b9000017 	ldw	r4,0(r23)
 80056a8:	00bfffc4 	movi	r2,-1
 80056ac:	2080ee26 	beq	r4,r2,8005a68 <_malloc_r+0x778>
 80056b0:	a185c83a 	sub	r2,r20,r6
 80056b4:	10c5883a 	add	r2,r2,r3
 80056b8:	e0800015 	stw	r2,0(fp)
 80056bc:	a0c001cc 	andi	r3,r20,7
 80056c0:	1800bc26 	beq	r3,zero,80059b4 <_malloc_r+0x6c4>
 80056c4:	a0e9c83a 	sub	r20,r20,r3
 80056c8:	00840204 	movi	r2,4104
 80056cc:	a5000204 	addi	r20,r20,8
 80056d0:	10c7c83a 	sub	r3,r2,r3
 80056d4:	a545883a 	add	r2,r20,r21
 80056d8:	1083ffcc 	andi	r2,r2,4095
 80056dc:	18abc83a 	sub	r21,r3,r2
 80056e0:	a80b883a 	mov	r5,r21
 80056e4:	9009883a 	mov	r4,r18
 80056e8:	8006e540 	call	8006e54 <_sbrk_r>
 80056ec:	00ffffc4 	movi	r3,-1
 80056f0:	10c0e126 	beq	r2,r3,8005a78 <_malloc_r+0x788>
 80056f4:	1505c83a 	sub	r2,r2,r20
 80056f8:	1545883a 	add	r2,r2,r21
 80056fc:	10800054 	ori	r2,r2,1
 8005700:	e0c00017 	ldw	r3,0(fp)
 8005704:	9d000215 	stw	r20,8(r19)
 8005708:	a0800115 	stw	r2,4(r20)
 800570c:	a8c7883a 	add	r3,r21,r3
 8005710:	e0c00015 	stw	r3,0(fp)
 8005714:	84c00e26 	beq	r16,r19,8005750 <_malloc_r+0x460>
 8005718:	018003c4 	movi	r6,15
 800571c:	3580a72e 	bgeu	r6,r22,80059bc <_malloc_r+0x6cc>
 8005720:	81400117 	ldw	r5,4(r16)
 8005724:	013ffe04 	movi	r4,-8
 8005728:	b0bffd04 	addi	r2,r22,-12
 800572c:	1104703a 	and	r2,r2,r4
 8005730:	2900004c 	andi	r4,r5,1
 8005734:	2088b03a 	or	r4,r4,r2
 8005738:	81000115 	stw	r4,4(r16)
 800573c:	01400144 	movi	r5,5
 8005740:	8089883a 	add	r4,r16,r2
 8005744:	21400115 	stw	r5,4(r4)
 8005748:	21400215 	stw	r5,8(r4)
 800574c:	3080cd36 	bltu	r6,r2,8005a84 <_malloc_r+0x794>
 8005750:	00820074 	movhi	r2,2049
 8005754:	1089e504 	addi	r2,r2,10132
 8005758:	11000017 	ldw	r4,0(r2)
 800575c:	20c0012e 	bgeu	r4,r3,8005764 <_malloc_r+0x474>
 8005760:	10c00015 	stw	r3,0(r2)
 8005764:	00820074 	movhi	r2,2049
 8005768:	1089e404 	addi	r2,r2,10128
 800576c:	11000017 	ldw	r4,0(r2)
 8005770:	9c000217 	ldw	r16,8(r19)
 8005774:	20c0012e 	bgeu	r4,r3,800577c <_malloc_r+0x48c>
 8005778:	10c00015 	stw	r3,0(r2)
 800577c:	80c00117 	ldw	r3,4(r16)
 8005780:	00bfff04 	movi	r2,-4
 8005784:	1886703a 	and	r3,r3,r2
 8005788:	1c45c83a 	sub	r2,r3,r17
 800578c:	1c400236 	bltu	r3,r17,8005798 <_malloc_r+0x4a8>
 8005790:	00c003c4 	movi	r3,15
 8005794:	18800416 	blt	r3,r2,80057a8 <_malloc_r+0x4b8>
 8005798:	9009883a 	mov	r4,r18
 800579c:	800c8e80 	call	800c8e8 <__malloc_unlock>
 80057a0:	0005883a 	mov	r2,zero
 80057a4:	003f7b06 	br	8005594 <__alt_data_end+0xfc005594>
 80057a8:	88c00054 	ori	r3,r17,1
 80057ac:	80c00115 	stw	r3,4(r16)
 80057b0:	8463883a 	add	r17,r16,r17
 80057b4:	10800054 	ori	r2,r2,1
 80057b8:	9c400215 	stw	r17,8(r19)
 80057bc:	88800115 	stw	r2,4(r17)
 80057c0:	9009883a 	mov	r4,r18
 80057c4:	800c8e80 	call	800c8e8 <__malloc_unlock>
 80057c8:	80800204 	addi	r2,r16,8
 80057cc:	003f7106 	br	8005594 <__alt_data_end+0xfc005594>
 80057d0:	00c00504 	movi	r3,20
 80057d4:	18804a2e 	bgeu	r3,r2,8005900 <_malloc_r+0x610>
 80057d8:	00c01504 	movi	r3,84
 80057dc:	18806e36 	bltu	r3,r2,8005998 <_malloc_r+0x6a8>
 80057e0:	8804d33a 	srli	r2,r17,12
 80057e4:	12001bc4 	addi	r8,r2,111
 80057e8:	11c01b84 	addi	r7,r2,110
 80057ec:	4209883a 	add	r4,r8,r8
 80057f0:	003edd06 	br	8005368 <__alt_data_end+0xfc005368>
 80057f4:	3804d27a 	srli	r2,r7,9
 80057f8:	00c00104 	movi	r3,4
 80057fc:	1880442e 	bgeu	r3,r2,8005910 <_malloc_r+0x620>
 8005800:	00c00504 	movi	r3,20
 8005804:	18808136 	bltu	r3,r2,8005a0c <_malloc_r+0x71c>
 8005808:	11401704 	addi	r5,r2,92
 800580c:	10c016c4 	addi	r3,r2,91
 8005810:	294b883a 	add	r5,r5,r5
 8005814:	294b883a 	add	r5,r5,r5
 8005818:	294b883a 	add	r5,r5,r5
 800581c:	994b883a 	add	r5,r19,r5
 8005820:	28800017 	ldw	r2,0(r5)
 8005824:	01820074 	movhi	r6,2049
 8005828:	297ffe04 	addi	r5,r5,-8
 800582c:	31bd3604 	addi	r6,r6,-2856
 8005830:	28806526 	beq	r5,r2,80059c8 <_malloc_r+0x6d8>
 8005834:	01bfff04 	movi	r6,-4
 8005838:	10c00117 	ldw	r3,4(r2)
 800583c:	1986703a 	and	r3,r3,r6
 8005840:	38c0022e 	bgeu	r7,r3,800584c <_malloc_r+0x55c>
 8005844:	10800217 	ldw	r2,8(r2)
 8005848:	28bffb1e 	bne	r5,r2,8005838 <__alt_data_end+0xfc005838>
 800584c:	11400317 	ldw	r5,12(r2)
 8005850:	98c00117 	ldw	r3,4(r19)
 8005854:	81400315 	stw	r5,12(r16)
 8005858:	80800215 	stw	r2,8(r16)
 800585c:	2c000215 	stw	r16,8(r5)
 8005860:	14000315 	stw	r16,12(r2)
 8005864:	003ef806 	br	8005448 <__alt_data_end+0xfc005448>
 8005868:	88c00054 	ori	r3,r17,1
 800586c:	80c00115 	stw	r3,4(r16)
 8005870:	8463883a 	add	r17,r16,r17
 8005874:	34400515 	stw	r17,20(r6)
 8005878:	34400415 	stw	r17,16(r6)
 800587c:	10c00054 	ori	r3,r2,1
 8005880:	8a000315 	stw	r8,12(r17)
 8005884:	8a000215 	stw	r8,8(r17)
 8005888:	88c00115 	stw	r3,4(r17)
 800588c:	88a3883a 	add	r17,r17,r2
 8005890:	88800015 	stw	r2,0(r17)
 8005894:	9009883a 	mov	r4,r18
 8005898:	800c8e80 	call	800c8e8 <__malloc_unlock>
 800589c:	80800204 	addi	r2,r16,8
 80058a0:	003f3c06 	br	8005594 <__alt_data_end+0xfc005594>
 80058a4:	30c00117 	ldw	r3,4(r6)
 80058a8:	003ee706 	br	8005448 <__alt_data_end+0xfc005448>
 80058ac:	5ac00044 	addi	r11,r11,1
 80058b0:	588000cc 	andi	r2,r11,3
 80058b4:	31800204 	addi	r6,r6,8
 80058b8:	103efd1e 	bne	r2,zero,80054b0 <__alt_data_end+0xfc0054b0>
 80058bc:	00002406 	br	8005950 <_malloc_r+0x660>
 80058c0:	14000317 	ldw	r16,12(r2)
 80058c4:	143f251e 	bne	r2,r16,800555c <__alt_data_end+0xfc00555c>
 80058c8:	21000084 	addi	r4,r4,2
 80058cc:	003ebc06 	br	80053c0 <__alt_data_end+0xfc0053c0>
 80058d0:	8085883a 	add	r2,r16,r2
 80058d4:	10c00117 	ldw	r3,4(r2)
 80058d8:	81000317 	ldw	r4,12(r16)
 80058dc:	81400217 	ldw	r5,8(r16)
 80058e0:	18c00054 	ori	r3,r3,1
 80058e4:	10c00115 	stw	r3,4(r2)
 80058e8:	29000315 	stw	r4,12(r5)
 80058ec:	21400215 	stw	r5,8(r4)
 80058f0:	9009883a 	mov	r4,r18
 80058f4:	800c8e80 	call	800c8e8 <__malloc_unlock>
 80058f8:	80800204 	addi	r2,r16,8
 80058fc:	003f2506 	br	8005594 <__alt_data_end+0xfc005594>
 8005900:	12001704 	addi	r8,r2,92
 8005904:	11c016c4 	addi	r7,r2,91
 8005908:	4209883a 	add	r4,r8,r8
 800590c:	003e9606 	br	8005368 <__alt_data_end+0xfc005368>
 8005910:	3804d1ba 	srli	r2,r7,6
 8005914:	11400e44 	addi	r5,r2,57
 8005918:	10c00e04 	addi	r3,r2,56
 800591c:	294b883a 	add	r5,r5,r5
 8005920:	003fbc06 	br	8005814 <__alt_data_end+0xfc005814>
 8005924:	84ff5926 	beq	r16,r19,800568c <__alt_data_end+0xfc00568c>
 8005928:	00820074 	movhi	r2,2049
 800592c:	10bd3604 	addi	r2,r2,-2856
 8005930:	14000217 	ldw	r16,8(r2)
 8005934:	00bfff04 	movi	r2,-4
 8005938:	80c00117 	ldw	r3,4(r16)
 800593c:	1886703a 	and	r3,r3,r2
 8005940:	003f9106 	br	8005788 <__alt_data_end+0xfc005788>
 8005944:	60800217 	ldw	r2,8(r12)
 8005948:	213fffc4 	addi	r4,r4,-1
 800594c:	1300651e 	bne	r2,r12,8005ae4 <_malloc_r+0x7f4>
 8005950:	208000cc 	andi	r2,r4,3
 8005954:	633ffe04 	addi	r12,r12,-8
 8005958:	103ffa1e 	bne	r2,zero,8005944 <__alt_data_end+0xfc005944>
 800595c:	98800117 	ldw	r2,4(r19)
 8005960:	0146303a 	nor	r3,zero,r5
 8005964:	1884703a 	and	r2,r3,r2
 8005968:	98800115 	stw	r2,4(r19)
 800596c:	294b883a 	add	r5,r5,r5
 8005970:	117f2836 	bltu	r2,r5,8005614 <__alt_data_end+0xfc005614>
 8005974:	283f2726 	beq	r5,zero,8005614 <__alt_data_end+0xfc005614>
 8005978:	2886703a 	and	r3,r5,r2
 800597c:	5809883a 	mov	r4,r11
 8005980:	183ec31e 	bne	r3,zero,8005490 <__alt_data_end+0xfc005490>
 8005984:	294b883a 	add	r5,r5,r5
 8005988:	2886703a 	and	r3,r5,r2
 800598c:	21000104 	addi	r4,r4,4
 8005990:	183ffc26 	beq	r3,zero,8005984 <__alt_data_end+0xfc005984>
 8005994:	003ebe06 	br	8005490 <__alt_data_end+0xfc005490>
 8005998:	00c05504 	movi	r3,340
 800599c:	18801236 	bltu	r3,r2,80059e8 <_malloc_r+0x6f8>
 80059a0:	8804d3fa 	srli	r2,r17,15
 80059a4:	12001e04 	addi	r8,r2,120
 80059a8:	11c01dc4 	addi	r7,r2,119
 80059ac:	4209883a 	add	r4,r8,r8
 80059b0:	003e6d06 	br	8005368 <__alt_data_end+0xfc005368>
 80059b4:	00c40004 	movi	r3,4096
 80059b8:	003f4606 	br	80056d4 <__alt_data_end+0xfc0056d4>
 80059bc:	00800044 	movi	r2,1
 80059c0:	a0800115 	stw	r2,4(r20)
 80059c4:	003f7406 	br	8005798 <__alt_data_end+0xfc005798>
 80059c8:	1805d0ba 	srai	r2,r3,2
 80059cc:	01c00044 	movi	r7,1
 80059d0:	30c00117 	ldw	r3,4(r6)
 80059d4:	388e983a 	sll	r7,r7,r2
 80059d8:	2805883a 	mov	r2,r5
 80059dc:	38c6b03a 	or	r3,r7,r3
 80059e0:	30c00115 	stw	r3,4(r6)
 80059e4:	003f9b06 	br	8005854 <__alt_data_end+0xfc005854>
 80059e8:	00c15504 	movi	r3,1364
 80059ec:	18801a36 	bltu	r3,r2,8005a58 <_malloc_r+0x768>
 80059f0:	8804d4ba 	srli	r2,r17,18
 80059f4:	12001f44 	addi	r8,r2,125
 80059f8:	11c01f04 	addi	r7,r2,124
 80059fc:	4209883a 	add	r4,r8,r8
 8005a00:	003e5906 	br	8005368 <__alt_data_end+0xfc005368>
 8005a04:	ad400404 	addi	r21,r21,16
 8005a08:	003f1706 	br	8005668 <__alt_data_end+0xfc005668>
 8005a0c:	00c01504 	movi	r3,84
 8005a10:	18802336 	bltu	r3,r2,8005aa0 <_malloc_r+0x7b0>
 8005a14:	3804d33a 	srli	r2,r7,12
 8005a18:	11401bc4 	addi	r5,r2,111
 8005a1c:	10c01b84 	addi	r3,r2,110
 8005a20:	294b883a 	add	r5,r5,r5
 8005a24:	003f7b06 	br	8005814 <__alt_data_end+0xfc005814>
 8005a28:	9c000217 	ldw	r16,8(r19)
 8005a2c:	00bfff04 	movi	r2,-4
 8005a30:	80c00117 	ldw	r3,4(r16)
 8005a34:	1886703a 	and	r3,r3,r2
 8005a38:	003f5306 	br	8005788 <__alt_data_end+0xfc005788>
 8005a3c:	3083ffcc 	andi	r2,r6,4095
 8005a40:	103f181e 	bne	r2,zero,80056a4 <__alt_data_end+0xfc0056a4>
 8005a44:	99000217 	ldw	r4,8(r19)
 8005a48:	b545883a 	add	r2,r22,r21
 8005a4c:	10800054 	ori	r2,r2,1
 8005a50:	20800115 	stw	r2,4(r4)
 8005a54:	003f3e06 	br	8005750 <__alt_data_end+0xfc005750>
 8005a58:	01003f84 	movi	r4,254
 8005a5c:	02001fc4 	movi	r8,127
 8005a60:	01c01f84 	movi	r7,126
 8005a64:	003e4006 	br	8005368 <__alt_data_end+0xfc005368>
 8005a68:	00820074 	movhi	r2,2049
 8005a6c:	1082be04 	addi	r2,r2,2808
 8005a70:	15000015 	stw	r20,0(r2)
 8005a74:	003f1106 	br	80056bc <__alt_data_end+0xfc0056bc>
 8005a78:	00800044 	movi	r2,1
 8005a7c:	002b883a 	mov	r21,zero
 8005a80:	003f1f06 	br	8005700 <__alt_data_end+0xfc005700>
 8005a84:	81400204 	addi	r5,r16,8
 8005a88:	9009883a 	mov	r4,r18
 8005a8c:	80086f40 	call	80086f4 <_free_r>
 8005a90:	00820074 	movhi	r2,2049
 8005a94:	1089ef04 	addi	r2,r2,10172
 8005a98:	10c00017 	ldw	r3,0(r2)
 8005a9c:	003f2c06 	br	8005750 <__alt_data_end+0xfc005750>
 8005aa0:	00c05504 	movi	r3,340
 8005aa4:	18800536 	bltu	r3,r2,8005abc <_malloc_r+0x7cc>
 8005aa8:	3804d3fa 	srli	r2,r7,15
 8005aac:	11401e04 	addi	r5,r2,120
 8005ab0:	10c01dc4 	addi	r3,r2,119
 8005ab4:	294b883a 	add	r5,r5,r5
 8005ab8:	003f5606 	br	8005814 <__alt_data_end+0xfc005814>
 8005abc:	00c15504 	movi	r3,1364
 8005ac0:	18800536 	bltu	r3,r2,8005ad8 <_malloc_r+0x7e8>
 8005ac4:	3804d4ba 	srli	r2,r7,18
 8005ac8:	11401f44 	addi	r5,r2,125
 8005acc:	10c01f04 	addi	r3,r2,124
 8005ad0:	294b883a 	add	r5,r5,r5
 8005ad4:	003f4f06 	br	8005814 <__alt_data_end+0xfc005814>
 8005ad8:	01403f84 	movi	r5,254
 8005adc:	00c01f84 	movi	r3,126
 8005ae0:	003f4c06 	br	8005814 <__alt_data_end+0xfc005814>
 8005ae4:	98800117 	ldw	r2,4(r19)
 8005ae8:	003fa006 	br	800596c <__alt_data_end+0xfc00596c>
 8005aec:	8808d0fa 	srli	r4,r17,3
 8005af0:	20800044 	addi	r2,r4,1
 8005af4:	1085883a 	add	r2,r2,r2
 8005af8:	003e9006 	br	800553c <__alt_data_end+0xfc00553c>

08005afc <memchr>:
 8005afc:	208000cc 	andi	r2,r4,3
 8005b00:	280f883a 	mov	r7,r5
 8005b04:	10003426 	beq	r2,zero,8005bd8 <memchr+0xdc>
 8005b08:	30bfffc4 	addi	r2,r6,-1
 8005b0c:	30001a26 	beq	r6,zero,8005b78 <memchr+0x7c>
 8005b10:	20c00003 	ldbu	r3,0(r4)
 8005b14:	29803fcc 	andi	r6,r5,255
 8005b18:	30c0051e 	bne	r6,r3,8005b30 <memchr+0x34>
 8005b1c:	00001806 	br	8005b80 <memchr+0x84>
 8005b20:	10001526 	beq	r2,zero,8005b78 <memchr+0x7c>
 8005b24:	20c00003 	ldbu	r3,0(r4)
 8005b28:	10bfffc4 	addi	r2,r2,-1
 8005b2c:	30c01426 	beq	r6,r3,8005b80 <memchr+0x84>
 8005b30:	21000044 	addi	r4,r4,1
 8005b34:	20c000cc 	andi	r3,r4,3
 8005b38:	183ff91e 	bne	r3,zero,8005b20 <__alt_data_end+0xfc005b20>
 8005b3c:	020000c4 	movi	r8,3
 8005b40:	40801136 	bltu	r8,r2,8005b88 <memchr+0x8c>
 8005b44:	10000c26 	beq	r2,zero,8005b78 <memchr+0x7c>
 8005b48:	20c00003 	ldbu	r3,0(r4)
 8005b4c:	29403fcc 	andi	r5,r5,255
 8005b50:	28c00b26 	beq	r5,r3,8005b80 <memchr+0x84>
 8005b54:	20c00044 	addi	r3,r4,1
 8005b58:	39803fcc 	andi	r6,r7,255
 8005b5c:	2089883a 	add	r4,r4,r2
 8005b60:	00000306 	br	8005b70 <memchr+0x74>
 8005b64:	18c00044 	addi	r3,r3,1
 8005b68:	197fffc3 	ldbu	r5,-1(r3)
 8005b6c:	31400526 	beq	r6,r5,8005b84 <memchr+0x88>
 8005b70:	1805883a 	mov	r2,r3
 8005b74:	20fffb1e 	bne	r4,r3,8005b64 <__alt_data_end+0xfc005b64>
 8005b78:	0005883a 	mov	r2,zero
 8005b7c:	f800283a 	ret
 8005b80:	2005883a 	mov	r2,r4
 8005b84:	f800283a 	ret
 8005b88:	28c03fcc 	andi	r3,r5,255
 8005b8c:	1812923a 	slli	r9,r3,8
 8005b90:	02ffbff4 	movhi	r11,65279
 8005b94:	02a02074 	movhi	r10,32897
 8005b98:	48d2b03a 	or	r9,r9,r3
 8005b9c:	4806943a 	slli	r3,r9,16
 8005ba0:	5affbfc4 	addi	r11,r11,-257
 8005ba4:	52a02004 	addi	r10,r10,-32640
 8005ba8:	48d2b03a 	or	r9,r9,r3
 8005bac:	20c00017 	ldw	r3,0(r4)
 8005bb0:	48c6f03a 	xor	r3,r9,r3
 8005bb4:	1acd883a 	add	r6,r3,r11
 8005bb8:	00c6303a 	nor	r3,zero,r3
 8005bbc:	30c6703a 	and	r3,r6,r3
 8005bc0:	1a86703a 	and	r3,r3,r10
 8005bc4:	183fe01e 	bne	r3,zero,8005b48 <__alt_data_end+0xfc005b48>
 8005bc8:	10bfff04 	addi	r2,r2,-4
 8005bcc:	21000104 	addi	r4,r4,4
 8005bd0:	40bff636 	bltu	r8,r2,8005bac <__alt_data_end+0xfc005bac>
 8005bd4:	003fdb06 	br	8005b44 <__alt_data_end+0xfc005b44>
 8005bd8:	3005883a 	mov	r2,r6
 8005bdc:	003fd706 	br	8005b3c <__alt_data_end+0xfc005b3c>

08005be0 <memcpy>:
 8005be0:	defffd04 	addi	sp,sp,-12
 8005be4:	dfc00215 	stw	ra,8(sp)
 8005be8:	dc400115 	stw	r17,4(sp)
 8005bec:	dc000015 	stw	r16,0(sp)
 8005bf0:	00c003c4 	movi	r3,15
 8005bf4:	2005883a 	mov	r2,r4
 8005bf8:	1980452e 	bgeu	r3,r6,8005d10 <memcpy+0x130>
 8005bfc:	2906b03a 	or	r3,r5,r4
 8005c00:	18c000cc 	andi	r3,r3,3
 8005c04:	1800441e 	bne	r3,zero,8005d18 <memcpy+0x138>
 8005c08:	347ffc04 	addi	r17,r6,-16
 8005c0c:	8822d13a 	srli	r17,r17,4
 8005c10:	28c00104 	addi	r3,r5,4
 8005c14:	23400104 	addi	r13,r4,4
 8005c18:	8820913a 	slli	r16,r17,4
 8005c1c:	2b000204 	addi	r12,r5,8
 8005c20:	22c00204 	addi	r11,r4,8
 8005c24:	84000504 	addi	r16,r16,20
 8005c28:	2a800304 	addi	r10,r5,12
 8005c2c:	22400304 	addi	r9,r4,12
 8005c30:	2c21883a 	add	r16,r5,r16
 8005c34:	2811883a 	mov	r8,r5
 8005c38:	200f883a 	mov	r7,r4
 8005c3c:	41000017 	ldw	r4,0(r8)
 8005c40:	1fc00017 	ldw	ra,0(r3)
 8005c44:	63c00017 	ldw	r15,0(r12)
 8005c48:	39000015 	stw	r4,0(r7)
 8005c4c:	53800017 	ldw	r14,0(r10)
 8005c50:	6fc00015 	stw	ra,0(r13)
 8005c54:	5bc00015 	stw	r15,0(r11)
 8005c58:	4b800015 	stw	r14,0(r9)
 8005c5c:	18c00404 	addi	r3,r3,16
 8005c60:	39c00404 	addi	r7,r7,16
 8005c64:	42000404 	addi	r8,r8,16
 8005c68:	6b400404 	addi	r13,r13,16
 8005c6c:	63000404 	addi	r12,r12,16
 8005c70:	5ac00404 	addi	r11,r11,16
 8005c74:	52800404 	addi	r10,r10,16
 8005c78:	4a400404 	addi	r9,r9,16
 8005c7c:	1c3fef1e 	bne	r3,r16,8005c3c <__alt_data_end+0xfc005c3c>
 8005c80:	89c00044 	addi	r7,r17,1
 8005c84:	380e913a 	slli	r7,r7,4
 8005c88:	310003cc 	andi	r4,r6,15
 8005c8c:	02c000c4 	movi	r11,3
 8005c90:	11c7883a 	add	r3,r2,r7
 8005c94:	29cb883a 	add	r5,r5,r7
 8005c98:	5900212e 	bgeu	r11,r4,8005d20 <memcpy+0x140>
 8005c9c:	1813883a 	mov	r9,r3
 8005ca0:	2811883a 	mov	r8,r5
 8005ca4:	200f883a 	mov	r7,r4
 8005ca8:	42800017 	ldw	r10,0(r8)
 8005cac:	4a400104 	addi	r9,r9,4
 8005cb0:	39ffff04 	addi	r7,r7,-4
 8005cb4:	4abfff15 	stw	r10,-4(r9)
 8005cb8:	42000104 	addi	r8,r8,4
 8005cbc:	59fffa36 	bltu	r11,r7,8005ca8 <__alt_data_end+0xfc005ca8>
 8005cc0:	213fff04 	addi	r4,r4,-4
 8005cc4:	2008d0ba 	srli	r4,r4,2
 8005cc8:	318000cc 	andi	r6,r6,3
 8005ccc:	21000044 	addi	r4,r4,1
 8005cd0:	2109883a 	add	r4,r4,r4
 8005cd4:	2109883a 	add	r4,r4,r4
 8005cd8:	1907883a 	add	r3,r3,r4
 8005cdc:	290b883a 	add	r5,r5,r4
 8005ce0:	30000626 	beq	r6,zero,8005cfc <memcpy+0x11c>
 8005ce4:	198d883a 	add	r6,r3,r6
 8005ce8:	29c00003 	ldbu	r7,0(r5)
 8005cec:	18c00044 	addi	r3,r3,1
 8005cf0:	29400044 	addi	r5,r5,1
 8005cf4:	19ffffc5 	stb	r7,-1(r3)
 8005cf8:	19bffb1e 	bne	r3,r6,8005ce8 <__alt_data_end+0xfc005ce8>
 8005cfc:	dfc00217 	ldw	ra,8(sp)
 8005d00:	dc400117 	ldw	r17,4(sp)
 8005d04:	dc000017 	ldw	r16,0(sp)
 8005d08:	dec00304 	addi	sp,sp,12
 8005d0c:	f800283a 	ret
 8005d10:	2007883a 	mov	r3,r4
 8005d14:	003ff206 	br	8005ce0 <__alt_data_end+0xfc005ce0>
 8005d18:	2007883a 	mov	r3,r4
 8005d1c:	003ff106 	br	8005ce4 <__alt_data_end+0xfc005ce4>
 8005d20:	200d883a 	mov	r6,r4
 8005d24:	003fee06 	br	8005ce0 <__alt_data_end+0xfc005ce0>

08005d28 <_Balloc>:
 8005d28:	20801317 	ldw	r2,76(r4)
 8005d2c:	defffc04 	addi	sp,sp,-16
 8005d30:	dc400115 	stw	r17,4(sp)
 8005d34:	dc000015 	stw	r16,0(sp)
 8005d38:	dfc00315 	stw	ra,12(sp)
 8005d3c:	dc800215 	stw	r18,8(sp)
 8005d40:	2023883a 	mov	r17,r4
 8005d44:	2821883a 	mov	r16,r5
 8005d48:	10000f26 	beq	r2,zero,8005d88 <_Balloc+0x60>
 8005d4c:	8407883a 	add	r3,r16,r16
 8005d50:	18c7883a 	add	r3,r3,r3
 8005d54:	10c7883a 	add	r3,r2,r3
 8005d58:	18800017 	ldw	r2,0(r3)
 8005d5c:	10001126 	beq	r2,zero,8005da4 <_Balloc+0x7c>
 8005d60:	11000017 	ldw	r4,0(r2)
 8005d64:	19000015 	stw	r4,0(r3)
 8005d68:	10000415 	stw	zero,16(r2)
 8005d6c:	10000315 	stw	zero,12(r2)
 8005d70:	dfc00317 	ldw	ra,12(sp)
 8005d74:	dc800217 	ldw	r18,8(sp)
 8005d78:	dc400117 	ldw	r17,4(sp)
 8005d7c:	dc000017 	ldw	r16,0(sp)
 8005d80:	dec00404 	addi	sp,sp,16
 8005d84:	f800283a 	ret
 8005d88:	01800844 	movi	r6,33
 8005d8c:	01400104 	movi	r5,4
 8005d90:	80084f40 	call	80084f4 <_calloc_r>
 8005d94:	88801315 	stw	r2,76(r17)
 8005d98:	103fec1e 	bne	r2,zero,8005d4c <__alt_data_end+0xfc005d4c>
 8005d9c:	0005883a 	mov	r2,zero
 8005da0:	003ff306 	br	8005d70 <__alt_data_end+0xfc005d70>
 8005da4:	01400044 	movi	r5,1
 8005da8:	2c24983a 	sll	r18,r5,r16
 8005dac:	8809883a 	mov	r4,r17
 8005db0:	91800144 	addi	r6,r18,5
 8005db4:	318d883a 	add	r6,r6,r6
 8005db8:	318d883a 	add	r6,r6,r6
 8005dbc:	80084f40 	call	80084f4 <_calloc_r>
 8005dc0:	103ff626 	beq	r2,zero,8005d9c <__alt_data_end+0xfc005d9c>
 8005dc4:	14000115 	stw	r16,4(r2)
 8005dc8:	14800215 	stw	r18,8(r2)
 8005dcc:	003fe606 	br	8005d68 <__alt_data_end+0xfc005d68>

08005dd0 <_Bfree>:
 8005dd0:	28000826 	beq	r5,zero,8005df4 <_Bfree+0x24>
 8005dd4:	28c00117 	ldw	r3,4(r5)
 8005dd8:	20801317 	ldw	r2,76(r4)
 8005ddc:	18c7883a 	add	r3,r3,r3
 8005de0:	18c7883a 	add	r3,r3,r3
 8005de4:	10c5883a 	add	r2,r2,r3
 8005de8:	10c00017 	ldw	r3,0(r2)
 8005dec:	28c00015 	stw	r3,0(r5)
 8005df0:	11400015 	stw	r5,0(r2)
 8005df4:	f800283a 	ret

08005df8 <__multadd>:
 8005df8:	defff704 	addi	sp,sp,-36
 8005dfc:	dc800215 	stw	r18,8(sp)
 8005e00:	2c800417 	ldw	r18,16(r5)
 8005e04:	dd800615 	stw	r22,24(sp)
 8005e08:	dd400515 	stw	r21,20(sp)
 8005e0c:	dd000415 	stw	r20,16(sp)
 8005e10:	dcc00315 	stw	r19,12(sp)
 8005e14:	dc400115 	stw	r17,4(sp)
 8005e18:	dc000015 	stw	r16,0(sp)
 8005e1c:	dfc00815 	stw	ra,32(sp)
 8005e20:	ddc00715 	stw	r23,28(sp)
 8005e24:	2827883a 	mov	r19,r5
 8005e28:	2029883a 	mov	r20,r4
 8005e2c:	3023883a 	mov	r17,r6
 8005e30:	3821883a 	mov	r16,r7
 8005e34:	2d400504 	addi	r21,r5,20
 8005e38:	002d883a 	mov	r22,zero
 8005e3c:	adc00017 	ldw	r23,0(r21)
 8005e40:	880b883a 	mov	r5,r17
 8005e44:	ad400104 	addi	r21,r21,4
 8005e48:	b93fffcc 	andi	r4,r23,65535
 8005e4c:	80014a80 	call	80014a8 <__mulsi3>
 8005e50:	b808d43a 	srli	r4,r23,16
 8005e54:	880b883a 	mov	r5,r17
 8005e58:	1421883a 	add	r16,r2,r16
 8005e5c:	80014a80 	call	80014a8 <__mulsi3>
 8005e60:	800ed43a 	srli	r7,r16,16
 8005e64:	80ffffcc 	andi	r3,r16,65535
 8005e68:	b5800044 	addi	r22,r22,1
 8005e6c:	11c5883a 	add	r2,r2,r7
 8005e70:	100e943a 	slli	r7,r2,16
 8005e74:	1020d43a 	srli	r16,r2,16
 8005e78:	38c7883a 	add	r3,r7,r3
 8005e7c:	a8ffff15 	stw	r3,-4(r21)
 8005e80:	b4bfee16 	blt	r22,r18,8005e3c <__alt_data_end+0xfc005e3c>
 8005e84:	80000926 	beq	r16,zero,8005eac <__multadd+0xb4>
 8005e88:	98800217 	ldw	r2,8(r19)
 8005e8c:	9080130e 	bge	r18,r2,8005edc <__multadd+0xe4>
 8005e90:	90800144 	addi	r2,r18,5
 8005e94:	1085883a 	add	r2,r2,r2
 8005e98:	1085883a 	add	r2,r2,r2
 8005e9c:	9885883a 	add	r2,r19,r2
 8005ea0:	14000015 	stw	r16,0(r2)
 8005ea4:	94800044 	addi	r18,r18,1
 8005ea8:	9c800415 	stw	r18,16(r19)
 8005eac:	9805883a 	mov	r2,r19
 8005eb0:	dfc00817 	ldw	ra,32(sp)
 8005eb4:	ddc00717 	ldw	r23,28(sp)
 8005eb8:	dd800617 	ldw	r22,24(sp)
 8005ebc:	dd400517 	ldw	r21,20(sp)
 8005ec0:	dd000417 	ldw	r20,16(sp)
 8005ec4:	dcc00317 	ldw	r19,12(sp)
 8005ec8:	dc800217 	ldw	r18,8(sp)
 8005ecc:	dc400117 	ldw	r17,4(sp)
 8005ed0:	dc000017 	ldw	r16,0(sp)
 8005ed4:	dec00904 	addi	sp,sp,36
 8005ed8:	f800283a 	ret
 8005edc:	99400117 	ldw	r5,4(r19)
 8005ee0:	a009883a 	mov	r4,r20
 8005ee4:	29400044 	addi	r5,r5,1
 8005ee8:	8005d280 	call	8005d28 <_Balloc>
 8005eec:	99800417 	ldw	r6,16(r19)
 8005ef0:	99400304 	addi	r5,r19,12
 8005ef4:	11000304 	addi	r4,r2,12
 8005ef8:	31800084 	addi	r6,r6,2
 8005efc:	318d883a 	add	r6,r6,r6
 8005f00:	318d883a 	add	r6,r6,r6
 8005f04:	1023883a 	mov	r17,r2
 8005f08:	8005be00 	call	8005be0 <memcpy>
 8005f0c:	98000a26 	beq	r19,zero,8005f38 <__multadd+0x140>
 8005f10:	98c00117 	ldw	r3,4(r19)
 8005f14:	a0801317 	ldw	r2,76(r20)
 8005f18:	18c7883a 	add	r3,r3,r3
 8005f1c:	18c7883a 	add	r3,r3,r3
 8005f20:	10c5883a 	add	r2,r2,r3
 8005f24:	10c00017 	ldw	r3,0(r2)
 8005f28:	98c00015 	stw	r3,0(r19)
 8005f2c:	14c00015 	stw	r19,0(r2)
 8005f30:	8827883a 	mov	r19,r17
 8005f34:	003fd606 	br	8005e90 <__alt_data_end+0xfc005e90>
 8005f38:	8827883a 	mov	r19,r17
 8005f3c:	003fd406 	br	8005e90 <__alt_data_end+0xfc005e90>

08005f40 <__s2b>:
 8005f40:	defff904 	addi	sp,sp,-28
 8005f44:	dc400115 	stw	r17,4(sp)
 8005f48:	dc000015 	stw	r16,0(sp)
 8005f4c:	2023883a 	mov	r17,r4
 8005f50:	2821883a 	mov	r16,r5
 8005f54:	39000204 	addi	r4,r7,8
 8005f58:	01400244 	movi	r5,9
 8005f5c:	dcc00315 	stw	r19,12(sp)
 8005f60:	dc800215 	stw	r18,8(sp)
 8005f64:	dfc00615 	stw	ra,24(sp)
 8005f68:	dd400515 	stw	r21,20(sp)
 8005f6c:	dd000415 	stw	r20,16(sp)
 8005f70:	3825883a 	mov	r18,r7
 8005f74:	3027883a 	mov	r19,r6
 8005f78:	80012f40 	call	80012f4 <__divsi3>
 8005f7c:	00c00044 	movi	r3,1
 8005f80:	000b883a 	mov	r5,zero
 8005f84:	1880030e 	bge	r3,r2,8005f94 <__s2b+0x54>
 8005f88:	18c7883a 	add	r3,r3,r3
 8005f8c:	29400044 	addi	r5,r5,1
 8005f90:	18bffd16 	blt	r3,r2,8005f88 <__alt_data_end+0xfc005f88>
 8005f94:	8809883a 	mov	r4,r17
 8005f98:	8005d280 	call	8005d28 <_Balloc>
 8005f9c:	d8c00717 	ldw	r3,28(sp)
 8005fa0:	10c00515 	stw	r3,20(r2)
 8005fa4:	00c00044 	movi	r3,1
 8005fa8:	10c00415 	stw	r3,16(r2)
 8005fac:	00c00244 	movi	r3,9
 8005fb0:	1cc0210e 	bge	r3,r19,8006038 <__s2b+0xf8>
 8005fb4:	80eb883a 	add	r21,r16,r3
 8005fb8:	a829883a 	mov	r20,r21
 8005fbc:	84e1883a 	add	r16,r16,r19
 8005fc0:	a1c00007 	ldb	r7,0(r20)
 8005fc4:	01800284 	movi	r6,10
 8005fc8:	a5000044 	addi	r20,r20,1
 8005fcc:	100b883a 	mov	r5,r2
 8005fd0:	39fff404 	addi	r7,r7,-48
 8005fd4:	8809883a 	mov	r4,r17
 8005fd8:	8005df80 	call	8005df8 <__multadd>
 8005fdc:	a43ff81e 	bne	r20,r16,8005fc0 <__alt_data_end+0xfc005fc0>
 8005fe0:	ace1883a 	add	r16,r21,r19
 8005fe4:	843ffe04 	addi	r16,r16,-8
 8005fe8:	9c800a0e 	bge	r19,r18,8006014 <__s2b+0xd4>
 8005fec:	94e5c83a 	sub	r18,r18,r19
 8005ff0:	84a5883a 	add	r18,r16,r18
 8005ff4:	81c00007 	ldb	r7,0(r16)
 8005ff8:	01800284 	movi	r6,10
 8005ffc:	84000044 	addi	r16,r16,1
 8006000:	100b883a 	mov	r5,r2
 8006004:	39fff404 	addi	r7,r7,-48
 8006008:	8809883a 	mov	r4,r17
 800600c:	8005df80 	call	8005df8 <__multadd>
 8006010:	84bff81e 	bne	r16,r18,8005ff4 <__alt_data_end+0xfc005ff4>
 8006014:	dfc00617 	ldw	ra,24(sp)
 8006018:	dd400517 	ldw	r21,20(sp)
 800601c:	dd000417 	ldw	r20,16(sp)
 8006020:	dcc00317 	ldw	r19,12(sp)
 8006024:	dc800217 	ldw	r18,8(sp)
 8006028:	dc400117 	ldw	r17,4(sp)
 800602c:	dc000017 	ldw	r16,0(sp)
 8006030:	dec00704 	addi	sp,sp,28
 8006034:	f800283a 	ret
 8006038:	84000284 	addi	r16,r16,10
 800603c:	1827883a 	mov	r19,r3
 8006040:	003fe906 	br	8005fe8 <__alt_data_end+0xfc005fe8>

08006044 <__hi0bits>:
 8006044:	20bfffec 	andhi	r2,r4,65535
 8006048:	1000141e 	bne	r2,zero,800609c <__hi0bits+0x58>
 800604c:	2008943a 	slli	r4,r4,16
 8006050:	00800404 	movi	r2,16
 8006054:	20ffc02c 	andhi	r3,r4,65280
 8006058:	1800021e 	bne	r3,zero,8006064 <__hi0bits+0x20>
 800605c:	2008923a 	slli	r4,r4,8
 8006060:	10800204 	addi	r2,r2,8
 8006064:	20fc002c 	andhi	r3,r4,61440
 8006068:	1800021e 	bne	r3,zero,8006074 <__hi0bits+0x30>
 800606c:	2008913a 	slli	r4,r4,4
 8006070:	10800104 	addi	r2,r2,4
 8006074:	20f0002c 	andhi	r3,r4,49152
 8006078:	1800031e 	bne	r3,zero,8006088 <__hi0bits+0x44>
 800607c:	2109883a 	add	r4,r4,r4
 8006080:	10800084 	addi	r2,r2,2
 8006084:	2109883a 	add	r4,r4,r4
 8006088:	20000316 	blt	r4,zero,8006098 <__hi0bits+0x54>
 800608c:	2110002c 	andhi	r4,r4,16384
 8006090:	2000041e 	bne	r4,zero,80060a4 <__hi0bits+0x60>
 8006094:	00800804 	movi	r2,32
 8006098:	f800283a 	ret
 800609c:	0005883a 	mov	r2,zero
 80060a0:	003fec06 	br	8006054 <__alt_data_end+0xfc006054>
 80060a4:	10800044 	addi	r2,r2,1
 80060a8:	f800283a 	ret

080060ac <__lo0bits>:
 80060ac:	20c00017 	ldw	r3,0(r4)
 80060b0:	188001cc 	andi	r2,r3,7
 80060b4:	10000826 	beq	r2,zero,80060d8 <__lo0bits+0x2c>
 80060b8:	1880004c 	andi	r2,r3,1
 80060bc:	1000211e 	bne	r2,zero,8006144 <__lo0bits+0x98>
 80060c0:	1880008c 	andi	r2,r3,2
 80060c4:	1000211e 	bne	r2,zero,800614c <__lo0bits+0xa0>
 80060c8:	1806d0ba 	srli	r3,r3,2
 80060cc:	00800084 	movi	r2,2
 80060d0:	20c00015 	stw	r3,0(r4)
 80060d4:	f800283a 	ret
 80060d8:	18bfffcc 	andi	r2,r3,65535
 80060dc:	10001326 	beq	r2,zero,800612c <__lo0bits+0x80>
 80060e0:	0005883a 	mov	r2,zero
 80060e4:	19403fcc 	andi	r5,r3,255
 80060e8:	2800021e 	bne	r5,zero,80060f4 <__lo0bits+0x48>
 80060ec:	1806d23a 	srli	r3,r3,8
 80060f0:	10800204 	addi	r2,r2,8
 80060f4:	194003cc 	andi	r5,r3,15
 80060f8:	2800021e 	bne	r5,zero,8006104 <__lo0bits+0x58>
 80060fc:	1806d13a 	srli	r3,r3,4
 8006100:	10800104 	addi	r2,r2,4
 8006104:	194000cc 	andi	r5,r3,3
 8006108:	2800021e 	bne	r5,zero,8006114 <__lo0bits+0x68>
 800610c:	1806d0ba 	srli	r3,r3,2
 8006110:	10800084 	addi	r2,r2,2
 8006114:	1940004c 	andi	r5,r3,1
 8006118:	2800081e 	bne	r5,zero,800613c <__lo0bits+0x90>
 800611c:	1806d07a 	srli	r3,r3,1
 8006120:	1800051e 	bne	r3,zero,8006138 <__lo0bits+0x8c>
 8006124:	00800804 	movi	r2,32
 8006128:	f800283a 	ret
 800612c:	1806d43a 	srli	r3,r3,16
 8006130:	00800404 	movi	r2,16
 8006134:	003feb06 	br	80060e4 <__alt_data_end+0xfc0060e4>
 8006138:	10800044 	addi	r2,r2,1
 800613c:	20c00015 	stw	r3,0(r4)
 8006140:	f800283a 	ret
 8006144:	0005883a 	mov	r2,zero
 8006148:	f800283a 	ret
 800614c:	1806d07a 	srli	r3,r3,1
 8006150:	00800044 	movi	r2,1
 8006154:	20c00015 	stw	r3,0(r4)
 8006158:	f800283a 	ret

0800615c <__i2b>:
 800615c:	defffd04 	addi	sp,sp,-12
 8006160:	dc000015 	stw	r16,0(sp)
 8006164:	04000044 	movi	r16,1
 8006168:	dc400115 	stw	r17,4(sp)
 800616c:	2823883a 	mov	r17,r5
 8006170:	800b883a 	mov	r5,r16
 8006174:	dfc00215 	stw	ra,8(sp)
 8006178:	8005d280 	call	8005d28 <_Balloc>
 800617c:	14400515 	stw	r17,20(r2)
 8006180:	14000415 	stw	r16,16(r2)
 8006184:	dfc00217 	ldw	ra,8(sp)
 8006188:	dc400117 	ldw	r17,4(sp)
 800618c:	dc000017 	ldw	r16,0(sp)
 8006190:	dec00304 	addi	sp,sp,12
 8006194:	f800283a 	ret

08006198 <__multiply>:
 8006198:	deffef04 	addi	sp,sp,-68
 800619c:	dc400815 	stw	r17,32(sp)
 80061a0:	dc000715 	stw	r16,28(sp)
 80061a4:	34400417 	ldw	r17,16(r6)
 80061a8:	2c000417 	ldw	r16,16(r5)
 80061ac:	dd800d15 	stw	r22,52(sp)
 80061b0:	dc800915 	stw	r18,36(sp)
 80061b4:	dfc01015 	stw	ra,64(sp)
 80061b8:	df000f15 	stw	fp,60(sp)
 80061bc:	ddc00e15 	stw	r23,56(sp)
 80061c0:	dd400c15 	stw	r21,48(sp)
 80061c4:	dd000b15 	stw	r20,44(sp)
 80061c8:	dcc00a15 	stw	r19,40(sp)
 80061cc:	2825883a 	mov	r18,r5
 80061d0:	302d883a 	mov	r22,r6
 80061d4:	8440050e 	bge	r16,r17,80061ec <__multiply+0x54>
 80061d8:	8007883a 	mov	r3,r16
 80061dc:	3025883a 	mov	r18,r6
 80061e0:	8821883a 	mov	r16,r17
 80061e4:	282d883a 	mov	r22,r5
 80061e8:	1823883a 	mov	r17,r3
 80061ec:	90800217 	ldw	r2,8(r18)
 80061f0:	8447883a 	add	r3,r16,r17
 80061f4:	d8c00215 	stw	r3,8(sp)
 80061f8:	91400117 	ldw	r5,4(r18)
 80061fc:	10c0010e 	bge	r2,r3,8006204 <__multiply+0x6c>
 8006200:	29400044 	addi	r5,r5,1
 8006204:	8005d280 	call	8005d28 <_Balloc>
 8006208:	d8c00217 	ldw	r3,8(sp)
 800620c:	d8800615 	stw	r2,24(sp)
 8006210:	18eb883a 	add	r21,r3,r3
 8006214:	ad6b883a 	add	r21,r21,r21
 8006218:	10c00504 	addi	r3,r2,20
 800621c:	1d6b883a 	add	r21,r3,r21
 8006220:	d8c00115 	stw	r3,4(sp)
 8006224:	dd400315 	stw	r21,12(sp)
 8006228:	1805883a 	mov	r2,r3
 800622c:	1d40042e 	bgeu	r3,r21,8006240 <__multiply+0xa8>
 8006230:	d8c00317 	ldw	r3,12(sp)
 8006234:	10000015 	stw	zero,0(r2)
 8006238:	10800104 	addi	r2,r2,4
 800623c:	10fffc36 	bltu	r2,r3,8006230 <__alt_data_end+0xfc006230>
 8006240:	8c63883a 	add	r17,r17,r17
 8006244:	b5800504 	addi	r22,r22,20
 8006248:	8c63883a 	add	r17,r17,r17
 800624c:	94800504 	addi	r18,r18,20
 8006250:	8421883a 	add	r16,r16,r16
 8006254:	b463883a 	add	r17,r22,r17
 8006258:	8421883a 	add	r16,r16,r16
 800625c:	dd800015 	stw	r22,0(sp)
 8006260:	dc800415 	stw	r18,16(sp)
 8006264:	dc400515 	stw	r17,20(sp)
 8006268:	9429883a 	add	r20,r18,r16
 800626c:	b4404f2e 	bgeu	r22,r17,80063ac <__multiply+0x214>
 8006270:	d8c00017 	ldw	r3,0(sp)
 8006274:	1c800017 	ldw	r18,0(r3)
 8006278:	947fffcc 	andi	r17,r18,65535
 800627c:	88001e26 	beq	r17,zero,80062f8 <__multiply+0x160>
 8006280:	dd800117 	ldw	r22,4(sp)
 8006284:	dd400417 	ldw	r21,16(sp)
 8006288:	0027883a 	mov	r19,zero
 800628c:	ac800017 	ldw	r18,0(r21)
 8006290:	b4000017 	ldw	r16,0(r22)
 8006294:	880b883a 	mov	r5,r17
 8006298:	913fffcc 	andi	r4,r18,65535
 800629c:	80014a80 	call	80014a8 <__mulsi3>
 80062a0:	9008d43a 	srli	r4,r18,16
 80062a4:	84bfffcc 	andi	r18,r16,65535
 80062a8:	1485883a 	add	r2,r2,r18
 80062ac:	14e5883a 	add	r18,r2,r19
 80062b0:	8020d43a 	srli	r16,r16,16
 80062b4:	9026d43a 	srli	r19,r18,16
 80062b8:	880b883a 	mov	r5,r17
 80062bc:	80014a80 	call	80014a8 <__mulsi3>
 80062c0:	1405883a 	add	r2,r2,r16
 80062c4:	14e1883a 	add	r16,r2,r19
 80062c8:	90ffffcc 	andi	r3,r18,65535
 80062cc:	8024943a 	slli	r18,r16,16
 80062d0:	ad400104 	addi	r21,r21,4
 80062d4:	b005883a 	mov	r2,r22
 80062d8:	90c6b03a 	or	r3,r18,r3
 80062dc:	b0c00015 	stw	r3,0(r22)
 80062e0:	8026d43a 	srli	r19,r16,16
 80062e4:	b5800104 	addi	r22,r22,4
 80062e8:	ad3fe836 	bltu	r21,r20,800628c <__alt_data_end+0xfc00628c>
 80062ec:	d8c00017 	ldw	r3,0(sp)
 80062f0:	14c00115 	stw	r19,4(r2)
 80062f4:	1c800017 	ldw	r18,0(r3)
 80062f8:	9024d43a 	srli	r18,r18,16
 80062fc:	90002226 	beq	r18,zero,8006388 <__multiply+0x1f0>
 8006300:	d8c00117 	ldw	r3,4(sp)
 8006304:	dd800417 	ldw	r22,16(sp)
 8006308:	002f883a 	mov	r23,zero
 800630c:	1f000017 	ldw	fp,0(r3)
 8006310:	1823883a 	mov	r17,r3
 8006314:	182b883a 	mov	r21,r3
 8006318:	e021883a 	mov	r16,fp
 800631c:	00000106 	br	8006324 <__multiply+0x18c>
 8006320:	982b883a 	mov	r21,r19
 8006324:	b100000b 	ldhu	r4,0(r22)
 8006328:	8020d43a 	srli	r16,r16,16
 800632c:	900b883a 	mov	r5,r18
 8006330:	80014a80 	call	80014a8 <__mulsi3>
 8006334:	1405883a 	add	r2,r2,r16
 8006338:	15ef883a 	add	r23,r2,r23
 800633c:	b804943a 	slli	r2,r23,16
 8006340:	e0ffffcc 	andi	r3,fp,65535
 8006344:	8c400104 	addi	r17,r17,4
 8006348:	10c6b03a 	or	r3,r2,r3
 800634c:	88ffff15 	stw	r3,-4(r17)
 8006350:	b5800104 	addi	r22,r22,4
 8006354:	b13fff17 	ldw	r4,-4(r22)
 8006358:	acc00104 	addi	r19,r21,4
 800635c:	900b883a 	mov	r5,r18
 8006360:	2008d43a 	srli	r4,r4,16
 8006364:	9c000017 	ldw	r16,0(r19)
 8006368:	80014a80 	call	80014a8 <__mulsi3>
 800636c:	b806d43a 	srli	r3,r23,16
 8006370:	813fffcc 	andi	r4,r16,65535
 8006374:	1105883a 	add	r2,r2,r4
 8006378:	10f9883a 	add	fp,r2,r3
 800637c:	e02ed43a 	srli	r23,fp,16
 8006380:	b53fe736 	bltu	r22,r20,8006320 <__alt_data_end+0xfc006320>
 8006384:	af000115 	stw	fp,4(r21)
 8006388:	d8c00017 	ldw	r3,0(sp)
 800638c:	d9000517 	ldw	r4,20(sp)
 8006390:	18c00104 	addi	r3,r3,4
 8006394:	d8c00015 	stw	r3,0(sp)
 8006398:	d8c00117 	ldw	r3,4(sp)
 800639c:	18c00104 	addi	r3,r3,4
 80063a0:	d8c00115 	stw	r3,4(sp)
 80063a4:	d8c00017 	ldw	r3,0(sp)
 80063a8:	193fb136 	bltu	r3,r4,8006270 <__alt_data_end+0xfc006270>
 80063ac:	d8c00217 	ldw	r3,8(sp)
 80063b0:	00c00c0e 	bge	zero,r3,80063e4 <__multiply+0x24c>
 80063b4:	d8c00317 	ldw	r3,12(sp)
 80063b8:	18bfff17 	ldw	r2,-4(r3)
 80063bc:	1d7fff04 	addi	r21,r3,-4
 80063c0:	10000326 	beq	r2,zero,80063d0 <__multiply+0x238>
 80063c4:	00000706 	br	80063e4 <__multiply+0x24c>
 80063c8:	a8800017 	ldw	r2,0(r21)
 80063cc:	1000051e 	bne	r2,zero,80063e4 <__multiply+0x24c>
 80063d0:	d8c00217 	ldw	r3,8(sp)
 80063d4:	ad7fff04 	addi	r21,r21,-4
 80063d8:	18ffffc4 	addi	r3,r3,-1
 80063dc:	d8c00215 	stw	r3,8(sp)
 80063e0:	183ff91e 	bne	r3,zero,80063c8 <__alt_data_end+0xfc0063c8>
 80063e4:	d8c00617 	ldw	r3,24(sp)
 80063e8:	d9000217 	ldw	r4,8(sp)
 80063ec:	1805883a 	mov	r2,r3
 80063f0:	19000415 	stw	r4,16(r3)
 80063f4:	dfc01017 	ldw	ra,64(sp)
 80063f8:	df000f17 	ldw	fp,60(sp)
 80063fc:	ddc00e17 	ldw	r23,56(sp)
 8006400:	dd800d17 	ldw	r22,52(sp)
 8006404:	dd400c17 	ldw	r21,48(sp)
 8006408:	dd000b17 	ldw	r20,44(sp)
 800640c:	dcc00a17 	ldw	r19,40(sp)
 8006410:	dc800917 	ldw	r18,36(sp)
 8006414:	dc400817 	ldw	r17,32(sp)
 8006418:	dc000717 	ldw	r16,28(sp)
 800641c:	dec01104 	addi	sp,sp,68
 8006420:	f800283a 	ret

08006424 <__pow5mult>:
 8006424:	defffa04 	addi	sp,sp,-24
 8006428:	dcc00315 	stw	r19,12(sp)
 800642c:	dc000015 	stw	r16,0(sp)
 8006430:	dfc00515 	stw	ra,20(sp)
 8006434:	dd000415 	stw	r20,16(sp)
 8006438:	dc800215 	stw	r18,8(sp)
 800643c:	dc400115 	stw	r17,4(sp)
 8006440:	308000cc 	andi	r2,r6,3
 8006444:	3021883a 	mov	r16,r6
 8006448:	2027883a 	mov	r19,r4
 800644c:	10002f1e 	bne	r2,zero,800650c <__pow5mult+0xe8>
 8006450:	2825883a 	mov	r18,r5
 8006454:	8021d0ba 	srai	r16,r16,2
 8006458:	80001a26 	beq	r16,zero,80064c4 <__pow5mult+0xa0>
 800645c:	9c401217 	ldw	r17,72(r19)
 8006460:	8800061e 	bne	r17,zero,800647c <__pow5mult+0x58>
 8006464:	00003406 	br	8006538 <__pow5mult+0x114>
 8006468:	8021d07a 	srai	r16,r16,1
 800646c:	80001526 	beq	r16,zero,80064c4 <__pow5mult+0xa0>
 8006470:	88800017 	ldw	r2,0(r17)
 8006474:	10001c26 	beq	r2,zero,80064e8 <__pow5mult+0xc4>
 8006478:	1023883a 	mov	r17,r2
 800647c:	8080004c 	andi	r2,r16,1
 8006480:	103ff926 	beq	r2,zero,8006468 <__alt_data_end+0xfc006468>
 8006484:	880d883a 	mov	r6,r17
 8006488:	900b883a 	mov	r5,r18
 800648c:	9809883a 	mov	r4,r19
 8006490:	80061980 	call	8006198 <__multiply>
 8006494:	90001b26 	beq	r18,zero,8006504 <__pow5mult+0xe0>
 8006498:	91000117 	ldw	r4,4(r18)
 800649c:	98c01317 	ldw	r3,76(r19)
 80064a0:	8021d07a 	srai	r16,r16,1
 80064a4:	2109883a 	add	r4,r4,r4
 80064a8:	2109883a 	add	r4,r4,r4
 80064ac:	1907883a 	add	r3,r3,r4
 80064b0:	19000017 	ldw	r4,0(r3)
 80064b4:	91000015 	stw	r4,0(r18)
 80064b8:	1c800015 	stw	r18,0(r3)
 80064bc:	1025883a 	mov	r18,r2
 80064c0:	803feb1e 	bne	r16,zero,8006470 <__alt_data_end+0xfc006470>
 80064c4:	9005883a 	mov	r2,r18
 80064c8:	dfc00517 	ldw	ra,20(sp)
 80064cc:	dd000417 	ldw	r20,16(sp)
 80064d0:	dcc00317 	ldw	r19,12(sp)
 80064d4:	dc800217 	ldw	r18,8(sp)
 80064d8:	dc400117 	ldw	r17,4(sp)
 80064dc:	dc000017 	ldw	r16,0(sp)
 80064e0:	dec00604 	addi	sp,sp,24
 80064e4:	f800283a 	ret
 80064e8:	880d883a 	mov	r6,r17
 80064ec:	880b883a 	mov	r5,r17
 80064f0:	9809883a 	mov	r4,r19
 80064f4:	80061980 	call	8006198 <__multiply>
 80064f8:	88800015 	stw	r2,0(r17)
 80064fc:	10000015 	stw	zero,0(r2)
 8006500:	003fdd06 	br	8006478 <__alt_data_end+0xfc006478>
 8006504:	1025883a 	mov	r18,r2
 8006508:	003fd706 	br	8006468 <__alt_data_end+0xfc006468>
 800650c:	10bfffc4 	addi	r2,r2,-1
 8006510:	1085883a 	add	r2,r2,r2
 8006514:	00c20074 	movhi	r3,2049
 8006518:	18fb1504 	addi	r3,r3,-5036
 800651c:	1085883a 	add	r2,r2,r2
 8006520:	1885883a 	add	r2,r3,r2
 8006524:	11800017 	ldw	r6,0(r2)
 8006528:	000f883a 	mov	r7,zero
 800652c:	8005df80 	call	8005df8 <__multadd>
 8006530:	1025883a 	mov	r18,r2
 8006534:	003fc706 	br	8006454 <__alt_data_end+0xfc006454>
 8006538:	05000044 	movi	r20,1
 800653c:	a00b883a 	mov	r5,r20
 8006540:	9809883a 	mov	r4,r19
 8006544:	8005d280 	call	8005d28 <_Balloc>
 8006548:	1023883a 	mov	r17,r2
 800654c:	00809c44 	movi	r2,625
 8006550:	88800515 	stw	r2,20(r17)
 8006554:	8d000415 	stw	r20,16(r17)
 8006558:	9c401215 	stw	r17,72(r19)
 800655c:	88000015 	stw	zero,0(r17)
 8006560:	003fc606 	br	800647c <__alt_data_end+0xfc00647c>

08006564 <__lshift>:
 8006564:	defff904 	addi	sp,sp,-28
 8006568:	dd400515 	stw	r21,20(sp)
 800656c:	dcc00315 	stw	r19,12(sp)
 8006570:	302bd17a 	srai	r21,r6,5
 8006574:	2cc00417 	ldw	r19,16(r5)
 8006578:	28800217 	ldw	r2,8(r5)
 800657c:	dd000415 	stw	r20,16(sp)
 8006580:	ace7883a 	add	r19,r21,r19
 8006584:	dc800215 	stw	r18,8(sp)
 8006588:	dc400115 	stw	r17,4(sp)
 800658c:	dc000015 	stw	r16,0(sp)
 8006590:	dfc00615 	stw	ra,24(sp)
 8006594:	9c000044 	addi	r16,r19,1
 8006598:	2823883a 	mov	r17,r5
 800659c:	3029883a 	mov	r20,r6
 80065a0:	2025883a 	mov	r18,r4
 80065a4:	29400117 	ldw	r5,4(r5)
 80065a8:	1400030e 	bge	r2,r16,80065b8 <__lshift+0x54>
 80065ac:	1085883a 	add	r2,r2,r2
 80065b0:	29400044 	addi	r5,r5,1
 80065b4:	143ffd16 	blt	r2,r16,80065ac <__alt_data_end+0xfc0065ac>
 80065b8:	9009883a 	mov	r4,r18
 80065bc:	8005d280 	call	8005d28 <_Balloc>
 80065c0:	10c00504 	addi	r3,r2,20
 80065c4:	0540070e 	bge	zero,r21,80065e4 <__lshift+0x80>
 80065c8:	ad6b883a 	add	r21,r21,r21
 80065cc:	ad6b883a 	add	r21,r21,r21
 80065d0:	1809883a 	mov	r4,r3
 80065d4:	1d47883a 	add	r3,r3,r21
 80065d8:	20000015 	stw	zero,0(r4)
 80065dc:	21000104 	addi	r4,r4,4
 80065e0:	193ffd1e 	bne	r3,r4,80065d8 <__alt_data_end+0xfc0065d8>
 80065e4:	8a000417 	ldw	r8,16(r17)
 80065e8:	89000504 	addi	r4,r17,20
 80065ec:	a18007cc 	andi	r6,r20,31
 80065f0:	4211883a 	add	r8,r8,r8
 80065f4:	4211883a 	add	r8,r8,r8
 80065f8:	2211883a 	add	r8,r4,r8
 80065fc:	30002326 	beq	r6,zero,800668c <__lshift+0x128>
 8006600:	02400804 	movi	r9,32
 8006604:	4993c83a 	sub	r9,r9,r6
 8006608:	000b883a 	mov	r5,zero
 800660c:	21c00017 	ldw	r7,0(r4)
 8006610:	1815883a 	mov	r10,r3
 8006614:	18c00104 	addi	r3,r3,4
 8006618:	398e983a 	sll	r7,r7,r6
 800661c:	21000104 	addi	r4,r4,4
 8006620:	394ab03a 	or	r5,r7,r5
 8006624:	197fff15 	stw	r5,-4(r3)
 8006628:	217fff17 	ldw	r5,-4(r4)
 800662c:	2a4ad83a 	srl	r5,r5,r9
 8006630:	223ff636 	bltu	r4,r8,800660c <__alt_data_end+0xfc00660c>
 8006634:	51400115 	stw	r5,4(r10)
 8006638:	28001a1e 	bne	r5,zero,80066a4 <__lshift+0x140>
 800663c:	843fffc4 	addi	r16,r16,-1
 8006640:	14000415 	stw	r16,16(r2)
 8006644:	88000826 	beq	r17,zero,8006668 <__lshift+0x104>
 8006648:	89000117 	ldw	r4,4(r17)
 800664c:	90c01317 	ldw	r3,76(r18)
 8006650:	2109883a 	add	r4,r4,r4
 8006654:	2109883a 	add	r4,r4,r4
 8006658:	1907883a 	add	r3,r3,r4
 800665c:	19000017 	ldw	r4,0(r3)
 8006660:	89000015 	stw	r4,0(r17)
 8006664:	1c400015 	stw	r17,0(r3)
 8006668:	dfc00617 	ldw	ra,24(sp)
 800666c:	dd400517 	ldw	r21,20(sp)
 8006670:	dd000417 	ldw	r20,16(sp)
 8006674:	dcc00317 	ldw	r19,12(sp)
 8006678:	dc800217 	ldw	r18,8(sp)
 800667c:	dc400117 	ldw	r17,4(sp)
 8006680:	dc000017 	ldw	r16,0(sp)
 8006684:	dec00704 	addi	sp,sp,28
 8006688:	f800283a 	ret
 800668c:	21400017 	ldw	r5,0(r4)
 8006690:	18c00104 	addi	r3,r3,4
 8006694:	21000104 	addi	r4,r4,4
 8006698:	197fff15 	stw	r5,-4(r3)
 800669c:	223ffb36 	bltu	r4,r8,800668c <__alt_data_end+0xfc00668c>
 80066a0:	003fe606 	br	800663c <__alt_data_end+0xfc00663c>
 80066a4:	9c000084 	addi	r16,r19,2
 80066a8:	003fe406 	br	800663c <__alt_data_end+0xfc00663c>

080066ac <__mcmp>:
 80066ac:	20800417 	ldw	r2,16(r4)
 80066b0:	28c00417 	ldw	r3,16(r5)
 80066b4:	10c5c83a 	sub	r2,r2,r3
 80066b8:	1000111e 	bne	r2,zero,8006700 <__mcmp+0x54>
 80066bc:	18c7883a 	add	r3,r3,r3
 80066c0:	18c7883a 	add	r3,r3,r3
 80066c4:	21000504 	addi	r4,r4,20
 80066c8:	29400504 	addi	r5,r5,20
 80066cc:	20c5883a 	add	r2,r4,r3
 80066d0:	28cb883a 	add	r5,r5,r3
 80066d4:	00000106 	br	80066dc <__mcmp+0x30>
 80066d8:	20800a2e 	bgeu	r4,r2,8006704 <__mcmp+0x58>
 80066dc:	10bfff04 	addi	r2,r2,-4
 80066e0:	297fff04 	addi	r5,r5,-4
 80066e4:	11800017 	ldw	r6,0(r2)
 80066e8:	28c00017 	ldw	r3,0(r5)
 80066ec:	30fffa26 	beq	r6,r3,80066d8 <__alt_data_end+0xfc0066d8>
 80066f0:	30c00236 	bltu	r6,r3,80066fc <__mcmp+0x50>
 80066f4:	00800044 	movi	r2,1
 80066f8:	f800283a 	ret
 80066fc:	00bfffc4 	movi	r2,-1
 8006700:	f800283a 	ret
 8006704:	0005883a 	mov	r2,zero
 8006708:	f800283a 	ret

0800670c <__mdiff>:
 800670c:	28c00417 	ldw	r3,16(r5)
 8006710:	30800417 	ldw	r2,16(r6)
 8006714:	defffa04 	addi	sp,sp,-24
 8006718:	dcc00315 	stw	r19,12(sp)
 800671c:	dc800215 	stw	r18,8(sp)
 8006720:	dfc00515 	stw	ra,20(sp)
 8006724:	dd000415 	stw	r20,16(sp)
 8006728:	dc400115 	stw	r17,4(sp)
 800672c:	dc000015 	stw	r16,0(sp)
 8006730:	1887c83a 	sub	r3,r3,r2
 8006734:	2825883a 	mov	r18,r5
 8006738:	3027883a 	mov	r19,r6
 800673c:	1800141e 	bne	r3,zero,8006790 <__mdiff+0x84>
 8006740:	1085883a 	add	r2,r2,r2
 8006744:	1085883a 	add	r2,r2,r2
 8006748:	2a000504 	addi	r8,r5,20
 800674c:	34000504 	addi	r16,r6,20
 8006750:	4087883a 	add	r3,r8,r2
 8006754:	8085883a 	add	r2,r16,r2
 8006758:	00000106 	br	8006760 <__mdiff+0x54>
 800675c:	40c0592e 	bgeu	r8,r3,80068c4 <__mdiff+0x1b8>
 8006760:	18ffff04 	addi	r3,r3,-4
 8006764:	10bfff04 	addi	r2,r2,-4
 8006768:	19c00017 	ldw	r7,0(r3)
 800676c:	11400017 	ldw	r5,0(r2)
 8006770:	397ffa26 	beq	r7,r5,800675c <__alt_data_end+0xfc00675c>
 8006774:	3940592e 	bgeu	r7,r5,80068dc <__mdiff+0x1d0>
 8006778:	9005883a 	mov	r2,r18
 800677c:	4023883a 	mov	r17,r8
 8006780:	9825883a 	mov	r18,r19
 8006784:	05000044 	movi	r20,1
 8006788:	1027883a 	mov	r19,r2
 800678c:	00000406 	br	80067a0 <__mdiff+0x94>
 8006790:	18005616 	blt	r3,zero,80068ec <__mdiff+0x1e0>
 8006794:	34400504 	addi	r17,r6,20
 8006798:	2c000504 	addi	r16,r5,20
 800679c:	0029883a 	mov	r20,zero
 80067a0:	91400117 	ldw	r5,4(r18)
 80067a4:	8005d280 	call	8005d28 <_Balloc>
 80067a8:	92400417 	ldw	r9,16(r18)
 80067ac:	9b000417 	ldw	r12,16(r19)
 80067b0:	12c00504 	addi	r11,r2,20
 80067b4:	4a51883a 	add	r8,r9,r9
 80067b8:	6319883a 	add	r12,r12,r12
 80067bc:	4211883a 	add	r8,r8,r8
 80067c0:	6319883a 	add	r12,r12,r12
 80067c4:	15000315 	stw	r20,12(r2)
 80067c8:	8211883a 	add	r8,r16,r8
 80067cc:	8b19883a 	add	r12,r17,r12
 80067d0:	0007883a 	mov	r3,zero
 80067d4:	81400017 	ldw	r5,0(r16)
 80067d8:	89c00017 	ldw	r7,0(r17)
 80067dc:	59800104 	addi	r6,r11,4
 80067e0:	293fffcc 	andi	r4,r5,65535
 80067e4:	20c7883a 	add	r3,r4,r3
 80067e8:	393fffcc 	andi	r4,r7,65535
 80067ec:	1909c83a 	sub	r4,r3,r4
 80067f0:	280ad43a 	srli	r5,r5,16
 80067f4:	380ed43a 	srli	r7,r7,16
 80067f8:	2007d43a 	srai	r3,r4,16
 80067fc:	213fffcc 	andi	r4,r4,65535
 8006800:	29cbc83a 	sub	r5,r5,r7
 8006804:	28c7883a 	add	r3,r5,r3
 8006808:	180a943a 	slli	r5,r3,16
 800680c:	8c400104 	addi	r17,r17,4
 8006810:	84000104 	addi	r16,r16,4
 8006814:	2908b03a 	or	r4,r5,r4
 8006818:	59000015 	stw	r4,0(r11)
 800681c:	1807d43a 	srai	r3,r3,16
 8006820:	3015883a 	mov	r10,r6
 8006824:	3017883a 	mov	r11,r6
 8006828:	8b3fea36 	bltu	r17,r12,80067d4 <__alt_data_end+0xfc0067d4>
 800682c:	8200162e 	bgeu	r16,r8,8006888 <__mdiff+0x17c>
 8006830:	8017883a 	mov	r11,r16
 8006834:	59400017 	ldw	r5,0(r11)
 8006838:	31800104 	addi	r6,r6,4
 800683c:	5ac00104 	addi	r11,r11,4
 8006840:	293fffcc 	andi	r4,r5,65535
 8006844:	20c7883a 	add	r3,r4,r3
 8006848:	280ed43a 	srli	r7,r5,16
 800684c:	180bd43a 	srai	r5,r3,16
 8006850:	193fffcc 	andi	r4,r3,65535
 8006854:	3947883a 	add	r3,r7,r5
 8006858:	180a943a 	slli	r5,r3,16
 800685c:	1807d43a 	srai	r3,r3,16
 8006860:	2908b03a 	or	r4,r5,r4
 8006864:	313fff15 	stw	r4,-4(r6)
 8006868:	5a3ff236 	bltu	r11,r8,8006834 <__alt_data_end+0xfc006834>
 800686c:	0406303a 	nor	r3,zero,r16
 8006870:	1a07883a 	add	r3,r3,r8
 8006874:	1806d0ba 	srli	r3,r3,2
 8006878:	18c00044 	addi	r3,r3,1
 800687c:	18c7883a 	add	r3,r3,r3
 8006880:	18c7883a 	add	r3,r3,r3
 8006884:	50d5883a 	add	r10,r10,r3
 8006888:	50ffff04 	addi	r3,r10,-4
 800688c:	2000041e 	bne	r4,zero,80068a0 <__mdiff+0x194>
 8006890:	18ffff04 	addi	r3,r3,-4
 8006894:	19000017 	ldw	r4,0(r3)
 8006898:	4a7fffc4 	addi	r9,r9,-1
 800689c:	203ffc26 	beq	r4,zero,8006890 <__alt_data_end+0xfc006890>
 80068a0:	12400415 	stw	r9,16(r2)
 80068a4:	dfc00517 	ldw	ra,20(sp)
 80068a8:	dd000417 	ldw	r20,16(sp)
 80068ac:	dcc00317 	ldw	r19,12(sp)
 80068b0:	dc800217 	ldw	r18,8(sp)
 80068b4:	dc400117 	ldw	r17,4(sp)
 80068b8:	dc000017 	ldw	r16,0(sp)
 80068bc:	dec00604 	addi	sp,sp,24
 80068c0:	f800283a 	ret
 80068c4:	000b883a 	mov	r5,zero
 80068c8:	8005d280 	call	8005d28 <_Balloc>
 80068cc:	00c00044 	movi	r3,1
 80068d0:	10c00415 	stw	r3,16(r2)
 80068d4:	10000515 	stw	zero,20(r2)
 80068d8:	003ff206 	br	80068a4 <__alt_data_end+0xfc0068a4>
 80068dc:	8023883a 	mov	r17,r16
 80068e0:	0029883a 	mov	r20,zero
 80068e4:	4021883a 	mov	r16,r8
 80068e8:	003fad06 	br	80067a0 <__alt_data_end+0xfc0067a0>
 80068ec:	9005883a 	mov	r2,r18
 80068f0:	94400504 	addi	r17,r18,20
 80068f4:	9c000504 	addi	r16,r19,20
 80068f8:	9825883a 	mov	r18,r19
 80068fc:	05000044 	movi	r20,1
 8006900:	1027883a 	mov	r19,r2
 8006904:	003fa606 	br	80067a0 <__alt_data_end+0xfc0067a0>

08006908 <__ulp>:
 8006908:	295ffc2c 	andhi	r5,r5,32752
 800690c:	00bf3034 	movhi	r2,64704
 8006910:	2887883a 	add	r3,r5,r2
 8006914:	00c0020e 	bge	zero,r3,8006920 <__ulp+0x18>
 8006918:	0005883a 	mov	r2,zero
 800691c:	f800283a 	ret
 8006920:	00c7c83a 	sub	r3,zero,r3
 8006924:	1807d53a 	srai	r3,r3,20
 8006928:	008004c4 	movi	r2,19
 800692c:	10c00b0e 	bge	r2,r3,800695c <__ulp+0x54>
 8006930:	18bffb04 	addi	r2,r3,-20
 8006934:	01000784 	movi	r4,30
 8006938:	0007883a 	mov	r3,zero
 800693c:	20800516 	blt	r4,r2,8006954 <__ulp+0x4c>
 8006940:	010007c4 	movi	r4,31
 8006944:	2089c83a 	sub	r4,r4,r2
 8006948:	00800044 	movi	r2,1
 800694c:	1104983a 	sll	r2,r2,r4
 8006950:	f800283a 	ret
 8006954:	00800044 	movi	r2,1
 8006958:	f800283a 	ret
 800695c:	01400234 	movhi	r5,8
 8006960:	28c7d83a 	sra	r3,r5,r3
 8006964:	0005883a 	mov	r2,zero
 8006968:	f800283a 	ret

0800696c <__b2d>:
 800696c:	defffa04 	addi	sp,sp,-24
 8006970:	dc000015 	stw	r16,0(sp)
 8006974:	24000417 	ldw	r16,16(r4)
 8006978:	dc400115 	stw	r17,4(sp)
 800697c:	24400504 	addi	r17,r4,20
 8006980:	8421883a 	add	r16,r16,r16
 8006984:	8421883a 	add	r16,r16,r16
 8006988:	8c21883a 	add	r16,r17,r16
 800698c:	dc800215 	stw	r18,8(sp)
 8006990:	84bfff17 	ldw	r18,-4(r16)
 8006994:	dd000415 	stw	r20,16(sp)
 8006998:	dcc00315 	stw	r19,12(sp)
 800699c:	9009883a 	mov	r4,r18
 80069a0:	2829883a 	mov	r20,r5
 80069a4:	dfc00515 	stw	ra,20(sp)
 80069a8:	80060440 	call	8006044 <__hi0bits>
 80069ac:	00c00804 	movi	r3,32
 80069b0:	1889c83a 	sub	r4,r3,r2
 80069b4:	a1000015 	stw	r4,0(r20)
 80069b8:	01000284 	movi	r4,10
 80069bc:	84ffff04 	addi	r19,r16,-4
 80069c0:	20801216 	blt	r4,r2,8006a0c <__b2d+0xa0>
 80069c4:	018002c4 	movi	r6,11
 80069c8:	308dc83a 	sub	r6,r6,r2
 80069cc:	9186d83a 	srl	r3,r18,r6
 80069d0:	18cffc34 	orhi	r3,r3,16368
 80069d4:	8cc0212e 	bgeu	r17,r19,8006a5c <__b2d+0xf0>
 80069d8:	813ffe17 	ldw	r4,-8(r16)
 80069dc:	218cd83a 	srl	r6,r4,r6
 80069e0:	10800544 	addi	r2,r2,21
 80069e4:	9084983a 	sll	r2,r18,r2
 80069e8:	1184b03a 	or	r2,r2,r6
 80069ec:	dfc00517 	ldw	ra,20(sp)
 80069f0:	dd000417 	ldw	r20,16(sp)
 80069f4:	dcc00317 	ldw	r19,12(sp)
 80069f8:	dc800217 	ldw	r18,8(sp)
 80069fc:	dc400117 	ldw	r17,4(sp)
 8006a00:	dc000017 	ldw	r16,0(sp)
 8006a04:	dec00604 	addi	sp,sp,24
 8006a08:	f800283a 	ret
 8006a0c:	8cc00f2e 	bgeu	r17,r19,8006a4c <__b2d+0xe0>
 8006a10:	117ffd44 	addi	r5,r2,-11
 8006a14:	80bffe17 	ldw	r2,-8(r16)
 8006a18:	28000e26 	beq	r5,zero,8006a54 <__b2d+0xe8>
 8006a1c:	1949c83a 	sub	r4,r3,r5
 8006a20:	9164983a 	sll	r18,r18,r5
 8006a24:	1106d83a 	srl	r3,r2,r4
 8006a28:	81bffe04 	addi	r6,r16,-8
 8006a2c:	948ffc34 	orhi	r18,r18,16368
 8006a30:	90c6b03a 	or	r3,r18,r3
 8006a34:	89800e2e 	bgeu	r17,r6,8006a70 <__b2d+0x104>
 8006a38:	81bffd17 	ldw	r6,-12(r16)
 8006a3c:	1144983a 	sll	r2,r2,r5
 8006a40:	310ad83a 	srl	r5,r6,r4
 8006a44:	2884b03a 	or	r2,r5,r2
 8006a48:	003fe806 	br	80069ec <__alt_data_end+0xfc0069ec>
 8006a4c:	10bffd44 	addi	r2,r2,-11
 8006a50:	1000041e 	bne	r2,zero,8006a64 <__b2d+0xf8>
 8006a54:	90cffc34 	orhi	r3,r18,16368
 8006a58:	003fe406 	br	80069ec <__alt_data_end+0xfc0069ec>
 8006a5c:	000d883a 	mov	r6,zero
 8006a60:	003fdf06 	br	80069e0 <__alt_data_end+0xfc0069e0>
 8006a64:	90a4983a 	sll	r18,r18,r2
 8006a68:	0005883a 	mov	r2,zero
 8006a6c:	003ff906 	br	8006a54 <__alt_data_end+0xfc006a54>
 8006a70:	1144983a 	sll	r2,r2,r5
 8006a74:	003fdd06 	br	80069ec <__alt_data_end+0xfc0069ec>

08006a78 <__d2b>:
 8006a78:	defff804 	addi	sp,sp,-32
 8006a7c:	dc000215 	stw	r16,8(sp)
 8006a80:	3021883a 	mov	r16,r6
 8006a84:	dc400315 	stw	r17,12(sp)
 8006a88:	8022907a 	slli	r17,r16,1
 8006a8c:	dd000615 	stw	r20,24(sp)
 8006a90:	2829883a 	mov	r20,r5
 8006a94:	01400044 	movi	r5,1
 8006a98:	dcc00515 	stw	r19,20(sp)
 8006a9c:	dc800415 	stw	r18,16(sp)
 8006aa0:	dfc00715 	stw	ra,28(sp)
 8006aa4:	3825883a 	mov	r18,r7
 8006aa8:	8822d57a 	srli	r17,r17,21
 8006aac:	8005d280 	call	8005d28 <_Balloc>
 8006ab0:	1027883a 	mov	r19,r2
 8006ab4:	00800434 	movhi	r2,16
 8006ab8:	10bfffc4 	addi	r2,r2,-1
 8006abc:	808c703a 	and	r6,r16,r2
 8006ac0:	88000126 	beq	r17,zero,8006ac8 <__d2b+0x50>
 8006ac4:	31800434 	orhi	r6,r6,16
 8006ac8:	d9800015 	stw	r6,0(sp)
 8006acc:	a0002426 	beq	r20,zero,8006b60 <__d2b+0xe8>
 8006ad0:	d9000104 	addi	r4,sp,4
 8006ad4:	dd000115 	stw	r20,4(sp)
 8006ad8:	80060ac0 	call	80060ac <__lo0bits>
 8006adc:	d8c00017 	ldw	r3,0(sp)
 8006ae0:	10002f1e 	bne	r2,zero,8006ba0 <__d2b+0x128>
 8006ae4:	d9000117 	ldw	r4,4(sp)
 8006ae8:	99000515 	stw	r4,20(r19)
 8006aec:	1821003a 	cmpeq	r16,r3,zero
 8006af0:	01000084 	movi	r4,2
 8006af4:	2421c83a 	sub	r16,r4,r16
 8006af8:	98c00615 	stw	r3,24(r19)
 8006afc:	9c000415 	stw	r16,16(r19)
 8006b00:	88001f1e 	bne	r17,zero,8006b80 <__d2b+0x108>
 8006b04:	10bef384 	addi	r2,r2,-1074
 8006b08:	90800015 	stw	r2,0(r18)
 8006b0c:	00900034 	movhi	r2,16384
 8006b10:	10bfffc4 	addi	r2,r2,-1
 8006b14:	8085883a 	add	r2,r16,r2
 8006b18:	1085883a 	add	r2,r2,r2
 8006b1c:	1085883a 	add	r2,r2,r2
 8006b20:	9885883a 	add	r2,r19,r2
 8006b24:	11000517 	ldw	r4,20(r2)
 8006b28:	8020917a 	slli	r16,r16,5
 8006b2c:	80060440 	call	8006044 <__hi0bits>
 8006b30:	d8c00817 	ldw	r3,32(sp)
 8006b34:	8085c83a 	sub	r2,r16,r2
 8006b38:	18800015 	stw	r2,0(r3)
 8006b3c:	9805883a 	mov	r2,r19
 8006b40:	dfc00717 	ldw	ra,28(sp)
 8006b44:	dd000617 	ldw	r20,24(sp)
 8006b48:	dcc00517 	ldw	r19,20(sp)
 8006b4c:	dc800417 	ldw	r18,16(sp)
 8006b50:	dc400317 	ldw	r17,12(sp)
 8006b54:	dc000217 	ldw	r16,8(sp)
 8006b58:	dec00804 	addi	sp,sp,32
 8006b5c:	f800283a 	ret
 8006b60:	d809883a 	mov	r4,sp
 8006b64:	80060ac0 	call	80060ac <__lo0bits>
 8006b68:	d8c00017 	ldw	r3,0(sp)
 8006b6c:	04000044 	movi	r16,1
 8006b70:	9c000415 	stw	r16,16(r19)
 8006b74:	98c00515 	stw	r3,20(r19)
 8006b78:	10800804 	addi	r2,r2,32
 8006b7c:	883fe126 	beq	r17,zero,8006b04 <__alt_data_end+0xfc006b04>
 8006b80:	00c00d44 	movi	r3,53
 8006b84:	8c7ef344 	addi	r17,r17,-1075
 8006b88:	88a3883a 	add	r17,r17,r2
 8006b8c:	1885c83a 	sub	r2,r3,r2
 8006b90:	d8c00817 	ldw	r3,32(sp)
 8006b94:	94400015 	stw	r17,0(r18)
 8006b98:	18800015 	stw	r2,0(r3)
 8006b9c:	003fe706 	br	8006b3c <__alt_data_end+0xfc006b3c>
 8006ba0:	01000804 	movi	r4,32
 8006ba4:	2089c83a 	sub	r4,r4,r2
 8006ba8:	1908983a 	sll	r4,r3,r4
 8006bac:	d9400117 	ldw	r5,4(sp)
 8006bb0:	1886d83a 	srl	r3,r3,r2
 8006bb4:	2148b03a 	or	r4,r4,r5
 8006bb8:	99000515 	stw	r4,20(r19)
 8006bbc:	d8c00015 	stw	r3,0(sp)
 8006bc0:	003fca06 	br	8006aec <__alt_data_end+0xfc006aec>

08006bc4 <__ratio>:
 8006bc4:	defff904 	addi	sp,sp,-28
 8006bc8:	dc400315 	stw	r17,12(sp)
 8006bcc:	2823883a 	mov	r17,r5
 8006bd0:	d9400104 	addi	r5,sp,4
 8006bd4:	dfc00615 	stw	ra,24(sp)
 8006bd8:	dcc00515 	stw	r19,20(sp)
 8006bdc:	dc800415 	stw	r18,16(sp)
 8006be0:	2027883a 	mov	r19,r4
 8006be4:	dc000215 	stw	r16,8(sp)
 8006be8:	800696c0 	call	800696c <__b2d>
 8006bec:	d80b883a 	mov	r5,sp
 8006bf0:	8809883a 	mov	r4,r17
 8006bf4:	1025883a 	mov	r18,r2
 8006bf8:	1821883a 	mov	r16,r3
 8006bfc:	800696c0 	call	800696c <__b2d>
 8006c00:	8a000417 	ldw	r8,16(r17)
 8006c04:	99000417 	ldw	r4,16(r19)
 8006c08:	d9400117 	ldw	r5,4(sp)
 8006c0c:	2209c83a 	sub	r4,r4,r8
 8006c10:	2010917a 	slli	r8,r4,5
 8006c14:	d9000017 	ldw	r4,0(sp)
 8006c18:	2909c83a 	sub	r4,r5,r4
 8006c1c:	4109883a 	add	r4,r8,r4
 8006c20:	01000e0e 	bge	zero,r4,8006c5c <__ratio+0x98>
 8006c24:	2008953a 	slli	r4,r4,20
 8006c28:	2421883a 	add	r16,r4,r16
 8006c2c:	100d883a 	mov	r6,r2
 8006c30:	180f883a 	mov	r7,r3
 8006c34:	9009883a 	mov	r4,r18
 8006c38:	800b883a 	mov	r5,r16
 8006c3c:	800a7640 	call	800a764 <__divdf3>
 8006c40:	dfc00617 	ldw	ra,24(sp)
 8006c44:	dcc00517 	ldw	r19,20(sp)
 8006c48:	dc800417 	ldw	r18,16(sp)
 8006c4c:	dc400317 	ldw	r17,12(sp)
 8006c50:	dc000217 	ldw	r16,8(sp)
 8006c54:	dec00704 	addi	sp,sp,28
 8006c58:	f800283a 	ret
 8006c5c:	2008953a 	slli	r4,r4,20
 8006c60:	1907c83a 	sub	r3,r3,r4
 8006c64:	003ff106 	br	8006c2c <__alt_data_end+0xfc006c2c>

08006c68 <_mprec_log10>:
 8006c68:	defffe04 	addi	sp,sp,-8
 8006c6c:	dc000015 	stw	r16,0(sp)
 8006c70:	dfc00115 	stw	ra,4(sp)
 8006c74:	008005c4 	movi	r2,23
 8006c78:	2021883a 	mov	r16,r4
 8006c7c:	11000d0e 	bge	r2,r4,8006cb4 <_mprec_log10+0x4c>
 8006c80:	0005883a 	mov	r2,zero
 8006c84:	00cffc34 	movhi	r3,16368
 8006c88:	843fffc4 	addi	r16,r16,-1
 8006c8c:	000d883a 	mov	r6,zero
 8006c90:	01d00934 	movhi	r7,16420
 8006c94:	1009883a 	mov	r4,r2
 8006c98:	180b883a 	mov	r5,r3
 8006c9c:	800b38c0 	call	800b38c <__muldf3>
 8006ca0:	803ff91e 	bne	r16,zero,8006c88 <__alt_data_end+0xfc006c88>
 8006ca4:	dfc00117 	ldw	ra,4(sp)
 8006ca8:	dc000017 	ldw	r16,0(sp)
 8006cac:	dec00204 	addi	sp,sp,8
 8006cb0:	f800283a 	ret
 8006cb4:	202090fa 	slli	r16,r4,3
 8006cb8:	00820074 	movhi	r2,2049
 8006cbc:	10bb2c04 	addi	r2,r2,-4944
 8006cc0:	1421883a 	add	r16,r2,r16
 8006cc4:	80800017 	ldw	r2,0(r16)
 8006cc8:	80c00117 	ldw	r3,4(r16)
 8006ccc:	dfc00117 	ldw	ra,4(sp)
 8006cd0:	dc000017 	ldw	r16,0(sp)
 8006cd4:	dec00204 	addi	sp,sp,8
 8006cd8:	f800283a 	ret

08006cdc <__copybits>:
 8006cdc:	297fffc4 	addi	r5,r5,-1
 8006ce0:	280fd17a 	srai	r7,r5,5
 8006ce4:	30c00417 	ldw	r3,16(r6)
 8006ce8:	30800504 	addi	r2,r6,20
 8006cec:	39c00044 	addi	r7,r7,1
 8006cf0:	18c7883a 	add	r3,r3,r3
 8006cf4:	39cf883a 	add	r7,r7,r7
 8006cf8:	18c7883a 	add	r3,r3,r3
 8006cfc:	39cf883a 	add	r7,r7,r7
 8006d00:	10c7883a 	add	r3,r2,r3
 8006d04:	21cf883a 	add	r7,r4,r7
 8006d08:	10c00d2e 	bgeu	r2,r3,8006d40 <__copybits+0x64>
 8006d0c:	200b883a 	mov	r5,r4
 8006d10:	12000017 	ldw	r8,0(r2)
 8006d14:	29400104 	addi	r5,r5,4
 8006d18:	10800104 	addi	r2,r2,4
 8006d1c:	2a3fff15 	stw	r8,-4(r5)
 8006d20:	10fffb36 	bltu	r2,r3,8006d10 <__alt_data_end+0xfc006d10>
 8006d24:	1985c83a 	sub	r2,r3,r6
 8006d28:	10bffac4 	addi	r2,r2,-21
 8006d2c:	1004d0ba 	srli	r2,r2,2
 8006d30:	10800044 	addi	r2,r2,1
 8006d34:	1085883a 	add	r2,r2,r2
 8006d38:	1085883a 	add	r2,r2,r2
 8006d3c:	2089883a 	add	r4,r4,r2
 8006d40:	21c0032e 	bgeu	r4,r7,8006d50 <__copybits+0x74>
 8006d44:	20000015 	stw	zero,0(r4)
 8006d48:	21000104 	addi	r4,r4,4
 8006d4c:	21fffd36 	bltu	r4,r7,8006d44 <__alt_data_end+0xfc006d44>
 8006d50:	f800283a 	ret

08006d54 <__any_on>:
 8006d54:	20c00417 	ldw	r3,16(r4)
 8006d58:	2805d17a 	srai	r2,r5,5
 8006d5c:	21000504 	addi	r4,r4,20
 8006d60:	18800d0e 	bge	r3,r2,8006d98 <__any_on+0x44>
 8006d64:	18c7883a 	add	r3,r3,r3
 8006d68:	18c7883a 	add	r3,r3,r3
 8006d6c:	20c7883a 	add	r3,r4,r3
 8006d70:	20c0192e 	bgeu	r4,r3,8006dd8 <__any_on+0x84>
 8006d74:	18bfff17 	ldw	r2,-4(r3)
 8006d78:	18ffff04 	addi	r3,r3,-4
 8006d7c:	1000041e 	bne	r2,zero,8006d90 <__any_on+0x3c>
 8006d80:	20c0142e 	bgeu	r4,r3,8006dd4 <__any_on+0x80>
 8006d84:	18ffff04 	addi	r3,r3,-4
 8006d88:	19400017 	ldw	r5,0(r3)
 8006d8c:	283ffc26 	beq	r5,zero,8006d80 <__alt_data_end+0xfc006d80>
 8006d90:	00800044 	movi	r2,1
 8006d94:	f800283a 	ret
 8006d98:	10c00a0e 	bge	r2,r3,8006dc4 <__any_on+0x70>
 8006d9c:	1085883a 	add	r2,r2,r2
 8006da0:	1085883a 	add	r2,r2,r2
 8006da4:	294007cc 	andi	r5,r5,31
 8006da8:	2087883a 	add	r3,r4,r2
 8006dac:	283ff026 	beq	r5,zero,8006d70 <__alt_data_end+0xfc006d70>
 8006db0:	19800017 	ldw	r6,0(r3)
 8006db4:	3144d83a 	srl	r2,r6,r5
 8006db8:	114a983a 	sll	r5,r2,r5
 8006dbc:	317ff41e 	bne	r6,r5,8006d90 <__alt_data_end+0xfc006d90>
 8006dc0:	003feb06 	br	8006d70 <__alt_data_end+0xfc006d70>
 8006dc4:	1085883a 	add	r2,r2,r2
 8006dc8:	1085883a 	add	r2,r2,r2
 8006dcc:	2087883a 	add	r3,r4,r2
 8006dd0:	003fe706 	br	8006d70 <__alt_data_end+0xfc006d70>
 8006dd4:	f800283a 	ret
 8006dd8:	0005883a 	mov	r2,zero
 8006ddc:	f800283a 	ret

08006de0 <__fpclassifyd>:
 8006de0:	00a00034 	movhi	r2,32768
 8006de4:	10bfffc4 	addi	r2,r2,-1
 8006de8:	2884703a 	and	r2,r5,r2
 8006dec:	10000726 	beq	r2,zero,8006e0c <__fpclassifyd+0x2c>
 8006df0:	00fffc34 	movhi	r3,65520
 8006df4:	019ff834 	movhi	r6,32736
 8006df8:	28c7883a 	add	r3,r5,r3
 8006dfc:	31bfffc4 	addi	r6,r6,-1
 8006e00:	30c00536 	bltu	r6,r3,8006e18 <__fpclassifyd+0x38>
 8006e04:	00800104 	movi	r2,4
 8006e08:	f800283a 	ret
 8006e0c:	2000021e 	bne	r4,zero,8006e18 <__fpclassifyd+0x38>
 8006e10:	00800084 	movi	r2,2
 8006e14:	f800283a 	ret
 8006e18:	00dffc34 	movhi	r3,32752
 8006e1c:	019ff834 	movhi	r6,32736
 8006e20:	28cb883a 	add	r5,r5,r3
 8006e24:	31bfffc4 	addi	r6,r6,-1
 8006e28:	317ff62e 	bgeu	r6,r5,8006e04 <__alt_data_end+0xfc006e04>
 8006e2c:	01400434 	movhi	r5,16
 8006e30:	297fffc4 	addi	r5,r5,-1
 8006e34:	28800236 	bltu	r5,r2,8006e40 <__fpclassifyd+0x60>
 8006e38:	008000c4 	movi	r2,3
 8006e3c:	f800283a 	ret
 8006e40:	10c00226 	beq	r2,r3,8006e4c <__fpclassifyd+0x6c>
 8006e44:	0005883a 	mov	r2,zero
 8006e48:	f800283a 	ret
 8006e4c:	2005003a 	cmpeq	r2,r4,zero
 8006e50:	f800283a 	ret

08006e54 <_sbrk_r>:
 8006e54:	defffd04 	addi	sp,sp,-12
 8006e58:	dc000015 	stw	r16,0(sp)
 8006e5c:	04020074 	movhi	r16,2049
 8006e60:	dc400115 	stw	r17,4(sp)
 8006e64:	8409e704 	addi	r16,r16,10140
 8006e68:	2023883a 	mov	r17,r4
 8006e6c:	2809883a 	mov	r4,r5
 8006e70:	dfc00215 	stw	ra,8(sp)
 8006e74:	80000015 	stw	zero,0(r16)
 8006e78:	800c90c0 	call	800c90c <sbrk>
 8006e7c:	00ffffc4 	movi	r3,-1
 8006e80:	10c00526 	beq	r2,r3,8006e98 <_sbrk_r+0x44>
 8006e84:	dfc00217 	ldw	ra,8(sp)
 8006e88:	dc400117 	ldw	r17,4(sp)
 8006e8c:	dc000017 	ldw	r16,0(sp)
 8006e90:	dec00304 	addi	sp,sp,12
 8006e94:	f800283a 	ret
 8006e98:	80c00017 	ldw	r3,0(r16)
 8006e9c:	183ff926 	beq	r3,zero,8006e84 <__alt_data_end+0xfc006e84>
 8006ea0:	88c00015 	stw	r3,0(r17)
 8006ea4:	003ff706 	br	8006e84 <__alt_data_end+0xfc006e84>

08006ea8 <strcmp>:
 8006ea8:	2144b03a 	or	r2,r4,r5
 8006eac:	108000cc 	andi	r2,r2,3
 8006eb0:	1000171e 	bne	r2,zero,8006f10 <strcmp+0x68>
 8006eb4:	20800017 	ldw	r2,0(r4)
 8006eb8:	28c00017 	ldw	r3,0(r5)
 8006ebc:	10c0141e 	bne	r2,r3,8006f10 <strcmp+0x68>
 8006ec0:	027fbff4 	movhi	r9,65279
 8006ec4:	4a7fbfc4 	addi	r9,r9,-257
 8006ec8:	0086303a 	nor	r3,zero,r2
 8006ecc:	02202074 	movhi	r8,32897
 8006ed0:	1245883a 	add	r2,r2,r9
 8006ed4:	42202004 	addi	r8,r8,-32640
 8006ed8:	10c4703a 	and	r2,r2,r3
 8006edc:	1204703a 	and	r2,r2,r8
 8006ee0:	10000226 	beq	r2,zero,8006eec <strcmp+0x44>
 8006ee4:	00002306 	br	8006f74 <strcmp+0xcc>
 8006ee8:	1000221e 	bne	r2,zero,8006f74 <strcmp+0xcc>
 8006eec:	21000104 	addi	r4,r4,4
 8006ef0:	20c00017 	ldw	r3,0(r4)
 8006ef4:	29400104 	addi	r5,r5,4
 8006ef8:	29800017 	ldw	r6,0(r5)
 8006efc:	1a4f883a 	add	r7,r3,r9
 8006f00:	00c4303a 	nor	r2,zero,r3
 8006f04:	3884703a 	and	r2,r7,r2
 8006f08:	1204703a 	and	r2,r2,r8
 8006f0c:	19bff626 	beq	r3,r6,8006ee8 <__alt_data_end+0xfc006ee8>
 8006f10:	20800003 	ldbu	r2,0(r4)
 8006f14:	10c03fcc 	andi	r3,r2,255
 8006f18:	18c0201c 	xori	r3,r3,128
 8006f1c:	18ffe004 	addi	r3,r3,-128
 8006f20:	18000c26 	beq	r3,zero,8006f54 <strcmp+0xac>
 8006f24:	29800007 	ldb	r6,0(r5)
 8006f28:	19800326 	beq	r3,r6,8006f38 <strcmp+0x90>
 8006f2c:	00001306 	br	8006f7c <strcmp+0xd4>
 8006f30:	29800007 	ldb	r6,0(r5)
 8006f34:	11800b1e 	bne	r2,r6,8006f64 <strcmp+0xbc>
 8006f38:	21000044 	addi	r4,r4,1
 8006f3c:	20c00003 	ldbu	r3,0(r4)
 8006f40:	29400044 	addi	r5,r5,1
 8006f44:	18803fcc 	andi	r2,r3,255
 8006f48:	1080201c 	xori	r2,r2,128
 8006f4c:	10bfe004 	addi	r2,r2,-128
 8006f50:	103ff71e 	bne	r2,zero,8006f30 <__alt_data_end+0xfc006f30>
 8006f54:	0007883a 	mov	r3,zero
 8006f58:	28800003 	ldbu	r2,0(r5)
 8006f5c:	1885c83a 	sub	r2,r3,r2
 8006f60:	f800283a 	ret
 8006f64:	28800003 	ldbu	r2,0(r5)
 8006f68:	18c03fcc 	andi	r3,r3,255
 8006f6c:	1885c83a 	sub	r2,r3,r2
 8006f70:	f800283a 	ret
 8006f74:	0005883a 	mov	r2,zero
 8006f78:	f800283a 	ret
 8006f7c:	10c03fcc 	andi	r3,r2,255
 8006f80:	003ff506 	br	8006f58 <__alt_data_end+0xfc006f58>

08006f84 <__ssprint_r>:
 8006f84:	30800217 	ldw	r2,8(r6)
 8006f88:	defff604 	addi	sp,sp,-40
 8006f8c:	dc800215 	stw	r18,8(sp)
 8006f90:	dfc00915 	stw	ra,36(sp)
 8006f94:	df000815 	stw	fp,32(sp)
 8006f98:	ddc00715 	stw	r23,28(sp)
 8006f9c:	dd800615 	stw	r22,24(sp)
 8006fa0:	dd400515 	stw	r21,20(sp)
 8006fa4:	dd000415 	stw	r20,16(sp)
 8006fa8:	dcc00315 	stw	r19,12(sp)
 8006fac:	dc400115 	stw	r17,4(sp)
 8006fb0:	dc000015 	stw	r16,0(sp)
 8006fb4:	3025883a 	mov	r18,r6
 8006fb8:	10005826 	beq	r2,zero,800711c <__ssprint_r+0x198>
 8006fbc:	2027883a 	mov	r19,r4
 8006fc0:	35c00017 	ldw	r23,0(r6)
 8006fc4:	29000017 	ldw	r4,0(r5)
 8006fc8:	28800217 	ldw	r2,8(r5)
 8006fcc:	2823883a 	mov	r17,r5
 8006fd0:	0039883a 	mov	fp,zero
 8006fd4:	0021883a 	mov	r16,zero
 8006fd8:	80003926 	beq	r16,zero,80070c0 <__ssprint_r+0x13c>
 8006fdc:	102b883a 	mov	r21,r2
 8006fe0:	102d883a 	mov	r22,r2
 8006fe4:	80803a36 	bltu	r16,r2,80070d0 <__ssprint_r+0x14c>
 8006fe8:	88c0030b 	ldhu	r3,12(r17)
 8006fec:	1881200c 	andi	r2,r3,1152
 8006ff0:	10002626 	beq	r2,zero,800708c <__ssprint_r+0x108>
 8006ff4:	88800517 	ldw	r2,20(r17)
 8006ff8:	89400417 	ldw	r5,16(r17)
 8006ffc:	81800044 	addi	r6,r16,1
 8007000:	108f883a 	add	r7,r2,r2
 8007004:	3885883a 	add	r2,r7,r2
 8007008:	100ed7fa 	srli	r7,r2,31
 800700c:	216dc83a 	sub	r22,r4,r5
 8007010:	3589883a 	add	r4,r6,r22
 8007014:	3885883a 	add	r2,r7,r2
 8007018:	102bd07a 	srai	r21,r2,1
 800701c:	a80d883a 	mov	r6,r21
 8007020:	a900022e 	bgeu	r21,r4,800702c <__ssprint_r+0xa8>
 8007024:	202b883a 	mov	r21,r4
 8007028:	200d883a 	mov	r6,r4
 800702c:	18c1000c 	andi	r3,r3,1024
 8007030:	18002a26 	beq	r3,zero,80070dc <__ssprint_r+0x158>
 8007034:	300b883a 	mov	r5,r6
 8007038:	9809883a 	mov	r4,r19
 800703c:	80052f00 	call	80052f0 <_malloc_r>
 8007040:	1029883a 	mov	r20,r2
 8007044:	10002c26 	beq	r2,zero,80070f8 <__ssprint_r+0x174>
 8007048:	89400417 	ldw	r5,16(r17)
 800704c:	b00d883a 	mov	r6,r22
 8007050:	1009883a 	mov	r4,r2
 8007054:	8005be00 	call	8005be0 <memcpy>
 8007058:	8880030b 	ldhu	r2,12(r17)
 800705c:	00fedfc4 	movi	r3,-1153
 8007060:	10c4703a 	and	r2,r2,r3
 8007064:	10802014 	ori	r2,r2,128
 8007068:	8880030d 	sth	r2,12(r17)
 800706c:	a589883a 	add	r4,r20,r22
 8007070:	adadc83a 	sub	r22,r21,r22
 8007074:	8d400515 	stw	r21,20(r17)
 8007078:	8d800215 	stw	r22,8(r17)
 800707c:	8d000415 	stw	r20,16(r17)
 8007080:	89000015 	stw	r4,0(r17)
 8007084:	802b883a 	mov	r21,r16
 8007088:	802d883a 	mov	r22,r16
 800708c:	b00d883a 	mov	r6,r22
 8007090:	e00b883a 	mov	r5,fp
 8007094:	8008a040 	call	8008a04 <memmove>
 8007098:	88800217 	ldw	r2,8(r17)
 800709c:	89000017 	ldw	r4,0(r17)
 80070a0:	90c00217 	ldw	r3,8(r18)
 80070a4:	1545c83a 	sub	r2,r2,r21
 80070a8:	2589883a 	add	r4,r4,r22
 80070ac:	88800215 	stw	r2,8(r17)
 80070b0:	89000015 	stw	r4,0(r17)
 80070b4:	1c21c83a 	sub	r16,r3,r16
 80070b8:	94000215 	stw	r16,8(r18)
 80070bc:	80001726 	beq	r16,zero,800711c <__ssprint_r+0x198>
 80070c0:	bf000017 	ldw	fp,0(r23)
 80070c4:	bc000117 	ldw	r16,4(r23)
 80070c8:	bdc00204 	addi	r23,r23,8
 80070cc:	003fc206 	br	8006fd8 <__alt_data_end+0xfc006fd8>
 80070d0:	802b883a 	mov	r21,r16
 80070d4:	802d883a 	mov	r22,r16
 80070d8:	003fec06 	br	800708c <__alt_data_end+0xfc00708c>
 80070dc:	9809883a 	mov	r4,r19
 80070e0:	8008c880 	call	8008c88 <_realloc_r>
 80070e4:	1029883a 	mov	r20,r2
 80070e8:	103fe01e 	bne	r2,zero,800706c <__alt_data_end+0xfc00706c>
 80070ec:	89400417 	ldw	r5,16(r17)
 80070f0:	9809883a 	mov	r4,r19
 80070f4:	80086f40 	call	80086f4 <_free_r>
 80070f8:	88c0030b 	ldhu	r3,12(r17)
 80070fc:	00800304 	movi	r2,12
 8007100:	98800015 	stw	r2,0(r19)
 8007104:	18c01014 	ori	r3,r3,64
 8007108:	88c0030d 	sth	r3,12(r17)
 800710c:	00bfffc4 	movi	r2,-1
 8007110:	90000215 	stw	zero,8(r18)
 8007114:	90000115 	stw	zero,4(r18)
 8007118:	00000206 	br	8007124 <__ssprint_r+0x1a0>
 800711c:	90000115 	stw	zero,4(r18)
 8007120:	0005883a 	mov	r2,zero
 8007124:	dfc00917 	ldw	ra,36(sp)
 8007128:	df000817 	ldw	fp,32(sp)
 800712c:	ddc00717 	ldw	r23,28(sp)
 8007130:	dd800617 	ldw	r22,24(sp)
 8007134:	dd400517 	ldw	r21,20(sp)
 8007138:	dd000417 	ldw	r20,16(sp)
 800713c:	dcc00317 	ldw	r19,12(sp)
 8007140:	dc800217 	ldw	r18,8(sp)
 8007144:	dc400117 	ldw	r17,4(sp)
 8007148:	dc000017 	ldw	r16,0(sp)
 800714c:	dec00a04 	addi	sp,sp,40
 8007150:	f800283a 	ret

08007154 <___svfiprintf_internal_r>:
 8007154:	2880030b 	ldhu	r2,12(r5)
 8007158:	deffc804 	addi	sp,sp,-224
 800715c:	dcc03115 	stw	r19,196(sp)
 8007160:	dfc03715 	stw	ra,220(sp)
 8007164:	df003615 	stw	fp,216(sp)
 8007168:	ddc03515 	stw	r23,212(sp)
 800716c:	dd803415 	stw	r22,208(sp)
 8007170:	dd403315 	stw	r21,204(sp)
 8007174:	dd003215 	stw	r20,200(sp)
 8007178:	dc803015 	stw	r18,192(sp)
 800717c:	dc402f15 	stw	r17,188(sp)
 8007180:	dc002e15 	stw	r16,184(sp)
 8007184:	d9402315 	stw	r5,140(sp)
 8007188:	d9002715 	stw	r4,156(sp)
 800718c:	1080200c 	andi	r2,r2,128
 8007190:	d9c02415 	stw	r7,144(sp)
 8007194:	3027883a 	mov	r19,r6
 8007198:	10000226 	beq	r2,zero,80071a4 <___svfiprintf_internal_r+0x50>
 800719c:	28800417 	ldw	r2,16(r5)
 80071a0:	10046d26 	beq	r2,zero,8008358 <___svfiprintf_internal_r+0x1204>
 80071a4:	d8801a04 	addi	r2,sp,104
 80071a8:	d8c019c4 	addi	r3,sp,103
 80071ac:	05820074 	movhi	r22,2049
 80071b0:	10c9c83a 	sub	r4,r2,r3
 80071b4:	b5bb5e04 	addi	r22,r22,-4744
 80071b8:	d8801e15 	stw	r2,120(sp)
 80071bc:	d8c01f15 	stw	r3,124(sp)
 80071c0:	dec01a15 	stw	sp,104(sp)
 80071c4:	d8001c15 	stw	zero,112(sp)
 80071c8:	d8001b15 	stw	zero,108(sp)
 80071cc:	d811883a 	mov	r8,sp
 80071d0:	d8002915 	stw	zero,164(sp)
 80071d4:	d8002615 	stw	zero,152(sp)
 80071d8:	d9002c15 	stw	r4,176(sp)
 80071dc:	98800007 	ldb	r2,0(r19)
 80071e0:	10031426 	beq	r2,zero,8007e34 <___svfiprintf_internal_r+0xce0>
 80071e4:	00c00944 	movi	r3,37
 80071e8:	9825883a 	mov	r18,r19
 80071ec:	10c0021e 	bne	r2,r3,80071f8 <___svfiprintf_internal_r+0xa4>
 80071f0:	00001406 	br	8007244 <___svfiprintf_internal_r+0xf0>
 80071f4:	10c00326 	beq	r2,r3,8007204 <___svfiprintf_internal_r+0xb0>
 80071f8:	94800044 	addi	r18,r18,1
 80071fc:	90800007 	ldb	r2,0(r18)
 8007200:	103ffc1e 	bne	r2,zero,80071f4 <__alt_data_end+0xfc0071f4>
 8007204:	94e1c83a 	sub	r16,r18,r19
 8007208:	80000e26 	beq	r16,zero,8007244 <___svfiprintf_internal_r+0xf0>
 800720c:	d8c01c17 	ldw	r3,112(sp)
 8007210:	d8801b17 	ldw	r2,108(sp)
 8007214:	44c00015 	stw	r19,0(r8)
 8007218:	1c07883a 	add	r3,r3,r16
 800721c:	10800044 	addi	r2,r2,1
 8007220:	d8c01c15 	stw	r3,112(sp)
 8007224:	44000115 	stw	r16,4(r8)
 8007228:	d8801b15 	stw	r2,108(sp)
 800722c:	00c001c4 	movi	r3,7
 8007230:	18835c16 	blt	r3,r2,8007fa4 <___svfiprintf_internal_r+0xe50>
 8007234:	42000204 	addi	r8,r8,8
 8007238:	d9402617 	ldw	r5,152(sp)
 800723c:	2c0b883a 	add	r5,r5,r16
 8007240:	d9402615 	stw	r5,152(sp)
 8007244:	90800007 	ldb	r2,0(r18)
 8007248:	1002fc26 	beq	r2,zero,8007e3c <___svfiprintf_internal_r+0xce8>
 800724c:	0023883a 	mov	r17,zero
 8007250:	00bfffc4 	movi	r2,-1
 8007254:	0021883a 	mov	r16,zero
 8007258:	94c00044 	addi	r19,r18,1
 800725c:	90c00047 	ldb	r3,1(r18)
 8007260:	dc402105 	stb	r17,132(sp)
 8007264:	d8001d85 	stb	zero,118(sp)
 8007268:	002b883a 	mov	r21,zero
 800726c:	d8802015 	stw	r2,128(sp)
 8007270:	d8002515 	stw	zero,148(sp)
 8007274:	04801604 	movi	r18,88
 8007278:	05000244 	movi	r20,9
 800727c:	402f883a 	mov	r23,r8
 8007280:	8023883a 	mov	r17,r16
 8007284:	9cc00044 	addi	r19,r19,1
 8007288:	18bff804 	addi	r2,r3,-32
 800728c:	9081fb36 	bltu	r18,r2,8007a7c <___svfiprintf_internal_r+0x928>
 8007290:	100490ba 	slli	r2,r2,2
 8007294:	01020034 	movhi	r4,2048
 8007298:	211caa04 	addi	r4,r4,29352
 800729c:	1105883a 	add	r2,r2,r4
 80072a0:	10800017 	ldw	r2,0(r2)
 80072a4:	1000683a 	jmp	r2
 80072a8:	080074a8 	cmpgeui	zero,at,466
 80072ac:	08007a7c 	xorhi	zero,at,489
 80072b0:	08007a7c 	xorhi	zero,at,489
 80072b4:	0800749c 	xori	zero,at,466
 80072b8:	08007a7c 	xorhi	zero,at,489
 80072bc:	08007a7c 	xorhi	zero,at,489
 80072c0:	08007a7c 	xorhi	zero,at,489
 80072c4:	08007a7c 	xorhi	zero,at,489
 80072c8:	08007a7c 	xorhi	zero,at,489
 80072cc:	08007a7c 	xorhi	zero,at,489
 80072d0:	0800740c 	andi	zero,at,464
 80072d4:	08007608 	cmpgei	zero,at,472
 80072d8:	08007a7c 	xorhi	zero,at,489
 80072dc:	08007434 	orhi	zero,at,464
 80072e0:	08007ab8 	rdprs	zero,at,490
 80072e4:	08007a7c 	xorhi	zero,at,489
 80072e8:	08007aac 	andhi	zero,at,490
 80072ec:	08007a40 	call	8007a4 <__alt_mem_onchip_memory2_0+0x8005a4>
 80072f0:	08007a40 	call	8007a4 <__alt_mem_onchip_memory2_0+0x8005a4>
 80072f4:	08007a40 	call	8007a4 <__alt_mem_onchip_memory2_0+0x8005a4>
 80072f8:	08007a40 	call	8007a4 <__alt_mem_onchip_memory2_0+0x8005a4>
 80072fc:	08007a40 	call	8007a4 <__alt_mem_onchip_memory2_0+0x8005a4>
 8007300:	08007a40 	call	8007a4 <__alt_mem_onchip_memory2_0+0x8005a4>
 8007304:	08007a40 	call	8007a4 <__alt_mem_onchip_memory2_0+0x8005a4>
 8007308:	08007a40 	call	8007a4 <__alt_mem_onchip_memory2_0+0x8005a4>
 800730c:	08007a40 	call	8007a4 <__alt_mem_onchip_memory2_0+0x8005a4>
 8007310:	08007a7c 	xorhi	zero,at,489
 8007314:	08007a7c 	xorhi	zero,at,489
 8007318:	08007a7c 	xorhi	zero,at,489
 800731c:	08007a7c 	xorhi	zero,at,489
 8007320:	08007a7c 	xorhi	zero,at,489
 8007324:	08007a7c 	xorhi	zero,at,489
 8007328:	08007a7c 	xorhi	zero,at,489
 800732c:	08007a7c 	xorhi	zero,at,489
 8007330:	08007a7c 	xorhi	zero,at,489
 8007334:	08007a7c 	xorhi	zero,at,489
 8007338:	080079c4 	addi	zero,at,487
 800733c:	08007a7c 	xorhi	zero,at,489
 8007340:	08007a7c 	xorhi	zero,at,489
 8007344:	08007a7c 	xorhi	zero,at,489
 8007348:	08007a7c 	xorhi	zero,at,489
 800734c:	08007a7c 	xorhi	zero,at,489
 8007350:	08007a7c 	xorhi	zero,at,489
 8007354:	08007a7c 	xorhi	zero,at,489
 8007358:	08007a7c 	xorhi	zero,at,489
 800735c:	08007a7c 	xorhi	zero,at,489
 8007360:	08007a7c 	xorhi	zero,at,489
 8007364:	08007b74 	orhi	zero,at,493
 8007368:	08007a7c 	xorhi	zero,at,489
 800736c:	08007a7c 	xorhi	zero,at,489
 8007370:	08007a7c 	xorhi	zero,at,489
 8007374:	08007a7c 	xorhi	zero,at,489
 8007378:	08007a7c 	xorhi	zero,at,489
 800737c:	08007b00 	call	8007b0 <__alt_mem_onchip_memory2_0+0x8005b0>
 8007380:	08007a7c 	xorhi	zero,at,489
 8007384:	08007a7c 	xorhi	zero,at,489
 8007388:	08007800 	call	800780 <__alt_mem_onchip_memory2_0+0x800580>
 800738c:	08007a7c 	xorhi	zero,at,489
 8007390:	08007a7c 	xorhi	zero,at,489
 8007394:	08007a7c 	xorhi	zero,at,489
 8007398:	08007a7c 	xorhi	zero,at,489
 800739c:	08007a7c 	xorhi	zero,at,489
 80073a0:	08007a7c 	xorhi	zero,at,489
 80073a4:	08007a7c 	xorhi	zero,at,489
 80073a8:	08007a7c 	xorhi	zero,at,489
 80073ac:	08007a7c 	xorhi	zero,at,489
 80073b0:	08007a7c 	xorhi	zero,at,489
 80073b4:	080076cc 	andi	zero,at,475
 80073b8:	080078b0 	cmpltui	zero,at,482
 80073bc:	08007a7c 	xorhi	zero,at,489
 80073c0:	08007a7c 	xorhi	zero,at,489
 80073c4:	08007a7c 	xorhi	zero,at,489
 80073c8:	080078a4 	muli	zero,at,482
 80073cc:	080078b0 	cmpltui	zero,at,482
 80073d0:	08007a7c 	xorhi	zero,at,489
 80073d4:	08007a7c 	xorhi	zero,at,489
 80073d8:	08007890 	cmplti	zero,at,482
 80073dc:	08007a7c 	xorhi	zero,at,489
 80073e0:	08007850 	cmplti	zero,at,481
 80073e4:	0800761c 	xori	zero,at,472
 80073e8:	08007440 	call	800744 <__alt_mem_onchip_memory2_0+0x800544>
 80073ec:	080079b8 	rdprs	zero,at,486
 80073f0:	08007a7c 	xorhi	zero,at,489
 80073f4:	08007964 	muli	zero,at,485
 80073f8:	08007a7c 	xorhi	zero,at,489
 80073fc:	08007580 	call	800758 <__alt_mem_onchip_memory2_0+0x800558>
 8007400:	08007a7c 	xorhi	zero,at,489
 8007404:	08007a7c 	xorhi	zero,at,489
 8007408:	080074cc 	andi	zero,at,467
 800740c:	d9002417 	ldw	r4,144(sp)
 8007410:	d9402417 	ldw	r5,144(sp)
 8007414:	21000017 	ldw	r4,0(r4)
 8007418:	28800104 	addi	r2,r5,4
 800741c:	d9002515 	stw	r4,148(sp)
 8007420:	20032b0e 	bge	r4,zero,80080d0 <___svfiprintf_internal_r+0xf7c>
 8007424:	d8c02517 	ldw	r3,148(sp)
 8007428:	d8802415 	stw	r2,144(sp)
 800742c:	00c7c83a 	sub	r3,zero,r3
 8007430:	d8c02515 	stw	r3,148(sp)
 8007434:	8c400114 	ori	r17,r17,4
 8007438:	98c00007 	ldb	r3,0(r19)
 800743c:	003f9106 	br	8007284 <__alt_data_end+0xfc007284>
 8007440:	00800c04 	movi	r2,48
 8007444:	d9402417 	ldw	r5,144(sp)
 8007448:	d9002017 	ldw	r4,128(sp)
 800744c:	d8801d05 	stb	r2,116(sp)
 8007450:	00801e04 	movi	r2,120
 8007454:	d8801d45 	stb	r2,117(sp)
 8007458:	d8001d85 	stb	zero,118(sp)
 800745c:	b811883a 	mov	r8,r23
 8007460:	28c00104 	addi	r3,r5,4
 8007464:	2c800017 	ldw	r18,0(r5)
 8007468:	0029883a 	mov	r20,zero
 800746c:	88800094 	ori	r2,r17,2
 8007470:	20036316 	blt	r4,zero,8008200 <___svfiprintf_internal_r+0x10ac>
 8007474:	00bfdfc4 	movi	r2,-129
 8007478:	88a0703a 	and	r16,r17,r2
 800747c:	d8c02415 	stw	r3,144(sp)
 8007480:	84000094 	ori	r16,r16,2
 8007484:	90031c26 	beq	r18,zero,80080f8 <___svfiprintf_internal_r+0xfa4>
 8007488:	01420074 	movhi	r5,2049
 800748c:	297afd04 	addi	r5,r5,-5132
 8007490:	002b883a 	mov	r21,zero
 8007494:	d9402915 	stw	r5,164(sp)
 8007498:	00002906 	br	8007540 <___svfiprintf_internal_r+0x3ec>
 800749c:	8c400054 	ori	r17,r17,1
 80074a0:	98c00007 	ldb	r3,0(r19)
 80074a4:	003f7706 	br	8007284 <__alt_data_end+0xfc007284>
 80074a8:	a8803fcc 	andi	r2,r21,255
 80074ac:	1080201c 	xori	r2,r2,128
 80074b0:	10bfe004 	addi	r2,r2,-128
 80074b4:	10032a1e 	bne	r2,zero,8008160 <___svfiprintf_internal_r+0x100c>
 80074b8:	00c00044 	movi	r3,1
 80074bc:	d8c02105 	stb	r3,132(sp)
 80074c0:	05400804 	movi	r21,32
 80074c4:	98c00007 	ldb	r3,0(r19)
 80074c8:	003f6e06 	br	8007284 <__alt_data_end+0xfc007284>
 80074cc:	8821883a 	mov	r16,r17
 80074d0:	dc402103 	ldbu	r17,132(sp)
 80074d4:	b811883a 	mov	r8,r23
 80074d8:	8c403fcc 	andi	r17,r17,255
 80074dc:	8803f01e 	bne	r17,zero,80084a0 <___svfiprintf_internal_r+0x134c>
 80074e0:	00820074 	movhi	r2,2049
 80074e4:	10bafd04 	addi	r2,r2,-5132
 80074e8:	d8802915 	stw	r2,164(sp)
 80074ec:	8080080c 	andi	r2,r16,32
 80074f0:	1000cd26 	beq	r2,zero,8007828 <___svfiprintf_internal_r+0x6d4>
 80074f4:	d9002417 	ldw	r4,144(sp)
 80074f8:	24800017 	ldw	r18,0(r4)
 80074fc:	25000117 	ldw	r20,4(r4)
 8007500:	21000204 	addi	r4,r4,8
 8007504:	d9002415 	stw	r4,144(sp)
 8007508:	8080004c 	andi	r2,r16,1
 800750c:	1002c726 	beq	r2,zero,800802c <___svfiprintf_internal_r+0xed8>
 8007510:	9504b03a 	or	r2,r18,r20
 8007514:	1003061e 	bne	r2,zero,8008130 <___svfiprintf_internal_r+0xfdc>
 8007518:	d9002017 	ldw	r4,128(sp)
 800751c:	d8001d85 	stb	zero,118(sp)
 8007520:	20033e16 	blt	r4,zero,800821c <___svfiprintf_internal_r+0x10c8>
 8007524:	00bfdfc4 	movi	r2,-129
 8007528:	80a0703a 	and	r16,r16,r2
 800752c:	d9402017 	ldw	r5,128(sp)
 8007530:	002b883a 	mov	r21,zero
 8007534:	28002826 	beq	r5,zero,80075d8 <___svfiprintf_internal_r+0x484>
 8007538:	0025883a 	mov	r18,zero
 800753c:	0029883a 	mov	r20,zero
 8007540:	d9002917 	ldw	r4,164(sp)
 8007544:	dc401a04 	addi	r17,sp,104
 8007548:	908003cc 	andi	r2,r18,15
 800754c:	a006973a 	slli	r3,r20,28
 8007550:	2085883a 	add	r2,r4,r2
 8007554:	9024d13a 	srli	r18,r18,4
 8007558:	10800003 	ldbu	r2,0(r2)
 800755c:	a028d13a 	srli	r20,r20,4
 8007560:	8c7fffc4 	addi	r17,r17,-1
 8007564:	1ca4b03a 	or	r18,r3,r18
 8007568:	88800005 	stb	r2,0(r17)
 800756c:	9504b03a 	or	r2,r18,r20
 8007570:	103ff51e 	bne	r2,zero,8007548 <__alt_data_end+0xfc007548>
 8007574:	d8801e17 	ldw	r2,120(sp)
 8007578:	1469c83a 	sub	r20,r2,r17
 800757c:	00001906 	br	80075e4 <___svfiprintf_internal_r+0x490>
 8007580:	8821883a 	mov	r16,r17
 8007584:	dc402103 	ldbu	r17,132(sp)
 8007588:	b811883a 	mov	r8,r23
 800758c:	8c403fcc 	andi	r17,r17,255
 8007590:	8803d01e 	bne	r17,zero,80084d4 <___svfiprintf_internal_r+0x1380>
 8007594:	8080080c 	andi	r2,r16,32
 8007598:	10016126 	beq	r2,zero,8007b20 <___svfiprintf_internal_r+0x9cc>
 800759c:	d9002417 	ldw	r4,144(sp)
 80075a0:	d9402017 	ldw	r5,128(sp)
 80075a4:	d8001d85 	stb	zero,118(sp)
 80075a8:	20c00204 	addi	r3,r4,8
 80075ac:	24800017 	ldw	r18,0(r4)
 80075b0:	25000117 	ldw	r20,4(r4)
 80075b4:	28030f16 	blt	r5,zero,80081f4 <___svfiprintf_internal_r+0x10a0>
 80075b8:	013fdfc4 	movi	r4,-129
 80075bc:	9504b03a 	or	r2,r18,r20
 80075c0:	d8c02415 	stw	r3,144(sp)
 80075c4:	8120703a 	and	r16,r16,r4
 80075c8:	002b883a 	mov	r21,zero
 80075cc:	1000cd1e 	bne	r2,zero,8007904 <___svfiprintf_internal_r+0x7b0>
 80075d0:	d8c02017 	ldw	r3,128(sp)
 80075d4:	1803141e 	bne	r3,zero,8008228 <___svfiprintf_internal_r+0x10d4>
 80075d8:	d8002015 	stw	zero,128(sp)
 80075dc:	0029883a 	mov	r20,zero
 80075e0:	dc401a04 	addi	r17,sp,104
 80075e4:	dc802017 	ldw	r18,128(sp)
 80075e8:	9500010e 	bge	r18,r20,80075f0 <___svfiprintf_internal_r+0x49c>
 80075ec:	a025883a 	mov	r18,r20
 80075f0:	ad403fcc 	andi	r21,r21,255
 80075f4:	ad40201c 	xori	r21,r21,128
 80075f8:	ad7fe004 	addi	r21,r21,-128
 80075fc:	a8003f26 	beq	r21,zero,80076fc <___svfiprintf_internal_r+0x5a8>
 8007600:	94800044 	addi	r18,r18,1
 8007604:	00003d06 	br	80076fc <___svfiprintf_internal_r+0x5a8>
 8007608:	00c00044 	movi	r3,1
 800760c:	d8c02105 	stb	r3,132(sp)
 8007610:	05400ac4 	movi	r21,43
 8007614:	98c00007 	ldb	r3,0(r19)
 8007618:	003f1a06 	br	8007284 <__alt_data_end+0xfc007284>
 800761c:	8821883a 	mov	r16,r17
 8007620:	dc402103 	ldbu	r17,132(sp)
 8007624:	b811883a 	mov	r8,r23
 8007628:	8c403fcc 	andi	r17,r17,255
 800762c:	8803a71e 	bne	r17,zero,80084cc <___svfiprintf_internal_r+0x1378>
 8007630:	8080080c 	andi	r2,r16,32
 8007634:	10015726 	beq	r2,zero,8007b94 <___svfiprintf_internal_r+0xa40>
 8007638:	d8c02417 	ldw	r3,144(sp)
 800763c:	d9002017 	ldw	r4,128(sp)
 8007640:	d8001d85 	stb	zero,118(sp)
 8007644:	18800204 	addi	r2,r3,8
 8007648:	1c800017 	ldw	r18,0(r3)
 800764c:	1d000117 	ldw	r20,4(r3)
 8007650:	2002db16 	blt	r4,zero,80081c0 <___svfiprintf_internal_r+0x106c>
 8007654:	013fdfc4 	movi	r4,-129
 8007658:	9506b03a 	or	r3,r18,r20
 800765c:	d8802415 	stw	r2,144(sp)
 8007660:	8120703a 	and	r16,r16,r4
 8007664:	18015826 	beq	r3,zero,8007bc8 <___svfiprintf_internal_r+0xa74>
 8007668:	002b883a 	mov	r21,zero
 800766c:	dc401a04 	addi	r17,sp,104
 8007670:	9006d0fa 	srli	r3,r18,3
 8007674:	a008977a 	slli	r4,r20,29
 8007678:	a028d0fa 	srli	r20,r20,3
 800767c:	948001cc 	andi	r18,r18,7
 8007680:	90800c04 	addi	r2,r18,48
 8007684:	8c7fffc4 	addi	r17,r17,-1
 8007688:	20e4b03a 	or	r18,r4,r3
 800768c:	88800005 	stb	r2,0(r17)
 8007690:	9506b03a 	or	r3,r18,r20
 8007694:	183ff61e 	bne	r3,zero,8007670 <__alt_data_end+0xfc007670>
 8007698:	80c0004c 	andi	r3,r16,1
 800769c:	18028926 	beq	r3,zero,80080c4 <___svfiprintf_internal_r+0xf70>
 80076a0:	10803fcc 	andi	r2,r2,255
 80076a4:	1080201c 	xori	r2,r2,128
 80076a8:	10bfe004 	addi	r2,r2,-128
 80076ac:	00c00c04 	movi	r3,48
 80076b0:	10ffb026 	beq	r2,r3,8007574 <__alt_data_end+0xfc007574>
 80076b4:	88ffffc5 	stb	r3,-1(r17)
 80076b8:	d8c01e17 	ldw	r3,120(sp)
 80076bc:	88bfffc4 	addi	r2,r17,-1
 80076c0:	1023883a 	mov	r17,r2
 80076c4:	18a9c83a 	sub	r20,r3,r2
 80076c8:	003fc606 	br	80075e4 <__alt_data_end+0xfc0075e4>
 80076cc:	d8c02417 	ldw	r3,144(sp)
 80076d0:	04800044 	movi	r18,1
 80076d4:	8821883a 	mov	r16,r17
 80076d8:	18800017 	ldw	r2,0(r3)
 80076dc:	18c00104 	addi	r3,r3,4
 80076e0:	b811883a 	mov	r8,r23
 80076e4:	d8001d85 	stb	zero,118(sp)
 80076e8:	d8801005 	stb	r2,64(sp)
 80076ec:	d8c02415 	stw	r3,144(sp)
 80076f0:	9029883a 	mov	r20,r18
 80076f4:	dc401004 	addi	r17,sp,64
 80076f8:	d8002015 	stw	zero,128(sp)
 80076fc:	80c0008c 	andi	r3,r16,2
 8007700:	d8c02115 	stw	r3,132(sp)
 8007704:	18000126 	beq	r3,zero,800770c <___svfiprintf_internal_r+0x5b8>
 8007708:	94800084 	addi	r18,r18,2
 800770c:	80c0210c 	andi	r3,r16,132
 8007710:	d8c02215 	stw	r3,136(sp)
 8007714:	1801321e 	bne	r3,zero,8007be0 <___svfiprintf_internal_r+0xa8c>
 8007718:	d9002517 	ldw	r4,148(sp)
 800771c:	24b9c83a 	sub	fp,r4,r18
 8007720:	07012f0e 	bge	zero,fp,8007be0 <___svfiprintf_internal_r+0xa8c>
 8007724:	02400404 	movi	r9,16
 8007728:	d8c01c17 	ldw	r3,112(sp)
 800772c:	d8801b17 	ldw	r2,108(sp)
 8007730:	4f03250e 	bge	r9,fp,80083c8 <___svfiprintf_internal_r+0x1274>
 8007734:	01020074 	movhi	r4,2049
 8007738:	213b6204 	addi	r4,r4,-4728
 800773c:	dc002a15 	stw	r16,168(sp)
 8007740:	dc402b15 	stw	r17,172(sp)
 8007744:	d9002815 	stw	r4,160(sp)
 8007748:	e023883a 	mov	r17,fp
 800774c:	482f883a 	mov	r23,r9
 8007750:	9839883a 	mov	fp,r19
 8007754:	054001c4 	movi	r21,7
 8007758:	9027883a 	mov	r19,r18
 800775c:	dc002717 	ldw	r16,156(sp)
 8007760:	dc802317 	ldw	r18,140(sp)
 8007764:	00000306 	br	8007774 <___svfiprintf_internal_r+0x620>
 8007768:	8c7ffc04 	addi	r17,r17,-16
 800776c:	42000204 	addi	r8,r8,8
 8007770:	bc40130e 	bge	r23,r17,80077c0 <___svfiprintf_internal_r+0x66c>
 8007774:	01420074 	movhi	r5,2049
 8007778:	18c00404 	addi	r3,r3,16
 800777c:	10800044 	addi	r2,r2,1
 8007780:	297b6204 	addi	r5,r5,-4728
 8007784:	41400015 	stw	r5,0(r8)
 8007788:	45c00115 	stw	r23,4(r8)
 800778c:	d8c01c15 	stw	r3,112(sp)
 8007790:	d8801b15 	stw	r2,108(sp)
 8007794:	a8bff40e 	bge	r21,r2,8007768 <__alt_data_end+0xfc007768>
 8007798:	d9801a04 	addi	r6,sp,104
 800779c:	900b883a 	mov	r5,r18
 80077a0:	8009883a 	mov	r4,r16
 80077a4:	8006f840 	call	8006f84 <__ssprint_r>
 80077a8:	1001aa1e 	bne	r2,zero,8007e54 <___svfiprintf_internal_r+0xd00>
 80077ac:	8c7ffc04 	addi	r17,r17,-16
 80077b0:	d8c01c17 	ldw	r3,112(sp)
 80077b4:	d8801b17 	ldw	r2,108(sp)
 80077b8:	d811883a 	mov	r8,sp
 80077bc:	bc7fed16 	blt	r23,r17,8007774 <__alt_data_end+0xfc007774>
 80077c0:	9825883a 	mov	r18,r19
 80077c4:	dc002a17 	ldw	r16,168(sp)
 80077c8:	e027883a 	mov	r19,fp
 80077cc:	8839883a 	mov	fp,r17
 80077d0:	dc402b17 	ldw	r17,172(sp)
 80077d4:	d9002817 	ldw	r4,160(sp)
 80077d8:	e0c7883a 	add	r3,fp,r3
 80077dc:	10800044 	addi	r2,r2,1
 80077e0:	41000015 	stw	r4,0(r8)
 80077e4:	47000115 	stw	fp,4(r8)
 80077e8:	d8c01c15 	stw	r3,112(sp)
 80077ec:	d8801b15 	stw	r2,108(sp)
 80077f0:	010001c4 	movi	r4,7
 80077f4:	20821616 	blt	r4,r2,8008050 <___svfiprintf_internal_r+0xefc>
 80077f8:	42000204 	addi	r8,r8,8
 80077fc:	0000fa06 	br	8007be8 <___svfiprintf_internal_r+0xa94>
 8007800:	8821883a 	mov	r16,r17
 8007804:	dc402103 	ldbu	r17,132(sp)
 8007808:	b811883a 	mov	r8,r23
 800780c:	8c403fcc 	andi	r17,r17,255
 8007810:	8803361e 	bne	r17,zero,80084ec <___svfiprintf_internal_r+0x1398>
 8007814:	01420074 	movhi	r5,2049
 8007818:	297af804 	addi	r5,r5,-5152
 800781c:	d9402915 	stw	r5,164(sp)
 8007820:	8080080c 	andi	r2,r16,32
 8007824:	103f331e 	bne	r2,zero,80074f4 <__alt_data_end+0xfc0074f4>
 8007828:	8080040c 	andi	r2,r16,16
 800782c:	1002551e 	bne	r2,zero,8008184 <___svfiprintf_internal_r+0x1030>
 8007830:	8080100c 	andi	r2,r16,64
 8007834:	1002a626 	beq	r2,zero,80082d0 <___svfiprintf_internal_r+0x117c>
 8007838:	d8802417 	ldw	r2,144(sp)
 800783c:	0029883a 	mov	r20,zero
 8007840:	1480000b 	ldhu	r18,0(r2)
 8007844:	10800104 	addi	r2,r2,4
 8007848:	d8802415 	stw	r2,144(sp)
 800784c:	003f2e06 	br	8007508 <__alt_data_end+0xfc007508>
 8007850:	8821883a 	mov	r16,r17
 8007854:	dc402103 	ldbu	r17,132(sp)
 8007858:	b811883a 	mov	r8,r23
 800785c:	8c403fcc 	andi	r17,r17,255
 8007860:	88030b1e 	bne	r17,zero,8008490 <___svfiprintf_internal_r+0x133c>
 8007864:	8080080c 	andi	r2,r16,32
 8007868:	1002271e 	bne	r2,zero,8008108 <___svfiprintf_internal_r+0xfb4>
 800786c:	8080040c 	andi	r2,r16,16
 8007870:	10028e26 	beq	r2,zero,80082ac <___svfiprintf_internal_r+0x1158>
 8007874:	d8c02417 	ldw	r3,144(sp)
 8007878:	d9002617 	ldw	r4,152(sp)
 800787c:	18800017 	ldw	r2,0(r3)
 8007880:	18c00104 	addi	r3,r3,4
 8007884:	d8c02415 	stw	r3,144(sp)
 8007888:	11000015 	stw	r4,0(r2)
 800788c:	003e5306 	br	80071dc <__alt_data_end+0xfc0071dc>
 8007890:	98c00007 	ldb	r3,0(r19)
 8007894:	01401b04 	movi	r5,108
 8007898:	19424f26 	beq	r3,r5,80081d8 <___svfiprintf_internal_r+0x1084>
 800789c:	8c400414 	ori	r17,r17,16
 80078a0:	003e7806 	br	8007284 <__alt_data_end+0xfc007284>
 80078a4:	8c401014 	ori	r17,r17,64
 80078a8:	98c00007 	ldb	r3,0(r19)
 80078ac:	003e7506 	br	8007284 <__alt_data_end+0xfc007284>
 80078b0:	8821883a 	mov	r16,r17
 80078b4:	dc402103 	ldbu	r17,132(sp)
 80078b8:	b811883a 	mov	r8,r23
 80078bc:	8c403fcc 	andi	r17,r17,255
 80078c0:	8802fe1e 	bne	r17,zero,80084bc <___svfiprintf_internal_r+0x1368>
 80078c4:	8080080c 	andi	r2,r16,32
 80078c8:	10004626 	beq	r2,zero,80079e4 <___svfiprintf_internal_r+0x890>
 80078cc:	d9002417 	ldw	r4,144(sp)
 80078d0:	20800117 	ldw	r2,4(r4)
 80078d4:	24800017 	ldw	r18,0(r4)
 80078d8:	21000204 	addi	r4,r4,8
 80078dc:	d9002415 	stw	r4,144(sp)
 80078e0:	1029883a 	mov	r20,r2
 80078e4:	10004a16 	blt	r2,zero,8007a10 <___svfiprintf_internal_r+0x8bc>
 80078e8:	d9002017 	ldw	r4,128(sp)
 80078ec:	dd401d83 	ldbu	r21,118(sp)
 80078f0:	2001eb16 	blt	r4,zero,80080a0 <___svfiprintf_internal_r+0xf4c>
 80078f4:	00ffdfc4 	movi	r3,-129
 80078f8:	9504b03a 	or	r2,r18,r20
 80078fc:	80e0703a 	and	r16,r16,r3
 8007900:	103f3326 	beq	r2,zero,80075d0 <__alt_data_end+0xfc0075d0>
 8007904:	a0009426 	beq	r20,zero,8007b58 <___svfiprintf_internal_r+0xa04>
 8007908:	dc401a04 	addi	r17,sp,104
 800790c:	402f883a 	mov	r23,r8
 8007910:	9009883a 	mov	r4,r18
 8007914:	a00b883a 	mov	r5,r20
 8007918:	01800284 	movi	r6,10
 800791c:	000f883a 	mov	r7,zero
 8007920:	80098f40 	call	80098f4 <__umoddi3>
 8007924:	10800c04 	addi	r2,r2,48
 8007928:	8c7fffc4 	addi	r17,r17,-1
 800792c:	9009883a 	mov	r4,r18
 8007930:	a00b883a 	mov	r5,r20
 8007934:	88800005 	stb	r2,0(r17)
 8007938:	01800284 	movi	r6,10
 800793c:	000f883a 	mov	r7,zero
 8007940:	80092f80 	call	80092f8 <__udivdi3>
 8007944:	1025883a 	mov	r18,r2
 8007948:	10c4b03a 	or	r2,r2,r3
 800794c:	1829883a 	mov	r20,r3
 8007950:	103fef1e 	bne	r2,zero,8007910 <__alt_data_end+0xfc007910>
 8007954:	d9001e17 	ldw	r4,120(sp)
 8007958:	b811883a 	mov	r8,r23
 800795c:	2469c83a 	sub	r20,r4,r17
 8007960:	003f2006 	br	80075e4 <__alt_data_end+0xfc0075e4>
 8007964:	d8802417 	ldw	r2,144(sp)
 8007968:	8821883a 	mov	r16,r17
 800796c:	d8001d85 	stb	zero,118(sp)
 8007970:	14400017 	ldw	r17,0(r2)
 8007974:	b811883a 	mov	r8,r23
 8007978:	15c00104 	addi	r23,r2,4
 800797c:	88026c26 	beq	r17,zero,8008330 <___svfiprintf_internal_r+0x11dc>
 8007980:	d8c02017 	ldw	r3,128(sp)
 8007984:	18025f16 	blt	r3,zero,8008304 <___svfiprintf_internal_r+0x11b0>
 8007988:	180d883a 	mov	r6,r3
 800798c:	000b883a 	mov	r5,zero
 8007990:	8809883a 	mov	r4,r17
 8007994:	da002d15 	stw	r8,180(sp)
 8007998:	8005afc0 	call	8005afc <memchr>
 800799c:	da002d17 	ldw	r8,180(sp)
 80079a0:	1002a526 	beq	r2,zero,8008438 <___svfiprintf_internal_r+0x12e4>
 80079a4:	1469c83a 	sub	r20,r2,r17
 80079a8:	dd401d83 	ldbu	r21,118(sp)
 80079ac:	ddc02415 	stw	r23,144(sp)
 80079b0:	d8002015 	stw	zero,128(sp)
 80079b4:	003f0b06 	br	80075e4 <__alt_data_end+0xfc0075e4>
 80079b8:	8c400814 	ori	r17,r17,32
 80079bc:	98c00007 	ldb	r3,0(r19)
 80079c0:	003e3006 	br	8007284 <__alt_data_end+0xfc007284>
 80079c4:	8821883a 	mov	r16,r17
 80079c8:	dc402103 	ldbu	r17,132(sp)
 80079cc:	b811883a 	mov	r8,r23
 80079d0:	8c403fcc 	andi	r17,r17,255
 80079d4:	8802b01e 	bne	r17,zero,8008498 <___svfiprintf_internal_r+0x1344>
 80079d8:	84000414 	ori	r16,r16,16
 80079dc:	8080080c 	andi	r2,r16,32
 80079e0:	103fba1e 	bne	r2,zero,80078cc <__alt_data_end+0xfc0078cc>
 80079e4:	8080040c 	andi	r2,r16,16
 80079e8:	1001df1e 	bne	r2,zero,8008168 <___svfiprintf_internal_r+0x1014>
 80079ec:	8080100c 	andi	r2,r16,64
 80079f0:	10023d26 	beq	r2,zero,80082e8 <___svfiprintf_internal_r+0x1194>
 80079f4:	d8802417 	ldw	r2,144(sp)
 80079f8:	1480000f 	ldh	r18,0(r2)
 80079fc:	10800104 	addi	r2,r2,4
 8007a00:	d8802415 	stw	r2,144(sp)
 8007a04:	9029d7fa 	srai	r20,r18,31
 8007a08:	a005883a 	mov	r2,r20
 8007a0c:	103fb60e 	bge	r2,zero,80078e8 <__alt_data_end+0xfc0078e8>
 8007a10:	d9402017 	ldw	r5,128(sp)
 8007a14:	04a5c83a 	sub	r18,zero,r18
 8007a18:	05400b44 	movi	r21,45
 8007a1c:	9004c03a 	cmpne	r2,r18,zero
 8007a20:	0529c83a 	sub	r20,zero,r20
 8007a24:	dd401d85 	stb	r21,118(sp)
 8007a28:	a0a9c83a 	sub	r20,r20,r2
 8007a2c:	28026c16 	blt	r5,zero,80083e0 <___svfiprintf_internal_r+0x128c>
 8007a30:	00bfdfc4 	movi	r2,-129
 8007a34:	80a0703a 	and	r16,r16,r2
 8007a38:	a03fb31e 	bne	r20,zero,8007908 <__alt_data_end+0xfc007908>
 8007a3c:	00004606 	br	8007b58 <___svfiprintf_internal_r+0xa04>
 8007a40:	9839883a 	mov	fp,r19
 8007a44:	d8002515 	stw	zero,148(sp)
 8007a48:	1c3ff404 	addi	r16,r3,-48
 8007a4c:	0009883a 	mov	r4,zero
 8007a50:	01400284 	movi	r5,10
 8007a54:	80014a80 	call	80014a8 <__mulsi3>
 8007a58:	e0c00007 	ldb	r3,0(fp)
 8007a5c:	8089883a 	add	r4,r16,r2
 8007a60:	9cc00044 	addi	r19,r19,1
 8007a64:	1c3ff404 	addi	r16,r3,-48
 8007a68:	9839883a 	mov	fp,r19
 8007a6c:	a43ff82e 	bgeu	r20,r16,8007a50 <__alt_data_end+0xfc007a50>
 8007a70:	d9002515 	stw	r4,148(sp)
 8007a74:	18bff804 	addi	r2,r3,-32
 8007a78:	90be052e 	bgeu	r18,r2,8007290 <__alt_data_end+0xfc007290>
 8007a7c:	8821883a 	mov	r16,r17
 8007a80:	dc402103 	ldbu	r17,132(sp)
 8007a84:	b811883a 	mov	r8,r23
 8007a88:	8c403fcc 	andi	r17,r17,255
 8007a8c:	88028d1e 	bne	r17,zero,80084c4 <___svfiprintf_internal_r+0x1370>
 8007a90:	1800ea26 	beq	r3,zero,8007e3c <___svfiprintf_internal_r+0xce8>
 8007a94:	04800044 	movi	r18,1
 8007a98:	d8c01005 	stb	r3,64(sp)
 8007a9c:	d8001d85 	stb	zero,118(sp)
 8007aa0:	9029883a 	mov	r20,r18
 8007aa4:	dc401004 	addi	r17,sp,64
 8007aa8:	003f1306 	br	80076f8 <__alt_data_end+0xfc0076f8>
 8007aac:	8c402014 	ori	r17,r17,128
 8007ab0:	98c00007 	ldb	r3,0(r19)
 8007ab4:	003df306 	br	8007284 <__alt_data_end+0xfc007284>
 8007ab8:	98c00007 	ldb	r3,0(r19)
 8007abc:	01000a84 	movi	r4,42
 8007ac0:	9f000044 	addi	fp,r19,1
 8007ac4:	19026326 	beq	r3,r4,8008454 <___svfiprintf_internal_r+0x1300>
 8007ac8:	1c3ff404 	addi	r16,r3,-48
 8007acc:	0009883a 	mov	r4,zero
 8007ad0:	a4025636 	bltu	r20,r16,800842c <___svfiprintf_internal_r+0x12d8>
 8007ad4:	01400284 	movi	r5,10
 8007ad8:	80014a80 	call	80014a8 <__mulsi3>
 8007adc:	e0c00007 	ldb	r3,0(fp)
 8007ae0:	1409883a 	add	r4,r2,r16
 8007ae4:	e4c00044 	addi	r19,fp,1
 8007ae8:	1c3ff404 	addi	r16,r3,-48
 8007aec:	9839883a 	mov	fp,r19
 8007af0:	a43ff82e 	bgeu	r20,r16,8007ad4 <__alt_data_end+0xfc007ad4>
 8007af4:	20020c16 	blt	r4,zero,8008328 <___svfiprintf_internal_r+0x11d4>
 8007af8:	d9002015 	stw	r4,128(sp)
 8007afc:	003de206 	br	8007288 <__alt_data_end+0xfc007288>
 8007b00:	8821883a 	mov	r16,r17
 8007b04:	dc402103 	ldbu	r17,132(sp)
 8007b08:	b811883a 	mov	r8,r23
 8007b0c:	8c403fcc 	andi	r17,r17,255
 8007b10:	8802721e 	bne	r17,zero,80084dc <___svfiprintf_internal_r+0x1388>
 8007b14:	84000414 	ori	r16,r16,16
 8007b18:	8080080c 	andi	r2,r16,32
 8007b1c:	103e9f1e 	bne	r2,zero,800759c <__alt_data_end+0xfc00759c>
 8007b20:	8080040c 	andi	r2,r16,16
 8007b24:	10015326 	beq	r2,zero,8008074 <___svfiprintf_internal_r+0xf20>
 8007b28:	d8c02417 	ldw	r3,144(sp)
 8007b2c:	d9002017 	ldw	r4,128(sp)
 8007b30:	d8001d85 	stb	zero,118(sp)
 8007b34:	18800104 	addi	r2,r3,4
 8007b38:	1c800017 	ldw	r18,0(r3)
 8007b3c:	0029883a 	mov	r20,zero
 8007b40:	20015516 	blt	r4,zero,8008098 <___svfiprintf_internal_r+0xf44>
 8007b44:	00ffdfc4 	movi	r3,-129
 8007b48:	d8802415 	stw	r2,144(sp)
 8007b4c:	80e0703a 	and	r16,r16,r3
 8007b50:	002b883a 	mov	r21,zero
 8007b54:	903e9e26 	beq	r18,zero,80075d0 <__alt_data_end+0xfc0075d0>
 8007b58:	00800244 	movi	r2,9
 8007b5c:	14bf6a36 	bltu	r2,r18,8007908 <__alt_data_end+0xfc007908>
 8007b60:	94800c04 	addi	r18,r18,48
 8007b64:	dc8019c5 	stb	r18,103(sp)
 8007b68:	dd002c17 	ldw	r20,176(sp)
 8007b6c:	dc4019c4 	addi	r17,sp,103
 8007b70:	003e9c06 	br	80075e4 <__alt_data_end+0xfc0075e4>
 8007b74:	8821883a 	mov	r16,r17
 8007b78:	dc402103 	ldbu	r17,132(sp)
 8007b7c:	b811883a 	mov	r8,r23
 8007b80:	8c403fcc 	andi	r17,r17,255
 8007b84:	8802571e 	bne	r17,zero,80084e4 <___svfiprintf_internal_r+0x1390>
 8007b88:	84000414 	ori	r16,r16,16
 8007b8c:	8080080c 	andi	r2,r16,32
 8007b90:	103ea91e 	bne	r2,zero,8007638 <__alt_data_end+0xfc007638>
 8007b94:	8080040c 	andi	r2,r16,16
 8007b98:	10018026 	beq	r2,zero,800819c <___svfiprintf_internal_r+0x1048>
 8007b9c:	d9402417 	ldw	r5,144(sp)
 8007ba0:	d8c02017 	ldw	r3,128(sp)
 8007ba4:	d8001d85 	stb	zero,118(sp)
 8007ba8:	28800104 	addi	r2,r5,4
 8007bac:	2c800017 	ldw	r18,0(r5)
 8007bb0:	0029883a 	mov	r20,zero
 8007bb4:	18018216 	blt	r3,zero,80081c0 <___svfiprintf_internal_r+0x106c>
 8007bb8:	00ffdfc4 	movi	r3,-129
 8007bbc:	d8802415 	stw	r2,144(sp)
 8007bc0:	80e0703a 	and	r16,r16,r3
 8007bc4:	903ea81e 	bne	r18,zero,8007668 <__alt_data_end+0xfc007668>
 8007bc8:	d8802017 	ldw	r2,128(sp)
 8007bcc:	002b883a 	mov	r21,zero
 8007bd0:	1001f226 	beq	r2,zero,800839c <___svfiprintf_internal_r+0x1248>
 8007bd4:	0025883a 	mov	r18,zero
 8007bd8:	0029883a 	mov	r20,zero
 8007bdc:	003ea306 	br	800766c <__alt_data_end+0xfc00766c>
 8007be0:	d8c01c17 	ldw	r3,112(sp)
 8007be4:	d8801b17 	ldw	r2,108(sp)
 8007be8:	d9001d87 	ldb	r4,118(sp)
 8007bec:	20000b26 	beq	r4,zero,8007c1c <___svfiprintf_internal_r+0xac8>
 8007bf0:	d9001d84 	addi	r4,sp,118
 8007bf4:	18c00044 	addi	r3,r3,1
 8007bf8:	10800044 	addi	r2,r2,1
 8007bfc:	41000015 	stw	r4,0(r8)
 8007c00:	01000044 	movi	r4,1
 8007c04:	41000115 	stw	r4,4(r8)
 8007c08:	d8c01c15 	stw	r3,112(sp)
 8007c0c:	d8801b15 	stw	r2,108(sp)
 8007c10:	010001c4 	movi	r4,7
 8007c14:	2080f316 	blt	r4,r2,8007fe4 <___svfiprintf_internal_r+0xe90>
 8007c18:	42000204 	addi	r8,r8,8
 8007c1c:	d9402117 	ldw	r5,132(sp)
 8007c20:	28000b26 	beq	r5,zero,8007c50 <___svfiprintf_internal_r+0xafc>
 8007c24:	d9001d04 	addi	r4,sp,116
 8007c28:	18c00084 	addi	r3,r3,2
 8007c2c:	10800044 	addi	r2,r2,1
 8007c30:	41000015 	stw	r4,0(r8)
 8007c34:	01000084 	movi	r4,2
 8007c38:	41000115 	stw	r4,4(r8)
 8007c3c:	d8c01c15 	stw	r3,112(sp)
 8007c40:	d8801b15 	stw	r2,108(sp)
 8007c44:	010001c4 	movi	r4,7
 8007c48:	2080ef16 	blt	r4,r2,8008008 <___svfiprintf_internal_r+0xeb4>
 8007c4c:	42000204 	addi	r8,r8,8
 8007c50:	d9402217 	ldw	r5,136(sp)
 8007c54:	01002004 	movi	r4,128
 8007c58:	29008f26 	beq	r5,r4,8007e98 <___svfiprintf_internal_r+0xd44>
 8007c5c:	d9002017 	ldw	r4,128(sp)
 8007c60:	252fc83a 	sub	r23,r4,r20
 8007c64:	05c0310e 	bge	zero,r23,8007d2c <___svfiprintf_internal_r+0xbd8>
 8007c68:	07000404 	movi	fp,16
 8007c6c:	e5c17d0e 	bge	fp,r23,8008264 <___svfiprintf_internal_r+0x1110>
 8007c70:	01020074 	movhi	r4,2049
 8007c74:	213b5e04 	addi	r4,r4,-4744
 8007c78:	dc002015 	stw	r16,128(sp)
 8007c7c:	dc402215 	stw	r17,136(sp)
 8007c80:	d9002115 	stw	r4,132(sp)
 8007c84:	b823883a 	mov	r17,r23
 8007c88:	054001c4 	movi	r21,7
 8007c8c:	982f883a 	mov	r23,r19
 8007c90:	dc002717 	ldw	r16,156(sp)
 8007c94:	9027883a 	mov	r19,r18
 8007c98:	dc802317 	ldw	r18,140(sp)
 8007c9c:	00000306 	br	8007cac <___svfiprintf_internal_r+0xb58>
 8007ca0:	8c7ffc04 	addi	r17,r17,-16
 8007ca4:	42000204 	addi	r8,r8,8
 8007ca8:	e440110e 	bge	fp,r17,8007cf0 <___svfiprintf_internal_r+0xb9c>
 8007cac:	18c00404 	addi	r3,r3,16
 8007cb0:	10800044 	addi	r2,r2,1
 8007cb4:	45800015 	stw	r22,0(r8)
 8007cb8:	47000115 	stw	fp,4(r8)
 8007cbc:	d8c01c15 	stw	r3,112(sp)
 8007cc0:	d8801b15 	stw	r2,108(sp)
 8007cc4:	a8bff60e 	bge	r21,r2,8007ca0 <__alt_data_end+0xfc007ca0>
 8007cc8:	d9801a04 	addi	r6,sp,104
 8007ccc:	900b883a 	mov	r5,r18
 8007cd0:	8009883a 	mov	r4,r16
 8007cd4:	8006f840 	call	8006f84 <__ssprint_r>
 8007cd8:	10005e1e 	bne	r2,zero,8007e54 <___svfiprintf_internal_r+0xd00>
 8007cdc:	8c7ffc04 	addi	r17,r17,-16
 8007ce0:	d8c01c17 	ldw	r3,112(sp)
 8007ce4:	d8801b17 	ldw	r2,108(sp)
 8007ce8:	d811883a 	mov	r8,sp
 8007cec:	e47fef16 	blt	fp,r17,8007cac <__alt_data_end+0xfc007cac>
 8007cf0:	9825883a 	mov	r18,r19
 8007cf4:	dc002017 	ldw	r16,128(sp)
 8007cf8:	b827883a 	mov	r19,r23
 8007cfc:	882f883a 	mov	r23,r17
 8007d00:	dc402217 	ldw	r17,136(sp)
 8007d04:	d9402117 	ldw	r5,132(sp)
 8007d08:	1dc7883a 	add	r3,r3,r23
 8007d0c:	10800044 	addi	r2,r2,1
 8007d10:	41400015 	stw	r5,0(r8)
 8007d14:	45c00115 	stw	r23,4(r8)
 8007d18:	d8c01c15 	stw	r3,112(sp)
 8007d1c:	d8801b15 	stw	r2,108(sp)
 8007d20:	010001c4 	movi	r4,7
 8007d24:	2080a616 	blt	r4,r2,8007fc0 <___svfiprintf_internal_r+0xe6c>
 8007d28:	42000204 	addi	r8,r8,8
 8007d2c:	a0c7883a 	add	r3,r20,r3
 8007d30:	10800044 	addi	r2,r2,1
 8007d34:	44400015 	stw	r17,0(r8)
 8007d38:	45000115 	stw	r20,4(r8)
 8007d3c:	d8c01c15 	stw	r3,112(sp)
 8007d40:	d8801b15 	stw	r2,108(sp)
 8007d44:	010001c4 	movi	r4,7
 8007d48:	20808816 	blt	r4,r2,8007f6c <___svfiprintf_internal_r+0xe18>
 8007d4c:	42000204 	addi	r8,r8,8
 8007d50:	8400010c 	andi	r16,r16,4
 8007d54:	80002c26 	beq	r16,zero,8007e08 <___svfiprintf_internal_r+0xcb4>
 8007d58:	d8802517 	ldw	r2,148(sp)
 8007d5c:	14a1c83a 	sub	r16,r2,r18
 8007d60:	0400290e 	bge	zero,r16,8007e08 <___svfiprintf_internal_r+0xcb4>
 8007d64:	04400404 	movi	r17,16
 8007d68:	d8801b17 	ldw	r2,108(sp)
 8007d6c:	8c01a70e 	bge	r17,r16,800840c <___svfiprintf_internal_r+0x12b8>
 8007d70:	01420074 	movhi	r5,2049
 8007d74:	297b6204 	addi	r5,r5,-4728
 8007d78:	d9402815 	stw	r5,160(sp)
 8007d7c:	050001c4 	movi	r20,7
 8007d80:	dd402717 	ldw	r21,156(sp)
 8007d84:	ddc02317 	ldw	r23,140(sp)
 8007d88:	00000306 	br	8007d98 <___svfiprintf_internal_r+0xc44>
 8007d8c:	843ffc04 	addi	r16,r16,-16
 8007d90:	42000204 	addi	r8,r8,8
 8007d94:	8c00130e 	bge	r17,r16,8007de4 <___svfiprintf_internal_r+0xc90>
 8007d98:	01020074 	movhi	r4,2049
 8007d9c:	18c00404 	addi	r3,r3,16
 8007da0:	10800044 	addi	r2,r2,1
 8007da4:	213b6204 	addi	r4,r4,-4728
 8007da8:	41000015 	stw	r4,0(r8)
 8007dac:	44400115 	stw	r17,4(r8)
 8007db0:	d8c01c15 	stw	r3,112(sp)
 8007db4:	d8801b15 	stw	r2,108(sp)
 8007db8:	a0bff40e 	bge	r20,r2,8007d8c <__alt_data_end+0xfc007d8c>
 8007dbc:	d9801a04 	addi	r6,sp,104
 8007dc0:	b80b883a 	mov	r5,r23
 8007dc4:	a809883a 	mov	r4,r21
 8007dc8:	8006f840 	call	8006f84 <__ssprint_r>
 8007dcc:	1000211e 	bne	r2,zero,8007e54 <___svfiprintf_internal_r+0xd00>
 8007dd0:	843ffc04 	addi	r16,r16,-16
 8007dd4:	d8c01c17 	ldw	r3,112(sp)
 8007dd8:	d8801b17 	ldw	r2,108(sp)
 8007ddc:	d811883a 	mov	r8,sp
 8007de0:	8c3fed16 	blt	r17,r16,8007d98 <__alt_data_end+0xfc007d98>
 8007de4:	d9402817 	ldw	r5,160(sp)
 8007de8:	1c07883a 	add	r3,r3,r16
 8007dec:	10800044 	addi	r2,r2,1
 8007df0:	41400015 	stw	r5,0(r8)
 8007df4:	44000115 	stw	r16,4(r8)
 8007df8:	d8c01c15 	stw	r3,112(sp)
 8007dfc:	d8801b15 	stw	r2,108(sp)
 8007e00:	010001c4 	movi	r4,7
 8007e04:	2080b516 	blt	r4,r2,80080dc <___svfiprintf_internal_r+0xf88>
 8007e08:	d8802517 	ldw	r2,148(sp)
 8007e0c:	1480010e 	bge	r2,r18,8007e14 <___svfiprintf_internal_r+0xcc0>
 8007e10:	9005883a 	mov	r2,r18
 8007e14:	d9002617 	ldw	r4,152(sp)
 8007e18:	2089883a 	add	r4,r4,r2
 8007e1c:	d9002615 	stw	r4,152(sp)
 8007e20:	18005a1e 	bne	r3,zero,8007f8c <___svfiprintf_internal_r+0xe38>
 8007e24:	98800007 	ldb	r2,0(r19)
 8007e28:	d8001b15 	stw	zero,108(sp)
 8007e2c:	d811883a 	mov	r8,sp
 8007e30:	103cec1e 	bne	r2,zero,80071e4 <__alt_data_end+0xfc0071e4>
 8007e34:	9825883a 	mov	r18,r19
 8007e38:	003d0206 	br	8007244 <__alt_data_end+0xfc007244>
 8007e3c:	d8801c17 	ldw	r2,112(sp)
 8007e40:	10000426 	beq	r2,zero,8007e54 <___svfiprintf_internal_r+0xd00>
 8007e44:	d9402317 	ldw	r5,140(sp)
 8007e48:	d9002717 	ldw	r4,156(sp)
 8007e4c:	d9801a04 	addi	r6,sp,104
 8007e50:	8006f840 	call	8006f84 <__ssprint_r>
 8007e54:	d9402317 	ldw	r5,140(sp)
 8007e58:	d8802617 	ldw	r2,152(sp)
 8007e5c:	28c0030b 	ldhu	r3,12(r5)
 8007e60:	18c0100c 	andi	r3,r3,64
 8007e64:	18015c1e 	bne	r3,zero,80083d8 <___svfiprintf_internal_r+0x1284>
 8007e68:	dfc03717 	ldw	ra,220(sp)
 8007e6c:	df003617 	ldw	fp,216(sp)
 8007e70:	ddc03517 	ldw	r23,212(sp)
 8007e74:	dd803417 	ldw	r22,208(sp)
 8007e78:	dd403317 	ldw	r21,204(sp)
 8007e7c:	dd003217 	ldw	r20,200(sp)
 8007e80:	dcc03117 	ldw	r19,196(sp)
 8007e84:	dc803017 	ldw	r18,192(sp)
 8007e88:	dc402f17 	ldw	r17,188(sp)
 8007e8c:	dc002e17 	ldw	r16,184(sp)
 8007e90:	dec03804 	addi	sp,sp,224
 8007e94:	f800283a 	ret
 8007e98:	d9002517 	ldw	r4,148(sp)
 8007e9c:	24afc83a 	sub	r23,r4,r18
 8007ea0:	05ff6e0e 	bge	zero,r23,8007c5c <__alt_data_end+0xfc007c5c>
 8007ea4:	07000404 	movi	fp,16
 8007ea8:	e5c15c0e 	bge	fp,r23,800841c <___svfiprintf_internal_r+0x12c8>
 8007eac:	01020074 	movhi	r4,2049
 8007eb0:	213b5e04 	addi	r4,r4,-4744
 8007eb4:	dc002215 	stw	r16,136(sp)
 8007eb8:	dc402815 	stw	r17,160(sp)
 8007ebc:	d9002115 	stw	r4,132(sp)
 8007ec0:	b823883a 	mov	r17,r23
 8007ec4:	054001c4 	movi	r21,7
 8007ec8:	982f883a 	mov	r23,r19
 8007ecc:	dc002717 	ldw	r16,156(sp)
 8007ed0:	9027883a 	mov	r19,r18
 8007ed4:	dc802317 	ldw	r18,140(sp)
 8007ed8:	00000306 	br	8007ee8 <___svfiprintf_internal_r+0xd94>
 8007edc:	8c7ffc04 	addi	r17,r17,-16
 8007ee0:	42000204 	addi	r8,r8,8
 8007ee4:	e440110e 	bge	fp,r17,8007f2c <___svfiprintf_internal_r+0xdd8>
 8007ee8:	18c00404 	addi	r3,r3,16
 8007eec:	10800044 	addi	r2,r2,1
 8007ef0:	45800015 	stw	r22,0(r8)
 8007ef4:	47000115 	stw	fp,4(r8)
 8007ef8:	d8c01c15 	stw	r3,112(sp)
 8007efc:	d8801b15 	stw	r2,108(sp)
 8007f00:	a8bff60e 	bge	r21,r2,8007edc <__alt_data_end+0xfc007edc>
 8007f04:	d9801a04 	addi	r6,sp,104
 8007f08:	900b883a 	mov	r5,r18
 8007f0c:	8009883a 	mov	r4,r16
 8007f10:	8006f840 	call	8006f84 <__ssprint_r>
 8007f14:	103fcf1e 	bne	r2,zero,8007e54 <__alt_data_end+0xfc007e54>
 8007f18:	8c7ffc04 	addi	r17,r17,-16
 8007f1c:	d8c01c17 	ldw	r3,112(sp)
 8007f20:	d8801b17 	ldw	r2,108(sp)
 8007f24:	d811883a 	mov	r8,sp
 8007f28:	e47fef16 	blt	fp,r17,8007ee8 <__alt_data_end+0xfc007ee8>
 8007f2c:	9825883a 	mov	r18,r19
 8007f30:	dc002217 	ldw	r16,136(sp)
 8007f34:	b827883a 	mov	r19,r23
 8007f38:	882f883a 	mov	r23,r17
 8007f3c:	dc402817 	ldw	r17,160(sp)
 8007f40:	d9402117 	ldw	r5,132(sp)
 8007f44:	1dc7883a 	add	r3,r3,r23
 8007f48:	10800044 	addi	r2,r2,1
 8007f4c:	41400015 	stw	r5,0(r8)
 8007f50:	45c00115 	stw	r23,4(r8)
 8007f54:	d8c01c15 	stw	r3,112(sp)
 8007f58:	d8801b15 	stw	r2,108(sp)
 8007f5c:	010001c4 	movi	r4,7
 8007f60:	2080b716 	blt	r4,r2,8008240 <___svfiprintf_internal_r+0x10ec>
 8007f64:	42000204 	addi	r8,r8,8
 8007f68:	003f3c06 	br	8007c5c <__alt_data_end+0xfc007c5c>
 8007f6c:	d9402317 	ldw	r5,140(sp)
 8007f70:	d9002717 	ldw	r4,156(sp)
 8007f74:	d9801a04 	addi	r6,sp,104
 8007f78:	8006f840 	call	8006f84 <__ssprint_r>
 8007f7c:	103fb51e 	bne	r2,zero,8007e54 <__alt_data_end+0xfc007e54>
 8007f80:	d8c01c17 	ldw	r3,112(sp)
 8007f84:	d811883a 	mov	r8,sp
 8007f88:	003f7106 	br	8007d50 <__alt_data_end+0xfc007d50>
 8007f8c:	d9402317 	ldw	r5,140(sp)
 8007f90:	d9002717 	ldw	r4,156(sp)
 8007f94:	d9801a04 	addi	r6,sp,104
 8007f98:	8006f840 	call	8006f84 <__ssprint_r>
 8007f9c:	103fa126 	beq	r2,zero,8007e24 <__alt_data_end+0xfc007e24>
 8007fa0:	003fac06 	br	8007e54 <__alt_data_end+0xfc007e54>
 8007fa4:	d9402317 	ldw	r5,140(sp)
 8007fa8:	d9002717 	ldw	r4,156(sp)
 8007fac:	d9801a04 	addi	r6,sp,104
 8007fb0:	8006f840 	call	8006f84 <__ssprint_r>
 8007fb4:	103fa71e 	bne	r2,zero,8007e54 <__alt_data_end+0xfc007e54>
 8007fb8:	d811883a 	mov	r8,sp
 8007fbc:	003c9e06 	br	8007238 <__alt_data_end+0xfc007238>
 8007fc0:	d9402317 	ldw	r5,140(sp)
 8007fc4:	d9002717 	ldw	r4,156(sp)
 8007fc8:	d9801a04 	addi	r6,sp,104
 8007fcc:	8006f840 	call	8006f84 <__ssprint_r>
 8007fd0:	103fa01e 	bne	r2,zero,8007e54 <__alt_data_end+0xfc007e54>
 8007fd4:	d8c01c17 	ldw	r3,112(sp)
 8007fd8:	d8801b17 	ldw	r2,108(sp)
 8007fdc:	d811883a 	mov	r8,sp
 8007fe0:	003f5206 	br	8007d2c <__alt_data_end+0xfc007d2c>
 8007fe4:	d9402317 	ldw	r5,140(sp)
 8007fe8:	d9002717 	ldw	r4,156(sp)
 8007fec:	d9801a04 	addi	r6,sp,104
 8007ff0:	8006f840 	call	8006f84 <__ssprint_r>
 8007ff4:	103f971e 	bne	r2,zero,8007e54 <__alt_data_end+0xfc007e54>
 8007ff8:	d8c01c17 	ldw	r3,112(sp)
 8007ffc:	d8801b17 	ldw	r2,108(sp)
 8008000:	d811883a 	mov	r8,sp
 8008004:	003f0506 	br	8007c1c <__alt_data_end+0xfc007c1c>
 8008008:	d9402317 	ldw	r5,140(sp)
 800800c:	d9002717 	ldw	r4,156(sp)
 8008010:	d9801a04 	addi	r6,sp,104
 8008014:	8006f840 	call	8006f84 <__ssprint_r>
 8008018:	103f8e1e 	bne	r2,zero,8007e54 <__alt_data_end+0xfc007e54>
 800801c:	d8c01c17 	ldw	r3,112(sp)
 8008020:	d8801b17 	ldw	r2,108(sp)
 8008024:	d811883a 	mov	r8,sp
 8008028:	003f0906 	br	8007c50 <__alt_data_end+0xfc007c50>
 800802c:	d9402017 	ldw	r5,128(sp)
 8008030:	d8001d85 	stb	zero,118(sp)
 8008034:	28007716 	blt	r5,zero,8008214 <___svfiprintf_internal_r+0x10c0>
 8008038:	00ffdfc4 	movi	r3,-129
 800803c:	9504b03a 	or	r2,r18,r20
 8008040:	80e0703a 	and	r16,r16,r3
 8008044:	103d3926 	beq	r2,zero,800752c <__alt_data_end+0xfc00752c>
 8008048:	002b883a 	mov	r21,zero
 800804c:	003d3c06 	br	8007540 <__alt_data_end+0xfc007540>
 8008050:	d9402317 	ldw	r5,140(sp)
 8008054:	d9002717 	ldw	r4,156(sp)
 8008058:	d9801a04 	addi	r6,sp,104
 800805c:	8006f840 	call	8006f84 <__ssprint_r>
 8008060:	103f7c1e 	bne	r2,zero,8007e54 <__alt_data_end+0xfc007e54>
 8008064:	d8c01c17 	ldw	r3,112(sp)
 8008068:	d8801b17 	ldw	r2,108(sp)
 800806c:	d811883a 	mov	r8,sp
 8008070:	003edd06 	br	8007be8 <__alt_data_end+0xfc007be8>
 8008074:	8080100c 	andi	r2,r16,64
 8008078:	d8001d85 	stb	zero,118(sp)
 800807c:	10008426 	beq	r2,zero,8008290 <___svfiprintf_internal_r+0x113c>
 8008080:	d9402417 	ldw	r5,144(sp)
 8008084:	d8c02017 	ldw	r3,128(sp)
 8008088:	0029883a 	mov	r20,zero
 800808c:	28800104 	addi	r2,r5,4
 8008090:	2c80000b 	ldhu	r18,0(r5)
 8008094:	183eab0e 	bge	r3,zero,8007b44 <__alt_data_end+0xfc007b44>
 8008098:	d8802415 	stw	r2,144(sp)
 800809c:	002b883a 	mov	r21,zero
 80080a0:	9504b03a 	or	r2,r18,r20
 80080a4:	103e171e 	bne	r2,zero,8007904 <__alt_data_end+0xfc007904>
 80080a8:	00800044 	movi	r2,1
 80080ac:	10803fcc 	andi	r2,r2,255
 80080b0:	00c00044 	movi	r3,1
 80080b4:	10c05c26 	beq	r2,r3,8008228 <___svfiprintf_internal_r+0x10d4>
 80080b8:	00c00084 	movi	r3,2
 80080bc:	10fd1e26 	beq	r2,r3,8007538 <__alt_data_end+0xfc007538>
 80080c0:	003ec406 	br	8007bd4 <__alt_data_end+0xfc007bd4>
 80080c4:	d9401e17 	ldw	r5,120(sp)
 80080c8:	2c69c83a 	sub	r20,r5,r17
 80080cc:	003d4506 	br	80075e4 <__alt_data_end+0xfc0075e4>
 80080d0:	d8802415 	stw	r2,144(sp)
 80080d4:	98c00007 	ldb	r3,0(r19)
 80080d8:	003c6a06 	br	8007284 <__alt_data_end+0xfc007284>
 80080dc:	d9402317 	ldw	r5,140(sp)
 80080e0:	d9002717 	ldw	r4,156(sp)
 80080e4:	d9801a04 	addi	r6,sp,104
 80080e8:	8006f840 	call	8006f84 <__ssprint_r>
 80080ec:	103f591e 	bne	r2,zero,8007e54 <__alt_data_end+0xfc007e54>
 80080f0:	d8c01c17 	ldw	r3,112(sp)
 80080f4:	003f4406 	br	8007e08 <__alt_data_end+0xfc007e08>
 80080f8:	01420074 	movhi	r5,2049
 80080fc:	297afd04 	addi	r5,r5,-5132
 8008100:	d9402915 	stw	r5,164(sp)
 8008104:	003d0906 	br	800752c <__alt_data_end+0xfc00752c>
 8008108:	d8c02417 	ldw	r3,144(sp)
 800810c:	d9002617 	ldw	r4,152(sp)
 8008110:	d9402417 	ldw	r5,144(sp)
 8008114:	18800017 	ldw	r2,0(r3)
 8008118:	2007d7fa 	srai	r3,r4,31
 800811c:	29400104 	addi	r5,r5,4
 8008120:	d9402415 	stw	r5,144(sp)
 8008124:	11000015 	stw	r4,0(r2)
 8008128:	10c00115 	stw	r3,4(r2)
 800812c:	003c2b06 	br	80071dc <__alt_data_end+0xfc0071dc>
 8008130:	d8c01d45 	stb	r3,117(sp)
 8008134:	d8c02017 	ldw	r3,128(sp)
 8008138:	00800c04 	movi	r2,48
 800813c:	d8801d05 	stb	r2,116(sp)
 8008140:	d8001d85 	stb	zero,118(sp)
 8008144:	80800094 	ori	r2,r16,2
 8008148:	1800ac16 	blt	r3,zero,80083fc <___svfiprintf_internal_r+0x12a8>
 800814c:	00bfdfc4 	movi	r2,-129
 8008150:	80a0703a 	and	r16,r16,r2
 8008154:	84000094 	ori	r16,r16,2
 8008158:	002b883a 	mov	r21,zero
 800815c:	003cf806 	br	8007540 <__alt_data_end+0xfc007540>
 8008160:	98c00007 	ldb	r3,0(r19)
 8008164:	003c4706 	br	8007284 <__alt_data_end+0xfc007284>
 8008168:	d9402417 	ldw	r5,144(sp)
 800816c:	2c800017 	ldw	r18,0(r5)
 8008170:	29400104 	addi	r5,r5,4
 8008174:	d9402415 	stw	r5,144(sp)
 8008178:	9029d7fa 	srai	r20,r18,31
 800817c:	a005883a 	mov	r2,r20
 8008180:	003dd806 	br	80078e4 <__alt_data_end+0xfc0078e4>
 8008184:	d9402417 	ldw	r5,144(sp)
 8008188:	0029883a 	mov	r20,zero
 800818c:	2c800017 	ldw	r18,0(r5)
 8008190:	29400104 	addi	r5,r5,4
 8008194:	d9402415 	stw	r5,144(sp)
 8008198:	003cdb06 	br	8007508 <__alt_data_end+0xfc007508>
 800819c:	8080100c 	andi	r2,r16,64
 80081a0:	d8001d85 	stb	zero,118(sp)
 80081a4:	10003326 	beq	r2,zero,8008274 <___svfiprintf_internal_r+0x1120>
 80081a8:	d9002417 	ldw	r4,144(sp)
 80081ac:	d9402017 	ldw	r5,128(sp)
 80081b0:	0029883a 	mov	r20,zero
 80081b4:	20800104 	addi	r2,r4,4
 80081b8:	2480000b 	ldhu	r18,0(r4)
 80081bc:	283e7e0e 	bge	r5,zero,8007bb8 <__alt_data_end+0xfc007bb8>
 80081c0:	9506b03a 	or	r3,r18,r20
 80081c4:	d8802415 	stw	r2,144(sp)
 80081c8:	183d271e 	bne	r3,zero,8007668 <__alt_data_end+0xfc007668>
 80081cc:	002b883a 	mov	r21,zero
 80081d0:	0005883a 	mov	r2,zero
 80081d4:	003fb506 	br	80080ac <__alt_data_end+0xfc0080ac>
 80081d8:	98c00043 	ldbu	r3,1(r19)
 80081dc:	8c400814 	ori	r17,r17,32
 80081e0:	9cc00044 	addi	r19,r19,1
 80081e4:	18c03fcc 	andi	r3,r3,255
 80081e8:	18c0201c 	xori	r3,r3,128
 80081ec:	18ffe004 	addi	r3,r3,-128
 80081f0:	003c2406 	br	8007284 <__alt_data_end+0xfc007284>
 80081f4:	d8c02415 	stw	r3,144(sp)
 80081f8:	002b883a 	mov	r21,zero
 80081fc:	003fa806 	br	80080a0 <__alt_data_end+0xfc0080a0>
 8008200:	01020074 	movhi	r4,2049
 8008204:	213afd04 	addi	r4,r4,-5132
 8008208:	d9002915 	stw	r4,164(sp)
 800820c:	d8c02415 	stw	r3,144(sp)
 8008210:	1021883a 	mov	r16,r2
 8008214:	9504b03a 	or	r2,r18,r20
 8008218:	103f8b1e 	bne	r2,zero,8008048 <__alt_data_end+0xfc008048>
 800821c:	002b883a 	mov	r21,zero
 8008220:	00800084 	movi	r2,2
 8008224:	003fa106 	br	80080ac <__alt_data_end+0xfc0080ac>
 8008228:	0025883a 	mov	r18,zero
 800822c:	94800c04 	addi	r18,r18,48
 8008230:	dc8019c5 	stb	r18,103(sp)
 8008234:	dd002c17 	ldw	r20,176(sp)
 8008238:	dc4019c4 	addi	r17,sp,103
 800823c:	003ce906 	br	80075e4 <__alt_data_end+0xfc0075e4>
 8008240:	d9402317 	ldw	r5,140(sp)
 8008244:	d9002717 	ldw	r4,156(sp)
 8008248:	d9801a04 	addi	r6,sp,104
 800824c:	8006f840 	call	8006f84 <__ssprint_r>
 8008250:	103f001e 	bne	r2,zero,8007e54 <__alt_data_end+0xfc007e54>
 8008254:	d8c01c17 	ldw	r3,112(sp)
 8008258:	d8801b17 	ldw	r2,108(sp)
 800825c:	d811883a 	mov	r8,sp
 8008260:	003e7e06 	br	8007c5c <__alt_data_end+0xfc007c5c>
 8008264:	01420074 	movhi	r5,2049
 8008268:	297b5e04 	addi	r5,r5,-4744
 800826c:	d9402115 	stw	r5,132(sp)
 8008270:	003ea406 	br	8007d04 <__alt_data_end+0xfc007d04>
 8008274:	d8c02417 	ldw	r3,144(sp)
 8008278:	d9002017 	ldw	r4,128(sp)
 800827c:	0029883a 	mov	r20,zero
 8008280:	18800104 	addi	r2,r3,4
 8008284:	1c800017 	ldw	r18,0(r3)
 8008288:	203e4b0e 	bge	r4,zero,8007bb8 <__alt_data_end+0xfc007bb8>
 800828c:	003fcc06 	br	80081c0 <__alt_data_end+0xfc0081c0>
 8008290:	d9002417 	ldw	r4,144(sp)
 8008294:	d9402017 	ldw	r5,128(sp)
 8008298:	0029883a 	mov	r20,zero
 800829c:	20800104 	addi	r2,r4,4
 80082a0:	24800017 	ldw	r18,0(r4)
 80082a4:	283e270e 	bge	r5,zero,8007b44 <__alt_data_end+0xfc007b44>
 80082a8:	003f7b06 	br	8008098 <__alt_data_end+0xfc008098>
 80082ac:	8400100c 	andi	r16,r16,64
 80082b0:	80003326 	beq	r16,zero,8008380 <___svfiprintf_internal_r+0x122c>
 80082b4:	d9402417 	ldw	r5,144(sp)
 80082b8:	d8c02617 	ldw	r3,152(sp)
 80082bc:	28800017 	ldw	r2,0(r5)
 80082c0:	29400104 	addi	r5,r5,4
 80082c4:	d9402415 	stw	r5,144(sp)
 80082c8:	10c0000d 	sth	r3,0(r2)
 80082cc:	003bc306 	br	80071dc <__alt_data_end+0xfc0071dc>
 80082d0:	d9002417 	ldw	r4,144(sp)
 80082d4:	0029883a 	mov	r20,zero
 80082d8:	24800017 	ldw	r18,0(r4)
 80082dc:	21000104 	addi	r4,r4,4
 80082e0:	d9002415 	stw	r4,144(sp)
 80082e4:	003c8806 	br	8007508 <__alt_data_end+0xfc007508>
 80082e8:	d8c02417 	ldw	r3,144(sp)
 80082ec:	1c800017 	ldw	r18,0(r3)
 80082f0:	18c00104 	addi	r3,r3,4
 80082f4:	d8c02415 	stw	r3,144(sp)
 80082f8:	9029d7fa 	srai	r20,r18,31
 80082fc:	a005883a 	mov	r2,r20
 8008300:	003d7806 	br	80078e4 <__alt_data_end+0xfc0078e4>
 8008304:	8809883a 	mov	r4,r17
 8008308:	da002d15 	stw	r8,180(sp)
 800830c:	80016100 	call	8001610 <strlen>
 8008310:	1029883a 	mov	r20,r2
 8008314:	dd401d83 	ldbu	r21,118(sp)
 8008318:	ddc02415 	stw	r23,144(sp)
 800831c:	d8002015 	stw	zero,128(sp)
 8008320:	da002d17 	ldw	r8,180(sp)
 8008324:	003caf06 	br	80075e4 <__alt_data_end+0xfc0075e4>
 8008328:	013fffc4 	movi	r4,-1
 800832c:	003df206 	br	8007af8 <__alt_data_end+0xfc007af8>
 8008330:	dd002017 	ldw	r20,128(sp)
 8008334:	00800184 	movi	r2,6
 8008338:	1500012e 	bgeu	r2,r20,8008340 <___svfiprintf_internal_r+0x11ec>
 800833c:	1029883a 	mov	r20,r2
 8008340:	a025883a 	mov	r18,r20
 8008344:	a0004116 	blt	r20,zero,800844c <___svfiprintf_internal_r+0x12f8>
 8008348:	04420074 	movhi	r17,2049
 800834c:	ddc02415 	stw	r23,144(sp)
 8008350:	8c7b0204 	addi	r17,r17,-5112
 8008354:	003ce806 	br	80076f8 <__alt_data_end+0xfc0076f8>
 8008358:	04001004 	movi	r16,64
 800835c:	800b883a 	mov	r5,r16
 8008360:	80052f00 	call	80052f0 <_malloc_r>
 8008364:	d8c02317 	ldw	r3,140(sp)
 8008368:	18800015 	stw	r2,0(r3)
 800836c:	18800415 	stw	r2,16(r3)
 8008370:	10004d26 	beq	r2,zero,80084a8 <___svfiprintf_internal_r+0x1354>
 8008374:	d9402317 	ldw	r5,140(sp)
 8008378:	2c000515 	stw	r16,20(r5)
 800837c:	003b8906 	br	80071a4 <__alt_data_end+0xfc0071a4>
 8008380:	d9002417 	ldw	r4,144(sp)
 8008384:	d9402617 	ldw	r5,152(sp)
 8008388:	20800017 	ldw	r2,0(r4)
 800838c:	21000104 	addi	r4,r4,4
 8008390:	d9002415 	stw	r4,144(sp)
 8008394:	11400015 	stw	r5,0(r2)
 8008398:	003b9006 	br	80071dc <__alt_data_end+0xfc0071dc>
 800839c:	8080004c 	andi	r2,r16,1
 80083a0:	002b883a 	mov	r21,zero
 80083a4:	10000526 	beq	r2,zero,80083bc <___svfiprintf_internal_r+0x1268>
 80083a8:	00800c04 	movi	r2,48
 80083ac:	d88019c5 	stb	r2,103(sp)
 80083b0:	dd002c17 	ldw	r20,176(sp)
 80083b4:	dc4019c4 	addi	r17,sp,103
 80083b8:	003c8a06 	br	80075e4 <__alt_data_end+0xfc0075e4>
 80083bc:	0029883a 	mov	r20,zero
 80083c0:	dc401a04 	addi	r17,sp,104
 80083c4:	003c8706 	br	80075e4 <__alt_data_end+0xfc0075e4>
 80083c8:	01420074 	movhi	r5,2049
 80083cc:	297b6204 	addi	r5,r5,-4728
 80083d0:	d9402815 	stw	r5,160(sp)
 80083d4:	003cff06 	br	80077d4 <__alt_data_end+0xfc0077d4>
 80083d8:	00bfffc4 	movi	r2,-1
 80083dc:	003ea206 	br	8007e68 <__alt_data_end+0xfc007e68>
 80083e0:	00800044 	movi	r2,1
 80083e4:	10803fcc 	andi	r2,r2,255
 80083e8:	00c00044 	movi	r3,1
 80083ec:	10fd4526 	beq	r2,r3,8007904 <__alt_data_end+0xfc007904>
 80083f0:	00c00084 	movi	r3,2
 80083f4:	10fc5226 	beq	r2,r3,8007540 <__alt_data_end+0xfc007540>
 80083f8:	003c9c06 	br	800766c <__alt_data_end+0xfc00766c>
 80083fc:	1021883a 	mov	r16,r2
 8008400:	002b883a 	mov	r21,zero
 8008404:	00800084 	movi	r2,2
 8008408:	003ff606 	br	80083e4 <__alt_data_end+0xfc0083e4>
 800840c:	01020074 	movhi	r4,2049
 8008410:	213b6204 	addi	r4,r4,-4728
 8008414:	d9002815 	stw	r4,160(sp)
 8008418:	003e7206 	br	8007de4 <__alt_data_end+0xfc007de4>
 800841c:	01420074 	movhi	r5,2049
 8008420:	297b5e04 	addi	r5,r5,-4744
 8008424:	d9402115 	stw	r5,132(sp)
 8008428:	003ec506 	br	8007f40 <__alt_data_end+0xfc007f40>
 800842c:	e027883a 	mov	r19,fp
 8008430:	d8002015 	stw	zero,128(sp)
 8008434:	003b9406 	br	8007288 <__alt_data_end+0xfc007288>
 8008438:	dd002017 	ldw	r20,128(sp)
 800843c:	dd401d83 	ldbu	r21,118(sp)
 8008440:	ddc02415 	stw	r23,144(sp)
 8008444:	d8002015 	stw	zero,128(sp)
 8008448:	003c6606 	br	80075e4 <__alt_data_end+0xfc0075e4>
 800844c:	0025883a 	mov	r18,zero
 8008450:	003fbd06 	br	8008348 <__alt_data_end+0xfc008348>
 8008454:	d9402417 	ldw	r5,144(sp)
 8008458:	d8c02417 	ldw	r3,144(sp)
 800845c:	29400017 	ldw	r5,0(r5)
 8008460:	19000104 	addi	r4,r3,4
 8008464:	d9002415 	stw	r4,144(sp)
 8008468:	d9402015 	stw	r5,128(sp)
 800846c:	98c00043 	ldbu	r3,1(r19)
 8008470:	e027883a 	mov	r19,fp
 8008474:	283f5b0e 	bge	r5,zero,80081e4 <__alt_data_end+0xfc0081e4>
 8008478:	18c03fcc 	andi	r3,r3,255
 800847c:	013fffc4 	movi	r4,-1
 8008480:	18c0201c 	xori	r3,r3,128
 8008484:	d9002015 	stw	r4,128(sp)
 8008488:	18ffe004 	addi	r3,r3,-128
 800848c:	003b7d06 	br	8007284 <__alt_data_end+0xfc007284>
 8008490:	dd401d85 	stb	r21,118(sp)
 8008494:	003cf306 	br	8007864 <__alt_data_end+0xfc007864>
 8008498:	dd401d85 	stb	r21,118(sp)
 800849c:	003d4e06 	br	80079d8 <__alt_data_end+0xfc0079d8>
 80084a0:	dd401d85 	stb	r21,118(sp)
 80084a4:	003c0e06 	br	80074e0 <__alt_data_end+0xfc0074e0>
 80084a8:	d9002717 	ldw	r4,156(sp)
 80084ac:	00800304 	movi	r2,12
 80084b0:	20800015 	stw	r2,0(r4)
 80084b4:	00bfffc4 	movi	r2,-1
 80084b8:	003e6b06 	br	8007e68 <__alt_data_end+0xfc007e68>
 80084bc:	dd401d85 	stb	r21,118(sp)
 80084c0:	003d0006 	br	80078c4 <__alt_data_end+0xfc0078c4>
 80084c4:	dd401d85 	stb	r21,118(sp)
 80084c8:	003d7106 	br	8007a90 <__alt_data_end+0xfc007a90>
 80084cc:	dd401d85 	stb	r21,118(sp)
 80084d0:	003c5706 	br	8007630 <__alt_data_end+0xfc007630>
 80084d4:	dd401d85 	stb	r21,118(sp)
 80084d8:	003c2e06 	br	8007594 <__alt_data_end+0xfc007594>
 80084dc:	dd401d85 	stb	r21,118(sp)
 80084e0:	003d8c06 	br	8007b14 <__alt_data_end+0xfc007b14>
 80084e4:	dd401d85 	stb	r21,118(sp)
 80084e8:	003da706 	br	8007b88 <__alt_data_end+0xfc007b88>
 80084ec:	dd401d85 	stb	r21,118(sp)
 80084f0:	003cc806 	br	8007814 <__alt_data_end+0xfc007814>

080084f4 <_calloc_r>:
 80084f4:	defffe04 	addi	sp,sp,-8
 80084f8:	2805883a 	mov	r2,r5
 80084fc:	dc000015 	stw	r16,0(sp)
 8008500:	300b883a 	mov	r5,r6
 8008504:	2021883a 	mov	r16,r4
 8008508:	1009883a 	mov	r4,r2
 800850c:	dfc00115 	stw	ra,4(sp)
 8008510:	80014a80 	call	80014a8 <__mulsi3>
 8008514:	100b883a 	mov	r5,r2
 8008518:	8009883a 	mov	r4,r16
 800851c:	80052f00 	call	80052f0 <_malloc_r>
 8008520:	10002926 	beq	r2,zero,80085c8 <_calloc_r+0xd4>
 8008524:	11bfff17 	ldw	r6,-4(r2)
 8008528:	1021883a 	mov	r16,r2
 800852c:	00bfff04 	movi	r2,-4
 8008530:	308c703a 	and	r6,r6,r2
 8008534:	00c00904 	movi	r3,36
 8008538:	308d883a 	add	r6,r6,r2
 800853c:	19801636 	bltu	r3,r6,8008598 <_calloc_r+0xa4>
 8008540:	008004c4 	movi	r2,19
 8008544:	11800b2e 	bgeu	r2,r6,8008574 <_calloc_r+0x80>
 8008548:	80000015 	stw	zero,0(r16)
 800854c:	80000115 	stw	zero,4(r16)
 8008550:	008006c4 	movi	r2,27
 8008554:	11801a2e 	bgeu	r2,r6,80085c0 <_calloc_r+0xcc>
 8008558:	80000215 	stw	zero,8(r16)
 800855c:	80000315 	stw	zero,12(r16)
 8008560:	30c0151e 	bne	r6,r3,80085b8 <_calloc_r+0xc4>
 8008564:	80000415 	stw	zero,16(r16)
 8008568:	80800604 	addi	r2,r16,24
 800856c:	80000515 	stw	zero,20(r16)
 8008570:	00000106 	br	8008578 <_calloc_r+0x84>
 8008574:	8005883a 	mov	r2,r16
 8008578:	10000015 	stw	zero,0(r2)
 800857c:	10000115 	stw	zero,4(r2)
 8008580:	10000215 	stw	zero,8(r2)
 8008584:	8005883a 	mov	r2,r16
 8008588:	dfc00117 	ldw	ra,4(sp)
 800858c:	dc000017 	ldw	r16,0(sp)
 8008590:	dec00204 	addi	sp,sp,8
 8008594:	f800283a 	ret
 8008598:	000b883a 	mov	r5,zero
 800859c:	8009883a 	mov	r4,r16
 80085a0:	8008b600 	call	8008b60 <memset>
 80085a4:	8005883a 	mov	r2,r16
 80085a8:	dfc00117 	ldw	ra,4(sp)
 80085ac:	dc000017 	ldw	r16,0(sp)
 80085b0:	dec00204 	addi	sp,sp,8
 80085b4:	f800283a 	ret
 80085b8:	80800404 	addi	r2,r16,16
 80085bc:	003fee06 	br	8008578 <__alt_data_end+0xfc008578>
 80085c0:	80800204 	addi	r2,r16,8
 80085c4:	003fec06 	br	8008578 <__alt_data_end+0xfc008578>
 80085c8:	0005883a 	mov	r2,zero
 80085cc:	003fee06 	br	8008588 <__alt_data_end+0xfc008588>

080085d0 <_malloc_trim_r>:
 80085d0:	defffb04 	addi	sp,sp,-20
 80085d4:	dcc00315 	stw	r19,12(sp)
 80085d8:	04c20074 	movhi	r19,2049
 80085dc:	dc800215 	stw	r18,8(sp)
 80085e0:	dc400115 	stw	r17,4(sp)
 80085e4:	dc000015 	stw	r16,0(sp)
 80085e8:	dfc00415 	stw	ra,16(sp)
 80085ec:	2821883a 	mov	r16,r5
 80085f0:	9cfd3604 	addi	r19,r19,-2856
 80085f4:	2025883a 	mov	r18,r4
 80085f8:	800c8c40 	call	800c8c4 <__malloc_lock>
 80085fc:	98800217 	ldw	r2,8(r19)
 8008600:	14400117 	ldw	r17,4(r2)
 8008604:	00bfff04 	movi	r2,-4
 8008608:	88a2703a 	and	r17,r17,r2
 800860c:	8c21c83a 	sub	r16,r17,r16
 8008610:	8403fbc4 	addi	r16,r16,4079
 8008614:	8020d33a 	srli	r16,r16,12
 8008618:	0083ffc4 	movi	r2,4095
 800861c:	843fffc4 	addi	r16,r16,-1
 8008620:	8020933a 	slli	r16,r16,12
 8008624:	1400060e 	bge	r2,r16,8008640 <_malloc_trim_r+0x70>
 8008628:	000b883a 	mov	r5,zero
 800862c:	9009883a 	mov	r4,r18
 8008630:	8006e540 	call	8006e54 <_sbrk_r>
 8008634:	98c00217 	ldw	r3,8(r19)
 8008638:	1c47883a 	add	r3,r3,r17
 800863c:	10c00a26 	beq	r2,r3,8008668 <_malloc_trim_r+0x98>
 8008640:	9009883a 	mov	r4,r18
 8008644:	800c8e80 	call	800c8e8 <__malloc_unlock>
 8008648:	0005883a 	mov	r2,zero
 800864c:	dfc00417 	ldw	ra,16(sp)
 8008650:	dcc00317 	ldw	r19,12(sp)
 8008654:	dc800217 	ldw	r18,8(sp)
 8008658:	dc400117 	ldw	r17,4(sp)
 800865c:	dc000017 	ldw	r16,0(sp)
 8008660:	dec00504 	addi	sp,sp,20
 8008664:	f800283a 	ret
 8008668:	040bc83a 	sub	r5,zero,r16
 800866c:	9009883a 	mov	r4,r18
 8008670:	8006e540 	call	8006e54 <_sbrk_r>
 8008674:	00ffffc4 	movi	r3,-1
 8008678:	10c00d26 	beq	r2,r3,80086b0 <_malloc_trim_r+0xe0>
 800867c:	00c20074 	movhi	r3,2049
 8008680:	18c9ef04 	addi	r3,r3,10172
 8008684:	18800017 	ldw	r2,0(r3)
 8008688:	99000217 	ldw	r4,8(r19)
 800868c:	8c23c83a 	sub	r17,r17,r16
 8008690:	8c400054 	ori	r17,r17,1
 8008694:	1421c83a 	sub	r16,r2,r16
 8008698:	24400115 	stw	r17,4(r4)
 800869c:	9009883a 	mov	r4,r18
 80086a0:	1c000015 	stw	r16,0(r3)
 80086a4:	800c8e80 	call	800c8e8 <__malloc_unlock>
 80086a8:	00800044 	movi	r2,1
 80086ac:	003fe706 	br	800864c <__alt_data_end+0xfc00864c>
 80086b0:	000b883a 	mov	r5,zero
 80086b4:	9009883a 	mov	r4,r18
 80086b8:	8006e540 	call	8006e54 <_sbrk_r>
 80086bc:	99000217 	ldw	r4,8(r19)
 80086c0:	014003c4 	movi	r5,15
 80086c4:	1107c83a 	sub	r3,r2,r4
 80086c8:	28ffdd0e 	bge	r5,r3,8008640 <__alt_data_end+0xfc008640>
 80086cc:	01420074 	movhi	r5,2049
 80086d0:	2942be04 	addi	r5,r5,2808
 80086d4:	29400017 	ldw	r5,0(r5)
 80086d8:	18c00054 	ori	r3,r3,1
 80086dc:	20c00115 	stw	r3,4(r4)
 80086e0:	00c20074 	movhi	r3,2049
 80086e4:	1145c83a 	sub	r2,r2,r5
 80086e8:	18c9ef04 	addi	r3,r3,10172
 80086ec:	18800015 	stw	r2,0(r3)
 80086f0:	003fd306 	br	8008640 <__alt_data_end+0xfc008640>

080086f4 <_free_r>:
 80086f4:	28004126 	beq	r5,zero,80087fc <_free_r+0x108>
 80086f8:	defffd04 	addi	sp,sp,-12
 80086fc:	dc400115 	stw	r17,4(sp)
 8008700:	dc000015 	stw	r16,0(sp)
 8008704:	2023883a 	mov	r17,r4
 8008708:	2821883a 	mov	r16,r5
 800870c:	dfc00215 	stw	ra,8(sp)
 8008710:	800c8c40 	call	800c8c4 <__malloc_lock>
 8008714:	81ffff17 	ldw	r7,-4(r16)
 8008718:	00bfff84 	movi	r2,-2
 800871c:	01020074 	movhi	r4,2049
 8008720:	81bffe04 	addi	r6,r16,-8
 8008724:	3884703a 	and	r2,r7,r2
 8008728:	213d3604 	addi	r4,r4,-2856
 800872c:	308b883a 	add	r5,r6,r2
 8008730:	2a400117 	ldw	r9,4(r5)
 8008734:	22000217 	ldw	r8,8(r4)
 8008738:	00ffff04 	movi	r3,-4
 800873c:	48c6703a 	and	r3,r9,r3
 8008740:	2a005726 	beq	r5,r8,80088a0 <_free_r+0x1ac>
 8008744:	28c00115 	stw	r3,4(r5)
 8008748:	39c0004c 	andi	r7,r7,1
 800874c:	3800091e 	bne	r7,zero,8008774 <_free_r+0x80>
 8008750:	823ffe17 	ldw	r8,-8(r16)
 8008754:	22400204 	addi	r9,r4,8
 8008758:	320dc83a 	sub	r6,r6,r8
 800875c:	31c00217 	ldw	r7,8(r6)
 8008760:	1205883a 	add	r2,r2,r8
 8008764:	3a406526 	beq	r7,r9,80088fc <_free_r+0x208>
 8008768:	32000317 	ldw	r8,12(r6)
 800876c:	3a000315 	stw	r8,12(r7)
 8008770:	41c00215 	stw	r7,8(r8)
 8008774:	28cf883a 	add	r7,r5,r3
 8008778:	39c00117 	ldw	r7,4(r7)
 800877c:	39c0004c 	andi	r7,r7,1
 8008780:	38003a26 	beq	r7,zero,800886c <_free_r+0x178>
 8008784:	10c00054 	ori	r3,r2,1
 8008788:	30c00115 	stw	r3,4(r6)
 800878c:	3087883a 	add	r3,r6,r2
 8008790:	18800015 	stw	r2,0(r3)
 8008794:	00c07fc4 	movi	r3,511
 8008798:	18801936 	bltu	r3,r2,8008800 <_free_r+0x10c>
 800879c:	1004d0fa 	srli	r2,r2,3
 80087a0:	01c00044 	movi	r7,1
 80087a4:	21400117 	ldw	r5,4(r4)
 80087a8:	10c00044 	addi	r3,r2,1
 80087ac:	18c7883a 	add	r3,r3,r3
 80087b0:	1005d0ba 	srai	r2,r2,2
 80087b4:	18c7883a 	add	r3,r3,r3
 80087b8:	18c7883a 	add	r3,r3,r3
 80087bc:	1907883a 	add	r3,r3,r4
 80087c0:	3884983a 	sll	r2,r7,r2
 80087c4:	19c00017 	ldw	r7,0(r3)
 80087c8:	1a3ffe04 	addi	r8,r3,-8
 80087cc:	1144b03a 	or	r2,r2,r5
 80087d0:	32000315 	stw	r8,12(r6)
 80087d4:	31c00215 	stw	r7,8(r6)
 80087d8:	20800115 	stw	r2,4(r4)
 80087dc:	19800015 	stw	r6,0(r3)
 80087e0:	39800315 	stw	r6,12(r7)
 80087e4:	8809883a 	mov	r4,r17
 80087e8:	dfc00217 	ldw	ra,8(sp)
 80087ec:	dc400117 	ldw	r17,4(sp)
 80087f0:	dc000017 	ldw	r16,0(sp)
 80087f4:	dec00304 	addi	sp,sp,12
 80087f8:	800c8e81 	jmpi	800c8e8 <__malloc_unlock>
 80087fc:	f800283a 	ret
 8008800:	100ad27a 	srli	r5,r2,9
 8008804:	00c00104 	movi	r3,4
 8008808:	19404a36 	bltu	r3,r5,8008934 <_free_r+0x240>
 800880c:	100ad1ba 	srli	r5,r2,6
 8008810:	28c00e44 	addi	r3,r5,57
 8008814:	18c7883a 	add	r3,r3,r3
 8008818:	29400e04 	addi	r5,r5,56
 800881c:	18c7883a 	add	r3,r3,r3
 8008820:	18c7883a 	add	r3,r3,r3
 8008824:	1909883a 	add	r4,r3,r4
 8008828:	20c00017 	ldw	r3,0(r4)
 800882c:	01c20074 	movhi	r7,2049
 8008830:	213ffe04 	addi	r4,r4,-8
 8008834:	39fd3604 	addi	r7,r7,-2856
 8008838:	20c04426 	beq	r4,r3,800894c <_free_r+0x258>
 800883c:	01ffff04 	movi	r7,-4
 8008840:	19400117 	ldw	r5,4(r3)
 8008844:	29ca703a 	and	r5,r5,r7
 8008848:	1140022e 	bgeu	r2,r5,8008854 <_free_r+0x160>
 800884c:	18c00217 	ldw	r3,8(r3)
 8008850:	20fffb1e 	bne	r4,r3,8008840 <__alt_data_end+0xfc008840>
 8008854:	19000317 	ldw	r4,12(r3)
 8008858:	31000315 	stw	r4,12(r6)
 800885c:	30c00215 	stw	r3,8(r6)
 8008860:	21800215 	stw	r6,8(r4)
 8008864:	19800315 	stw	r6,12(r3)
 8008868:	003fde06 	br	80087e4 <__alt_data_end+0xfc0087e4>
 800886c:	29c00217 	ldw	r7,8(r5)
 8008870:	10c5883a 	add	r2,r2,r3
 8008874:	00c20074 	movhi	r3,2049
 8008878:	18fd3804 	addi	r3,r3,-2848
 800887c:	38c03b26 	beq	r7,r3,800896c <_free_r+0x278>
 8008880:	2a000317 	ldw	r8,12(r5)
 8008884:	11400054 	ori	r5,r2,1
 8008888:	3087883a 	add	r3,r6,r2
 800888c:	3a000315 	stw	r8,12(r7)
 8008890:	41c00215 	stw	r7,8(r8)
 8008894:	31400115 	stw	r5,4(r6)
 8008898:	18800015 	stw	r2,0(r3)
 800889c:	003fbd06 	br	8008794 <__alt_data_end+0xfc008794>
 80088a0:	39c0004c 	andi	r7,r7,1
 80088a4:	10c5883a 	add	r2,r2,r3
 80088a8:	3800071e 	bne	r7,zero,80088c8 <_free_r+0x1d4>
 80088ac:	81fffe17 	ldw	r7,-8(r16)
 80088b0:	31cdc83a 	sub	r6,r6,r7
 80088b4:	30c00317 	ldw	r3,12(r6)
 80088b8:	31400217 	ldw	r5,8(r6)
 80088bc:	11c5883a 	add	r2,r2,r7
 80088c0:	28c00315 	stw	r3,12(r5)
 80088c4:	19400215 	stw	r5,8(r3)
 80088c8:	10c00054 	ori	r3,r2,1
 80088cc:	30c00115 	stw	r3,4(r6)
 80088d0:	00c20074 	movhi	r3,2049
 80088d4:	18c2bf04 	addi	r3,r3,2812
 80088d8:	18c00017 	ldw	r3,0(r3)
 80088dc:	21800215 	stw	r6,8(r4)
 80088e0:	10ffc036 	bltu	r2,r3,80087e4 <__alt_data_end+0xfc0087e4>
 80088e4:	00820074 	movhi	r2,2049
 80088e8:	1089e604 	addi	r2,r2,10136
 80088ec:	11400017 	ldw	r5,0(r2)
 80088f0:	8809883a 	mov	r4,r17
 80088f4:	80085d00 	call	80085d0 <_malloc_trim_r>
 80088f8:	003fba06 	br	80087e4 <__alt_data_end+0xfc0087e4>
 80088fc:	28c9883a 	add	r4,r5,r3
 8008900:	21000117 	ldw	r4,4(r4)
 8008904:	2100004c 	andi	r4,r4,1
 8008908:	2000391e 	bne	r4,zero,80089f0 <_free_r+0x2fc>
 800890c:	29c00217 	ldw	r7,8(r5)
 8008910:	29000317 	ldw	r4,12(r5)
 8008914:	1885883a 	add	r2,r3,r2
 8008918:	10c00054 	ori	r3,r2,1
 800891c:	39000315 	stw	r4,12(r7)
 8008920:	21c00215 	stw	r7,8(r4)
 8008924:	30c00115 	stw	r3,4(r6)
 8008928:	308d883a 	add	r6,r6,r2
 800892c:	30800015 	stw	r2,0(r6)
 8008930:	003fac06 	br	80087e4 <__alt_data_end+0xfc0087e4>
 8008934:	00c00504 	movi	r3,20
 8008938:	19401536 	bltu	r3,r5,8008990 <_free_r+0x29c>
 800893c:	28c01704 	addi	r3,r5,92
 8008940:	18c7883a 	add	r3,r3,r3
 8008944:	294016c4 	addi	r5,r5,91
 8008948:	003fb406 	br	800881c <__alt_data_end+0xfc00881c>
 800894c:	280bd0ba 	srai	r5,r5,2
 8008950:	00c00044 	movi	r3,1
 8008954:	38800117 	ldw	r2,4(r7)
 8008958:	194a983a 	sll	r5,r3,r5
 800895c:	2007883a 	mov	r3,r4
 8008960:	2884b03a 	or	r2,r5,r2
 8008964:	38800115 	stw	r2,4(r7)
 8008968:	003fbb06 	br	8008858 <__alt_data_end+0xfc008858>
 800896c:	21800515 	stw	r6,20(r4)
 8008970:	21800415 	stw	r6,16(r4)
 8008974:	10c00054 	ori	r3,r2,1
 8008978:	31c00315 	stw	r7,12(r6)
 800897c:	31c00215 	stw	r7,8(r6)
 8008980:	30c00115 	stw	r3,4(r6)
 8008984:	308d883a 	add	r6,r6,r2
 8008988:	30800015 	stw	r2,0(r6)
 800898c:	003f9506 	br	80087e4 <__alt_data_end+0xfc0087e4>
 8008990:	00c01504 	movi	r3,84
 8008994:	19400536 	bltu	r3,r5,80089ac <_free_r+0x2b8>
 8008998:	100ad33a 	srli	r5,r2,12
 800899c:	28c01bc4 	addi	r3,r5,111
 80089a0:	18c7883a 	add	r3,r3,r3
 80089a4:	29401b84 	addi	r5,r5,110
 80089a8:	003f9c06 	br	800881c <__alt_data_end+0xfc00881c>
 80089ac:	00c05504 	movi	r3,340
 80089b0:	19400536 	bltu	r3,r5,80089c8 <_free_r+0x2d4>
 80089b4:	100ad3fa 	srli	r5,r2,15
 80089b8:	28c01e04 	addi	r3,r5,120
 80089bc:	18c7883a 	add	r3,r3,r3
 80089c0:	29401dc4 	addi	r5,r5,119
 80089c4:	003f9506 	br	800881c <__alt_data_end+0xfc00881c>
 80089c8:	00c15504 	movi	r3,1364
 80089cc:	19400536 	bltu	r3,r5,80089e4 <_free_r+0x2f0>
 80089d0:	100ad4ba 	srli	r5,r2,18
 80089d4:	28c01f44 	addi	r3,r5,125
 80089d8:	18c7883a 	add	r3,r3,r3
 80089dc:	29401f04 	addi	r5,r5,124
 80089e0:	003f8e06 	br	800881c <__alt_data_end+0xfc00881c>
 80089e4:	00c03f84 	movi	r3,254
 80089e8:	01401f84 	movi	r5,126
 80089ec:	003f8b06 	br	800881c <__alt_data_end+0xfc00881c>
 80089f0:	10c00054 	ori	r3,r2,1
 80089f4:	30c00115 	stw	r3,4(r6)
 80089f8:	308d883a 	add	r6,r6,r2
 80089fc:	30800015 	stw	r2,0(r6)
 8008a00:	003f7806 	br	80087e4 <__alt_data_end+0xfc0087e4>

08008a04 <memmove>:
 8008a04:	2005883a 	mov	r2,r4
 8008a08:	29000b2e 	bgeu	r5,r4,8008a38 <memmove+0x34>
 8008a0c:	298f883a 	add	r7,r5,r6
 8008a10:	21c0092e 	bgeu	r4,r7,8008a38 <memmove+0x34>
 8008a14:	2187883a 	add	r3,r4,r6
 8008a18:	198bc83a 	sub	r5,r3,r6
 8008a1c:	30004826 	beq	r6,zero,8008b40 <memmove+0x13c>
 8008a20:	39ffffc4 	addi	r7,r7,-1
 8008a24:	39000003 	ldbu	r4,0(r7)
 8008a28:	18ffffc4 	addi	r3,r3,-1
 8008a2c:	19000005 	stb	r4,0(r3)
 8008a30:	28fffb1e 	bne	r5,r3,8008a20 <__alt_data_end+0xfc008a20>
 8008a34:	f800283a 	ret
 8008a38:	00c003c4 	movi	r3,15
 8008a3c:	1980412e 	bgeu	r3,r6,8008b44 <memmove+0x140>
 8008a40:	2886b03a 	or	r3,r5,r2
 8008a44:	18c000cc 	andi	r3,r3,3
 8008a48:	1800401e 	bne	r3,zero,8008b4c <memmove+0x148>
 8008a4c:	33fffc04 	addi	r15,r6,-16
 8008a50:	781ed13a 	srli	r15,r15,4
 8008a54:	28c00104 	addi	r3,r5,4
 8008a58:	13400104 	addi	r13,r2,4
 8008a5c:	781c913a 	slli	r14,r15,4
 8008a60:	2b000204 	addi	r12,r5,8
 8008a64:	12c00204 	addi	r11,r2,8
 8008a68:	73800504 	addi	r14,r14,20
 8008a6c:	2a800304 	addi	r10,r5,12
 8008a70:	12400304 	addi	r9,r2,12
 8008a74:	2b9d883a 	add	r14,r5,r14
 8008a78:	2811883a 	mov	r8,r5
 8008a7c:	100f883a 	mov	r7,r2
 8008a80:	41000017 	ldw	r4,0(r8)
 8008a84:	39c00404 	addi	r7,r7,16
 8008a88:	18c00404 	addi	r3,r3,16
 8008a8c:	393ffc15 	stw	r4,-16(r7)
 8008a90:	193ffc17 	ldw	r4,-16(r3)
 8008a94:	6b400404 	addi	r13,r13,16
 8008a98:	5ac00404 	addi	r11,r11,16
 8008a9c:	693ffc15 	stw	r4,-16(r13)
 8008aa0:	61000017 	ldw	r4,0(r12)
 8008aa4:	4a400404 	addi	r9,r9,16
 8008aa8:	42000404 	addi	r8,r8,16
 8008aac:	593ffc15 	stw	r4,-16(r11)
 8008ab0:	51000017 	ldw	r4,0(r10)
 8008ab4:	63000404 	addi	r12,r12,16
 8008ab8:	52800404 	addi	r10,r10,16
 8008abc:	493ffc15 	stw	r4,-16(r9)
 8008ac0:	1bbfef1e 	bne	r3,r14,8008a80 <__alt_data_end+0xfc008a80>
 8008ac4:	79000044 	addi	r4,r15,1
 8008ac8:	2008913a 	slli	r4,r4,4
 8008acc:	328003cc 	andi	r10,r6,15
 8008ad0:	02c000c4 	movi	r11,3
 8008ad4:	1107883a 	add	r3,r2,r4
 8008ad8:	290b883a 	add	r5,r5,r4
 8008adc:	5a801e2e 	bgeu	r11,r10,8008b58 <memmove+0x154>
 8008ae0:	1813883a 	mov	r9,r3
 8008ae4:	2811883a 	mov	r8,r5
 8008ae8:	500f883a 	mov	r7,r10
 8008aec:	41000017 	ldw	r4,0(r8)
 8008af0:	4a400104 	addi	r9,r9,4
 8008af4:	39ffff04 	addi	r7,r7,-4
 8008af8:	493fff15 	stw	r4,-4(r9)
 8008afc:	42000104 	addi	r8,r8,4
 8008b00:	59fffa36 	bltu	r11,r7,8008aec <__alt_data_end+0xfc008aec>
 8008b04:	513fff04 	addi	r4,r10,-4
 8008b08:	2008d0ba 	srli	r4,r4,2
 8008b0c:	318000cc 	andi	r6,r6,3
 8008b10:	21000044 	addi	r4,r4,1
 8008b14:	2109883a 	add	r4,r4,r4
 8008b18:	2109883a 	add	r4,r4,r4
 8008b1c:	1907883a 	add	r3,r3,r4
 8008b20:	290b883a 	add	r5,r5,r4
 8008b24:	30000b26 	beq	r6,zero,8008b54 <memmove+0x150>
 8008b28:	198d883a 	add	r6,r3,r6
 8008b2c:	29c00003 	ldbu	r7,0(r5)
 8008b30:	18c00044 	addi	r3,r3,1
 8008b34:	29400044 	addi	r5,r5,1
 8008b38:	19ffffc5 	stb	r7,-1(r3)
 8008b3c:	19bffb1e 	bne	r3,r6,8008b2c <__alt_data_end+0xfc008b2c>
 8008b40:	f800283a 	ret
 8008b44:	1007883a 	mov	r3,r2
 8008b48:	003ff606 	br	8008b24 <__alt_data_end+0xfc008b24>
 8008b4c:	1007883a 	mov	r3,r2
 8008b50:	003ff506 	br	8008b28 <__alt_data_end+0xfc008b28>
 8008b54:	f800283a 	ret
 8008b58:	500d883a 	mov	r6,r10
 8008b5c:	003ff106 	br	8008b24 <__alt_data_end+0xfc008b24>

08008b60 <memset>:
 8008b60:	20c000cc 	andi	r3,r4,3
 8008b64:	2005883a 	mov	r2,r4
 8008b68:	18004426 	beq	r3,zero,8008c7c <memset+0x11c>
 8008b6c:	31ffffc4 	addi	r7,r6,-1
 8008b70:	30004026 	beq	r6,zero,8008c74 <memset+0x114>
 8008b74:	2813883a 	mov	r9,r5
 8008b78:	200d883a 	mov	r6,r4
 8008b7c:	2007883a 	mov	r3,r4
 8008b80:	00000406 	br	8008b94 <memset+0x34>
 8008b84:	3a3fffc4 	addi	r8,r7,-1
 8008b88:	31800044 	addi	r6,r6,1
 8008b8c:	38003926 	beq	r7,zero,8008c74 <memset+0x114>
 8008b90:	400f883a 	mov	r7,r8
 8008b94:	18c00044 	addi	r3,r3,1
 8008b98:	32400005 	stb	r9,0(r6)
 8008b9c:	1a0000cc 	andi	r8,r3,3
 8008ba0:	403ff81e 	bne	r8,zero,8008b84 <__alt_data_end+0xfc008b84>
 8008ba4:	010000c4 	movi	r4,3
 8008ba8:	21c02d2e 	bgeu	r4,r7,8008c60 <memset+0x100>
 8008bac:	29003fcc 	andi	r4,r5,255
 8008bb0:	200c923a 	slli	r6,r4,8
 8008bb4:	3108b03a 	or	r4,r6,r4
 8008bb8:	200c943a 	slli	r6,r4,16
 8008bbc:	218cb03a 	or	r6,r4,r6
 8008bc0:	010003c4 	movi	r4,15
 8008bc4:	21c0182e 	bgeu	r4,r7,8008c28 <memset+0xc8>
 8008bc8:	3b3ffc04 	addi	r12,r7,-16
 8008bcc:	6018d13a 	srli	r12,r12,4
 8008bd0:	1a000104 	addi	r8,r3,4
 8008bd4:	1ac00204 	addi	r11,r3,8
 8008bd8:	6008913a 	slli	r4,r12,4
 8008bdc:	1a800304 	addi	r10,r3,12
 8008be0:	1813883a 	mov	r9,r3
 8008be4:	21000504 	addi	r4,r4,20
 8008be8:	1909883a 	add	r4,r3,r4
 8008bec:	49800015 	stw	r6,0(r9)
 8008bf0:	41800015 	stw	r6,0(r8)
 8008bf4:	59800015 	stw	r6,0(r11)
 8008bf8:	51800015 	stw	r6,0(r10)
 8008bfc:	42000404 	addi	r8,r8,16
 8008c00:	4a400404 	addi	r9,r9,16
 8008c04:	5ac00404 	addi	r11,r11,16
 8008c08:	52800404 	addi	r10,r10,16
 8008c0c:	413ff71e 	bne	r8,r4,8008bec <__alt_data_end+0xfc008bec>
 8008c10:	63000044 	addi	r12,r12,1
 8008c14:	6018913a 	slli	r12,r12,4
 8008c18:	39c003cc 	andi	r7,r7,15
 8008c1c:	010000c4 	movi	r4,3
 8008c20:	1b07883a 	add	r3,r3,r12
 8008c24:	21c00e2e 	bgeu	r4,r7,8008c60 <memset+0x100>
 8008c28:	1813883a 	mov	r9,r3
 8008c2c:	3811883a 	mov	r8,r7
 8008c30:	010000c4 	movi	r4,3
 8008c34:	49800015 	stw	r6,0(r9)
 8008c38:	423fff04 	addi	r8,r8,-4
 8008c3c:	4a400104 	addi	r9,r9,4
 8008c40:	223ffc36 	bltu	r4,r8,8008c34 <__alt_data_end+0xfc008c34>
 8008c44:	393fff04 	addi	r4,r7,-4
 8008c48:	2008d0ba 	srli	r4,r4,2
 8008c4c:	39c000cc 	andi	r7,r7,3
 8008c50:	21000044 	addi	r4,r4,1
 8008c54:	2109883a 	add	r4,r4,r4
 8008c58:	2109883a 	add	r4,r4,r4
 8008c5c:	1907883a 	add	r3,r3,r4
 8008c60:	38000526 	beq	r7,zero,8008c78 <memset+0x118>
 8008c64:	19cf883a 	add	r7,r3,r7
 8008c68:	19400005 	stb	r5,0(r3)
 8008c6c:	18c00044 	addi	r3,r3,1
 8008c70:	38fffd1e 	bne	r7,r3,8008c68 <__alt_data_end+0xfc008c68>
 8008c74:	f800283a 	ret
 8008c78:	f800283a 	ret
 8008c7c:	2007883a 	mov	r3,r4
 8008c80:	300f883a 	mov	r7,r6
 8008c84:	003fc706 	br	8008ba4 <__alt_data_end+0xfc008ba4>

08008c88 <_realloc_r>:
 8008c88:	defff604 	addi	sp,sp,-40
 8008c8c:	dc800215 	stw	r18,8(sp)
 8008c90:	dfc00915 	stw	ra,36(sp)
 8008c94:	df000815 	stw	fp,32(sp)
 8008c98:	ddc00715 	stw	r23,28(sp)
 8008c9c:	dd800615 	stw	r22,24(sp)
 8008ca0:	dd400515 	stw	r21,20(sp)
 8008ca4:	dd000415 	stw	r20,16(sp)
 8008ca8:	dcc00315 	stw	r19,12(sp)
 8008cac:	dc400115 	stw	r17,4(sp)
 8008cb0:	dc000015 	stw	r16,0(sp)
 8008cb4:	3025883a 	mov	r18,r6
 8008cb8:	2800b726 	beq	r5,zero,8008f98 <_realloc_r+0x310>
 8008cbc:	282b883a 	mov	r21,r5
 8008cc0:	2029883a 	mov	r20,r4
 8008cc4:	800c8c40 	call	800c8c4 <__malloc_lock>
 8008cc8:	a8bfff17 	ldw	r2,-4(r21)
 8008ccc:	043fff04 	movi	r16,-4
 8008cd0:	90c002c4 	addi	r3,r18,11
 8008cd4:	01000584 	movi	r4,22
 8008cd8:	acfffe04 	addi	r19,r21,-8
 8008cdc:	1420703a 	and	r16,r2,r16
 8008ce0:	20c0332e 	bgeu	r4,r3,8008db0 <_realloc_r+0x128>
 8008ce4:	047ffe04 	movi	r17,-8
 8008ce8:	1c62703a 	and	r17,r3,r17
 8008cec:	8807883a 	mov	r3,r17
 8008cf0:	88005816 	blt	r17,zero,8008e54 <_realloc_r+0x1cc>
 8008cf4:	8c805736 	bltu	r17,r18,8008e54 <_realloc_r+0x1cc>
 8008cf8:	80c0300e 	bge	r16,r3,8008dbc <_realloc_r+0x134>
 8008cfc:	07020074 	movhi	fp,2049
 8008d00:	e73d3604 	addi	fp,fp,-2856
 8008d04:	e1c00217 	ldw	r7,8(fp)
 8008d08:	9c09883a 	add	r4,r19,r16
 8008d0c:	22000117 	ldw	r8,4(r4)
 8008d10:	21c06326 	beq	r4,r7,8008ea0 <_realloc_r+0x218>
 8008d14:	017fff84 	movi	r5,-2
 8008d18:	414a703a 	and	r5,r8,r5
 8008d1c:	214b883a 	add	r5,r4,r5
 8008d20:	29800117 	ldw	r6,4(r5)
 8008d24:	3180004c 	andi	r6,r6,1
 8008d28:	30003f26 	beq	r6,zero,8008e28 <_realloc_r+0x1a0>
 8008d2c:	1080004c 	andi	r2,r2,1
 8008d30:	10008326 	beq	r2,zero,8008f40 <_realloc_r+0x2b8>
 8008d34:	900b883a 	mov	r5,r18
 8008d38:	a009883a 	mov	r4,r20
 8008d3c:	80052f00 	call	80052f0 <_malloc_r>
 8008d40:	1025883a 	mov	r18,r2
 8008d44:	10011e26 	beq	r2,zero,80091c0 <_realloc_r+0x538>
 8008d48:	a93fff17 	ldw	r4,-4(r21)
 8008d4c:	10fffe04 	addi	r3,r2,-8
 8008d50:	00bfff84 	movi	r2,-2
 8008d54:	2084703a 	and	r2,r4,r2
 8008d58:	9885883a 	add	r2,r19,r2
 8008d5c:	1880ee26 	beq	r3,r2,8009118 <_realloc_r+0x490>
 8008d60:	81bfff04 	addi	r6,r16,-4
 8008d64:	00800904 	movi	r2,36
 8008d68:	1180b836 	bltu	r2,r6,800904c <_realloc_r+0x3c4>
 8008d6c:	00c004c4 	movi	r3,19
 8008d70:	19809636 	bltu	r3,r6,8008fcc <_realloc_r+0x344>
 8008d74:	9005883a 	mov	r2,r18
 8008d78:	a807883a 	mov	r3,r21
 8008d7c:	19000017 	ldw	r4,0(r3)
 8008d80:	11000015 	stw	r4,0(r2)
 8008d84:	19000117 	ldw	r4,4(r3)
 8008d88:	11000115 	stw	r4,4(r2)
 8008d8c:	18c00217 	ldw	r3,8(r3)
 8008d90:	10c00215 	stw	r3,8(r2)
 8008d94:	a80b883a 	mov	r5,r21
 8008d98:	a009883a 	mov	r4,r20
 8008d9c:	80086f40 	call	80086f4 <_free_r>
 8008da0:	a009883a 	mov	r4,r20
 8008da4:	800c8e80 	call	800c8e8 <__malloc_unlock>
 8008da8:	9005883a 	mov	r2,r18
 8008dac:	00001206 	br	8008df8 <_realloc_r+0x170>
 8008db0:	00c00404 	movi	r3,16
 8008db4:	1823883a 	mov	r17,r3
 8008db8:	003fce06 	br	8008cf4 <__alt_data_end+0xfc008cf4>
 8008dbc:	a825883a 	mov	r18,r21
 8008dc0:	8445c83a 	sub	r2,r16,r17
 8008dc4:	00c003c4 	movi	r3,15
 8008dc8:	18802636 	bltu	r3,r2,8008e64 <_realloc_r+0x1dc>
 8008dcc:	99800117 	ldw	r6,4(r19)
 8008dd0:	9c07883a 	add	r3,r19,r16
 8008dd4:	3180004c 	andi	r6,r6,1
 8008dd8:	3420b03a 	or	r16,r6,r16
 8008ddc:	9c000115 	stw	r16,4(r19)
 8008de0:	18800117 	ldw	r2,4(r3)
 8008de4:	10800054 	ori	r2,r2,1
 8008de8:	18800115 	stw	r2,4(r3)
 8008dec:	a009883a 	mov	r4,r20
 8008df0:	800c8e80 	call	800c8e8 <__malloc_unlock>
 8008df4:	9005883a 	mov	r2,r18
 8008df8:	dfc00917 	ldw	ra,36(sp)
 8008dfc:	df000817 	ldw	fp,32(sp)
 8008e00:	ddc00717 	ldw	r23,28(sp)
 8008e04:	dd800617 	ldw	r22,24(sp)
 8008e08:	dd400517 	ldw	r21,20(sp)
 8008e0c:	dd000417 	ldw	r20,16(sp)
 8008e10:	dcc00317 	ldw	r19,12(sp)
 8008e14:	dc800217 	ldw	r18,8(sp)
 8008e18:	dc400117 	ldw	r17,4(sp)
 8008e1c:	dc000017 	ldw	r16,0(sp)
 8008e20:	dec00a04 	addi	sp,sp,40
 8008e24:	f800283a 	ret
 8008e28:	017fff04 	movi	r5,-4
 8008e2c:	414a703a 	and	r5,r8,r5
 8008e30:	814d883a 	add	r6,r16,r5
 8008e34:	30c01f16 	blt	r6,r3,8008eb4 <_realloc_r+0x22c>
 8008e38:	20800317 	ldw	r2,12(r4)
 8008e3c:	20c00217 	ldw	r3,8(r4)
 8008e40:	a825883a 	mov	r18,r21
 8008e44:	3021883a 	mov	r16,r6
 8008e48:	18800315 	stw	r2,12(r3)
 8008e4c:	10c00215 	stw	r3,8(r2)
 8008e50:	003fdb06 	br	8008dc0 <__alt_data_end+0xfc008dc0>
 8008e54:	00800304 	movi	r2,12
 8008e58:	a0800015 	stw	r2,0(r20)
 8008e5c:	0005883a 	mov	r2,zero
 8008e60:	003fe506 	br	8008df8 <__alt_data_end+0xfc008df8>
 8008e64:	98c00117 	ldw	r3,4(r19)
 8008e68:	9c4b883a 	add	r5,r19,r17
 8008e6c:	11000054 	ori	r4,r2,1
 8008e70:	18c0004c 	andi	r3,r3,1
 8008e74:	1c62b03a 	or	r17,r3,r17
 8008e78:	9c400115 	stw	r17,4(r19)
 8008e7c:	29000115 	stw	r4,4(r5)
 8008e80:	2885883a 	add	r2,r5,r2
 8008e84:	10c00117 	ldw	r3,4(r2)
 8008e88:	29400204 	addi	r5,r5,8
 8008e8c:	a009883a 	mov	r4,r20
 8008e90:	18c00054 	ori	r3,r3,1
 8008e94:	10c00115 	stw	r3,4(r2)
 8008e98:	80086f40 	call	80086f4 <_free_r>
 8008e9c:	003fd306 	br	8008dec <__alt_data_end+0xfc008dec>
 8008ea0:	017fff04 	movi	r5,-4
 8008ea4:	414a703a 	and	r5,r8,r5
 8008ea8:	89800404 	addi	r6,r17,16
 8008eac:	8151883a 	add	r8,r16,r5
 8008eb0:	4180590e 	bge	r8,r6,8009018 <_realloc_r+0x390>
 8008eb4:	1080004c 	andi	r2,r2,1
 8008eb8:	103f9e1e 	bne	r2,zero,8008d34 <__alt_data_end+0xfc008d34>
 8008ebc:	adbffe17 	ldw	r22,-8(r21)
 8008ec0:	00bfff04 	movi	r2,-4
 8008ec4:	9dadc83a 	sub	r22,r19,r22
 8008ec8:	b1800117 	ldw	r6,4(r22)
 8008ecc:	3084703a 	and	r2,r6,r2
 8008ed0:	20002026 	beq	r4,zero,8008f54 <_realloc_r+0x2cc>
 8008ed4:	80af883a 	add	r23,r16,r2
 8008ed8:	b96f883a 	add	r23,r23,r5
 8008edc:	21c05f26 	beq	r4,r7,800905c <_realloc_r+0x3d4>
 8008ee0:	b8c01c16 	blt	r23,r3,8008f54 <_realloc_r+0x2cc>
 8008ee4:	20800317 	ldw	r2,12(r4)
 8008ee8:	20c00217 	ldw	r3,8(r4)
 8008eec:	81bfff04 	addi	r6,r16,-4
 8008ef0:	01000904 	movi	r4,36
 8008ef4:	18800315 	stw	r2,12(r3)
 8008ef8:	10c00215 	stw	r3,8(r2)
 8008efc:	b0c00217 	ldw	r3,8(r22)
 8008f00:	b0800317 	ldw	r2,12(r22)
 8008f04:	b4800204 	addi	r18,r22,8
 8008f08:	18800315 	stw	r2,12(r3)
 8008f0c:	10c00215 	stw	r3,8(r2)
 8008f10:	21801b36 	bltu	r4,r6,8008f80 <_realloc_r+0x2f8>
 8008f14:	008004c4 	movi	r2,19
 8008f18:	1180352e 	bgeu	r2,r6,8008ff0 <_realloc_r+0x368>
 8008f1c:	a8800017 	ldw	r2,0(r21)
 8008f20:	b0800215 	stw	r2,8(r22)
 8008f24:	a8800117 	ldw	r2,4(r21)
 8008f28:	b0800315 	stw	r2,12(r22)
 8008f2c:	008006c4 	movi	r2,27
 8008f30:	11807f36 	bltu	r2,r6,8009130 <_realloc_r+0x4a8>
 8008f34:	b0800404 	addi	r2,r22,16
 8008f38:	ad400204 	addi	r21,r21,8
 8008f3c:	00002d06 	br	8008ff4 <_realloc_r+0x36c>
 8008f40:	adbffe17 	ldw	r22,-8(r21)
 8008f44:	00bfff04 	movi	r2,-4
 8008f48:	9dadc83a 	sub	r22,r19,r22
 8008f4c:	b1000117 	ldw	r4,4(r22)
 8008f50:	2084703a 	and	r2,r4,r2
 8008f54:	b03f7726 	beq	r22,zero,8008d34 <__alt_data_end+0xfc008d34>
 8008f58:	80af883a 	add	r23,r16,r2
 8008f5c:	b8ff7516 	blt	r23,r3,8008d34 <__alt_data_end+0xfc008d34>
 8008f60:	b0800317 	ldw	r2,12(r22)
 8008f64:	b0c00217 	ldw	r3,8(r22)
 8008f68:	81bfff04 	addi	r6,r16,-4
 8008f6c:	01000904 	movi	r4,36
 8008f70:	18800315 	stw	r2,12(r3)
 8008f74:	10c00215 	stw	r3,8(r2)
 8008f78:	b4800204 	addi	r18,r22,8
 8008f7c:	21bfe52e 	bgeu	r4,r6,8008f14 <__alt_data_end+0xfc008f14>
 8008f80:	a80b883a 	mov	r5,r21
 8008f84:	9009883a 	mov	r4,r18
 8008f88:	8008a040 	call	8008a04 <memmove>
 8008f8c:	b821883a 	mov	r16,r23
 8008f90:	b027883a 	mov	r19,r22
 8008f94:	003f8a06 	br	8008dc0 <__alt_data_end+0xfc008dc0>
 8008f98:	300b883a 	mov	r5,r6
 8008f9c:	dfc00917 	ldw	ra,36(sp)
 8008fa0:	df000817 	ldw	fp,32(sp)
 8008fa4:	ddc00717 	ldw	r23,28(sp)
 8008fa8:	dd800617 	ldw	r22,24(sp)
 8008fac:	dd400517 	ldw	r21,20(sp)
 8008fb0:	dd000417 	ldw	r20,16(sp)
 8008fb4:	dcc00317 	ldw	r19,12(sp)
 8008fb8:	dc800217 	ldw	r18,8(sp)
 8008fbc:	dc400117 	ldw	r17,4(sp)
 8008fc0:	dc000017 	ldw	r16,0(sp)
 8008fc4:	dec00a04 	addi	sp,sp,40
 8008fc8:	80052f01 	jmpi	80052f0 <_malloc_r>
 8008fcc:	a8c00017 	ldw	r3,0(r21)
 8008fd0:	90c00015 	stw	r3,0(r18)
 8008fd4:	a8c00117 	ldw	r3,4(r21)
 8008fd8:	90c00115 	stw	r3,4(r18)
 8008fdc:	00c006c4 	movi	r3,27
 8008fe0:	19804536 	bltu	r3,r6,80090f8 <_realloc_r+0x470>
 8008fe4:	90800204 	addi	r2,r18,8
 8008fe8:	a8c00204 	addi	r3,r21,8
 8008fec:	003f6306 	br	8008d7c <__alt_data_end+0xfc008d7c>
 8008ff0:	9005883a 	mov	r2,r18
 8008ff4:	a8c00017 	ldw	r3,0(r21)
 8008ff8:	b821883a 	mov	r16,r23
 8008ffc:	b027883a 	mov	r19,r22
 8009000:	10c00015 	stw	r3,0(r2)
 8009004:	a8c00117 	ldw	r3,4(r21)
 8009008:	10c00115 	stw	r3,4(r2)
 800900c:	a8c00217 	ldw	r3,8(r21)
 8009010:	10c00215 	stw	r3,8(r2)
 8009014:	003f6a06 	br	8008dc0 <__alt_data_end+0xfc008dc0>
 8009018:	9c67883a 	add	r19,r19,r17
 800901c:	4445c83a 	sub	r2,r8,r17
 8009020:	e4c00215 	stw	r19,8(fp)
 8009024:	10800054 	ori	r2,r2,1
 8009028:	98800115 	stw	r2,4(r19)
 800902c:	a8bfff17 	ldw	r2,-4(r21)
 8009030:	a009883a 	mov	r4,r20
 8009034:	1080004c 	andi	r2,r2,1
 8009038:	1462b03a 	or	r17,r2,r17
 800903c:	ac7fff15 	stw	r17,-4(r21)
 8009040:	800c8e80 	call	800c8e8 <__malloc_unlock>
 8009044:	a805883a 	mov	r2,r21
 8009048:	003f6b06 	br	8008df8 <__alt_data_end+0xfc008df8>
 800904c:	a80b883a 	mov	r5,r21
 8009050:	9009883a 	mov	r4,r18
 8009054:	8008a040 	call	8008a04 <memmove>
 8009058:	003f4e06 	br	8008d94 <__alt_data_end+0xfc008d94>
 800905c:	89000404 	addi	r4,r17,16
 8009060:	b93fbc16 	blt	r23,r4,8008f54 <__alt_data_end+0xfc008f54>
 8009064:	b0800317 	ldw	r2,12(r22)
 8009068:	b0c00217 	ldw	r3,8(r22)
 800906c:	81bfff04 	addi	r6,r16,-4
 8009070:	01000904 	movi	r4,36
 8009074:	18800315 	stw	r2,12(r3)
 8009078:	10c00215 	stw	r3,8(r2)
 800907c:	b4800204 	addi	r18,r22,8
 8009080:	21804336 	bltu	r4,r6,8009190 <_realloc_r+0x508>
 8009084:	008004c4 	movi	r2,19
 8009088:	11803f2e 	bgeu	r2,r6,8009188 <_realloc_r+0x500>
 800908c:	a8800017 	ldw	r2,0(r21)
 8009090:	b0800215 	stw	r2,8(r22)
 8009094:	a8800117 	ldw	r2,4(r21)
 8009098:	b0800315 	stw	r2,12(r22)
 800909c:	008006c4 	movi	r2,27
 80090a0:	11803f36 	bltu	r2,r6,80091a0 <_realloc_r+0x518>
 80090a4:	b0800404 	addi	r2,r22,16
 80090a8:	ad400204 	addi	r21,r21,8
 80090ac:	a8c00017 	ldw	r3,0(r21)
 80090b0:	10c00015 	stw	r3,0(r2)
 80090b4:	a8c00117 	ldw	r3,4(r21)
 80090b8:	10c00115 	stw	r3,4(r2)
 80090bc:	a8c00217 	ldw	r3,8(r21)
 80090c0:	10c00215 	stw	r3,8(r2)
 80090c4:	b447883a 	add	r3,r22,r17
 80090c8:	bc45c83a 	sub	r2,r23,r17
 80090cc:	e0c00215 	stw	r3,8(fp)
 80090d0:	10800054 	ori	r2,r2,1
 80090d4:	18800115 	stw	r2,4(r3)
 80090d8:	b0800117 	ldw	r2,4(r22)
 80090dc:	a009883a 	mov	r4,r20
 80090e0:	1080004c 	andi	r2,r2,1
 80090e4:	1462b03a 	or	r17,r2,r17
 80090e8:	b4400115 	stw	r17,4(r22)
 80090ec:	800c8e80 	call	800c8e8 <__malloc_unlock>
 80090f0:	9005883a 	mov	r2,r18
 80090f4:	003f4006 	br	8008df8 <__alt_data_end+0xfc008df8>
 80090f8:	a8c00217 	ldw	r3,8(r21)
 80090fc:	90c00215 	stw	r3,8(r18)
 8009100:	a8c00317 	ldw	r3,12(r21)
 8009104:	90c00315 	stw	r3,12(r18)
 8009108:	30801126 	beq	r6,r2,8009150 <_realloc_r+0x4c8>
 800910c:	90800404 	addi	r2,r18,16
 8009110:	a8c00404 	addi	r3,r21,16
 8009114:	003f1906 	br	8008d7c <__alt_data_end+0xfc008d7c>
 8009118:	90ffff17 	ldw	r3,-4(r18)
 800911c:	00bfff04 	movi	r2,-4
 8009120:	a825883a 	mov	r18,r21
 8009124:	1884703a 	and	r2,r3,r2
 8009128:	80a1883a 	add	r16,r16,r2
 800912c:	003f2406 	br	8008dc0 <__alt_data_end+0xfc008dc0>
 8009130:	a8800217 	ldw	r2,8(r21)
 8009134:	b0800415 	stw	r2,16(r22)
 8009138:	a8800317 	ldw	r2,12(r21)
 800913c:	b0800515 	stw	r2,20(r22)
 8009140:	31000a26 	beq	r6,r4,800916c <_realloc_r+0x4e4>
 8009144:	b0800604 	addi	r2,r22,24
 8009148:	ad400404 	addi	r21,r21,16
 800914c:	003fa906 	br	8008ff4 <__alt_data_end+0xfc008ff4>
 8009150:	a9000417 	ldw	r4,16(r21)
 8009154:	90800604 	addi	r2,r18,24
 8009158:	a8c00604 	addi	r3,r21,24
 800915c:	91000415 	stw	r4,16(r18)
 8009160:	a9000517 	ldw	r4,20(r21)
 8009164:	91000515 	stw	r4,20(r18)
 8009168:	003f0406 	br	8008d7c <__alt_data_end+0xfc008d7c>
 800916c:	a8c00417 	ldw	r3,16(r21)
 8009170:	ad400604 	addi	r21,r21,24
 8009174:	b0800804 	addi	r2,r22,32
 8009178:	b0c00615 	stw	r3,24(r22)
 800917c:	a8ffff17 	ldw	r3,-4(r21)
 8009180:	b0c00715 	stw	r3,28(r22)
 8009184:	003f9b06 	br	8008ff4 <__alt_data_end+0xfc008ff4>
 8009188:	9005883a 	mov	r2,r18
 800918c:	003fc706 	br	80090ac <__alt_data_end+0xfc0090ac>
 8009190:	a80b883a 	mov	r5,r21
 8009194:	9009883a 	mov	r4,r18
 8009198:	8008a040 	call	8008a04 <memmove>
 800919c:	003fc906 	br	80090c4 <__alt_data_end+0xfc0090c4>
 80091a0:	a8800217 	ldw	r2,8(r21)
 80091a4:	b0800415 	stw	r2,16(r22)
 80091a8:	a8800317 	ldw	r2,12(r21)
 80091ac:	b0800515 	stw	r2,20(r22)
 80091b0:	31000726 	beq	r6,r4,80091d0 <_realloc_r+0x548>
 80091b4:	b0800604 	addi	r2,r22,24
 80091b8:	ad400404 	addi	r21,r21,16
 80091bc:	003fbb06 	br	80090ac <__alt_data_end+0xfc0090ac>
 80091c0:	a009883a 	mov	r4,r20
 80091c4:	800c8e80 	call	800c8e8 <__malloc_unlock>
 80091c8:	0005883a 	mov	r2,zero
 80091cc:	003f0a06 	br	8008df8 <__alt_data_end+0xfc008df8>
 80091d0:	a8c00417 	ldw	r3,16(r21)
 80091d4:	ad400604 	addi	r21,r21,24
 80091d8:	b0800804 	addi	r2,r22,32
 80091dc:	b0c00615 	stw	r3,24(r22)
 80091e0:	a8ffff17 	ldw	r3,-4(r21)
 80091e4:	b0c00715 	stw	r3,28(r22)
 80091e8:	003fb006 	br	80090ac <__alt_data_end+0xfc0090ac>

080091ec <__muldi3>:
 80091ec:	defff604 	addi	sp,sp,-40
 80091f0:	dd800615 	stw	r22,24(sp)
 80091f4:	dd400515 	stw	r21,20(sp)
 80091f8:	dc400115 	stw	r17,4(sp)
 80091fc:	357fffcc 	andi	r21,r6,65535
 8009200:	2022d43a 	srli	r17,r4,16
 8009204:	25bfffcc 	andi	r22,r4,65535
 8009208:	dcc00315 	stw	r19,12(sp)
 800920c:	dc800215 	stw	r18,8(sp)
 8009210:	2027883a 	mov	r19,r4
 8009214:	2825883a 	mov	r18,r5
 8009218:	b009883a 	mov	r4,r22
 800921c:	a80b883a 	mov	r5,r21
 8009220:	dfc00915 	stw	ra,36(sp)
 8009224:	df000815 	stw	fp,32(sp)
 8009228:	ddc00715 	stw	r23,28(sp)
 800922c:	3839883a 	mov	fp,r7
 8009230:	302ed43a 	srli	r23,r6,16
 8009234:	dd000415 	stw	r20,16(sp)
 8009238:	dc000015 	stw	r16,0(sp)
 800923c:	3029883a 	mov	r20,r6
 8009240:	80014a80 	call	80014a8 <__mulsi3>
 8009244:	a80b883a 	mov	r5,r21
 8009248:	8809883a 	mov	r4,r17
 800924c:	1021883a 	mov	r16,r2
 8009250:	80014a80 	call	80014a8 <__mulsi3>
 8009254:	8809883a 	mov	r4,r17
 8009258:	b80b883a 	mov	r5,r23
 800925c:	102b883a 	mov	r21,r2
 8009260:	80014a80 	call	80014a8 <__mulsi3>
 8009264:	b80b883a 	mov	r5,r23
 8009268:	b009883a 	mov	r4,r22
 800926c:	1023883a 	mov	r17,r2
 8009270:	80014a80 	call	80014a8 <__mulsi3>
 8009274:	8006d43a 	srli	r3,r16,16
 8009278:	1545883a 	add	r2,r2,r21
 800927c:	1885883a 	add	r2,r3,r2
 8009280:	1540022e 	bgeu	r2,r21,800928c <__muldi3+0xa0>
 8009284:	00c00074 	movhi	r3,1
 8009288:	88e3883a 	add	r17,r17,r3
 800928c:	1006d43a 	srli	r3,r2,16
 8009290:	1004943a 	slli	r2,r2,16
 8009294:	e00b883a 	mov	r5,fp
 8009298:	9809883a 	mov	r4,r19
 800929c:	843fffcc 	andi	r16,r16,65535
 80092a0:	1c63883a 	add	r17,r3,r17
 80092a4:	1421883a 	add	r16,r2,r16
 80092a8:	80014a80 	call	80014a8 <__mulsi3>
 80092ac:	900b883a 	mov	r5,r18
 80092b0:	a009883a 	mov	r4,r20
 80092b4:	1027883a 	mov	r19,r2
 80092b8:	80014a80 	call	80014a8 <__mulsi3>
 80092bc:	9885883a 	add	r2,r19,r2
 80092c0:	1447883a 	add	r3,r2,r17
 80092c4:	8005883a 	mov	r2,r16
 80092c8:	dfc00917 	ldw	ra,36(sp)
 80092cc:	df000817 	ldw	fp,32(sp)
 80092d0:	ddc00717 	ldw	r23,28(sp)
 80092d4:	dd800617 	ldw	r22,24(sp)
 80092d8:	dd400517 	ldw	r21,20(sp)
 80092dc:	dd000417 	ldw	r20,16(sp)
 80092e0:	dcc00317 	ldw	r19,12(sp)
 80092e4:	dc800217 	ldw	r18,8(sp)
 80092e8:	dc400117 	ldw	r17,4(sp)
 80092ec:	dc000017 	ldw	r16,0(sp)
 80092f0:	dec00a04 	addi	sp,sp,40
 80092f4:	f800283a 	ret

080092f8 <__udivdi3>:
 80092f8:	defff404 	addi	sp,sp,-48
 80092fc:	dcc00515 	stw	r19,20(sp)
 8009300:	dc000215 	stw	r16,8(sp)
 8009304:	dfc00b15 	stw	ra,44(sp)
 8009308:	df000a15 	stw	fp,40(sp)
 800930c:	ddc00915 	stw	r23,36(sp)
 8009310:	dd800815 	stw	r22,32(sp)
 8009314:	dd400715 	stw	r21,28(sp)
 8009318:	dd000615 	stw	r20,24(sp)
 800931c:	dc800415 	stw	r18,16(sp)
 8009320:	dc400315 	stw	r17,12(sp)
 8009324:	2027883a 	mov	r19,r4
 8009328:	2821883a 	mov	r16,r5
 800932c:	3800461e 	bne	r7,zero,8009448 <__udivdi3+0x150>
 8009330:	3023883a 	mov	r17,r6
 8009334:	2025883a 	mov	r18,r4
 8009338:	2980572e 	bgeu	r5,r6,8009498 <__udivdi3+0x1a0>
 800933c:	00bfffd4 	movui	r2,65535
 8009340:	282d883a 	mov	r22,r5
 8009344:	1180b236 	bltu	r2,r6,8009610 <__udivdi3+0x318>
 8009348:	00803fc4 	movi	r2,255
 800934c:	1185803a 	cmpltu	r2,r2,r6
 8009350:	100490fa 	slli	r2,r2,3
 8009354:	3086d83a 	srl	r3,r6,r2
 8009358:	01020074 	movhi	r4,2049
 800935c:	213b6604 	addi	r4,r4,-4712
 8009360:	20c7883a 	add	r3,r4,r3
 8009364:	18c00003 	ldbu	r3,0(r3)
 8009368:	1885883a 	add	r2,r3,r2
 800936c:	00c00804 	movi	r3,32
 8009370:	1887c83a 	sub	r3,r3,r2
 8009374:	18000526 	beq	r3,zero,800938c <__udivdi3+0x94>
 8009378:	80e0983a 	sll	r16,r16,r3
 800937c:	9884d83a 	srl	r2,r19,r2
 8009380:	30e2983a 	sll	r17,r6,r3
 8009384:	98e4983a 	sll	r18,r19,r3
 8009388:	142cb03a 	or	r22,r2,r16
 800938c:	882ad43a 	srli	r21,r17,16
 8009390:	b009883a 	mov	r4,r22
 8009394:	8d3fffcc 	andi	r20,r17,65535
 8009398:	a80b883a 	mov	r5,r21
 800939c:	80014500 	call	8001450 <__umodsi3>
 80093a0:	b009883a 	mov	r4,r22
 80093a4:	a80b883a 	mov	r5,r21
 80093a8:	1027883a 	mov	r19,r2
 80093ac:	80013ec0 	call	80013ec <__udivsi3>
 80093b0:	100b883a 	mov	r5,r2
 80093b4:	a009883a 	mov	r4,r20
 80093b8:	102d883a 	mov	r22,r2
 80093bc:	80014a80 	call	80014a8 <__mulsi3>
 80093c0:	9826943a 	slli	r19,r19,16
 80093c4:	9006d43a 	srli	r3,r18,16
 80093c8:	1cc6b03a 	or	r3,r3,r19
 80093cc:	1880052e 	bgeu	r3,r2,80093e4 <__udivdi3+0xec>
 80093d0:	1c47883a 	add	r3,r3,r17
 80093d4:	b13fffc4 	addi	r4,r22,-1
 80093d8:	1c400136 	bltu	r3,r17,80093e0 <__udivdi3+0xe8>
 80093dc:	18814236 	bltu	r3,r2,80098e8 <__udivdi3+0x5f0>
 80093e0:	202d883a 	mov	r22,r4
 80093e4:	18a1c83a 	sub	r16,r3,r2
 80093e8:	8009883a 	mov	r4,r16
 80093ec:	a80b883a 	mov	r5,r21
 80093f0:	80014500 	call	8001450 <__umodsi3>
 80093f4:	1027883a 	mov	r19,r2
 80093f8:	8009883a 	mov	r4,r16
 80093fc:	a80b883a 	mov	r5,r21
 8009400:	9826943a 	slli	r19,r19,16
 8009404:	80013ec0 	call	80013ec <__udivsi3>
 8009408:	100b883a 	mov	r5,r2
 800940c:	a009883a 	mov	r4,r20
 8009410:	94bfffcc 	andi	r18,r18,65535
 8009414:	1021883a 	mov	r16,r2
 8009418:	94e4b03a 	or	r18,r18,r19
 800941c:	80014a80 	call	80014a8 <__mulsi3>
 8009420:	9080052e 	bgeu	r18,r2,8009438 <__udivdi3+0x140>
 8009424:	8ca5883a 	add	r18,r17,r18
 8009428:	80ffffc4 	addi	r3,r16,-1
 800942c:	94410c36 	bltu	r18,r17,8009860 <__udivdi3+0x568>
 8009430:	90810b2e 	bgeu	r18,r2,8009860 <__udivdi3+0x568>
 8009434:	843fff84 	addi	r16,r16,-2
 8009438:	b004943a 	slli	r2,r22,16
 800943c:	0007883a 	mov	r3,zero
 8009440:	1404b03a 	or	r2,r2,r16
 8009444:	00005e06 	br	80095c0 <__udivdi3+0x2c8>
 8009448:	29c05b36 	bltu	r5,r7,80095b8 <__udivdi3+0x2c0>
 800944c:	00bfffd4 	movui	r2,65535
 8009450:	11c0672e 	bgeu	r2,r7,80095f0 <__udivdi3+0x2f8>
 8009454:	00804034 	movhi	r2,256
 8009458:	10bfffc4 	addi	r2,r2,-1
 800945c:	11c10a36 	bltu	r2,r7,8009888 <__udivdi3+0x590>
 8009460:	00800404 	movi	r2,16
 8009464:	3886d83a 	srl	r3,r7,r2
 8009468:	01020074 	movhi	r4,2049
 800946c:	213b6604 	addi	r4,r4,-4712
 8009470:	20c7883a 	add	r3,r4,r3
 8009474:	18c00003 	ldbu	r3,0(r3)
 8009478:	05c00804 	movi	r23,32
 800947c:	1885883a 	add	r2,r3,r2
 8009480:	b8afc83a 	sub	r23,r23,r2
 8009484:	b800671e 	bne	r23,zero,8009624 <__udivdi3+0x32c>
 8009488:	3c010536 	bltu	r7,r16,80098a0 <__udivdi3+0x5a8>
 800948c:	9985403a 	cmpgeu	r2,r19,r6
 8009490:	0007883a 	mov	r3,zero
 8009494:	00004a06 	br	80095c0 <__udivdi3+0x2c8>
 8009498:	3000041e 	bne	r6,zero,80094ac <__udivdi3+0x1b4>
 800949c:	000b883a 	mov	r5,zero
 80094a0:	01000044 	movi	r4,1
 80094a4:	80013ec0 	call	80013ec <__udivsi3>
 80094a8:	1023883a 	mov	r17,r2
 80094ac:	00bfffd4 	movui	r2,65535
 80094b0:	1440532e 	bgeu	r2,r17,8009600 <__udivdi3+0x308>
 80094b4:	00804034 	movhi	r2,256
 80094b8:	10bfffc4 	addi	r2,r2,-1
 80094bc:	1440f436 	bltu	r2,r17,8009890 <__udivdi3+0x598>
 80094c0:	00800404 	movi	r2,16
 80094c4:	8886d83a 	srl	r3,r17,r2
 80094c8:	01020074 	movhi	r4,2049
 80094cc:	213b6604 	addi	r4,r4,-4712
 80094d0:	20c7883a 	add	r3,r4,r3
 80094d4:	18c00003 	ldbu	r3,0(r3)
 80094d8:	1885883a 	add	r2,r3,r2
 80094dc:	00c00804 	movi	r3,32
 80094e0:	1887c83a 	sub	r3,r3,r2
 80094e4:	1800a51e 	bne	r3,zero,800977c <__udivdi3+0x484>
 80094e8:	882ad43a 	srli	r21,r17,16
 80094ec:	8461c83a 	sub	r16,r16,r17
 80094f0:	8d3fffcc 	andi	r20,r17,65535
 80094f4:	00c00044 	movi	r3,1
 80094f8:	a80b883a 	mov	r5,r21
 80094fc:	8009883a 	mov	r4,r16
 8009500:	d8c00115 	stw	r3,4(sp)
 8009504:	80014500 	call	8001450 <__umodsi3>
 8009508:	a80b883a 	mov	r5,r21
 800950c:	8009883a 	mov	r4,r16
 8009510:	1027883a 	mov	r19,r2
 8009514:	80013ec0 	call	80013ec <__udivsi3>
 8009518:	a00b883a 	mov	r5,r20
 800951c:	1009883a 	mov	r4,r2
 8009520:	102d883a 	mov	r22,r2
 8009524:	80014a80 	call	80014a8 <__mulsi3>
 8009528:	9826943a 	slli	r19,r19,16
 800952c:	900ed43a 	srli	r7,r18,16
 8009530:	d8c00117 	ldw	r3,4(sp)
 8009534:	3cceb03a 	or	r7,r7,r19
 8009538:	3880052e 	bgeu	r7,r2,8009550 <__udivdi3+0x258>
 800953c:	3c4f883a 	add	r7,r7,r17
 8009540:	b13fffc4 	addi	r4,r22,-1
 8009544:	3c400136 	bltu	r7,r17,800954c <__udivdi3+0x254>
 8009548:	3880e436 	bltu	r7,r2,80098dc <__udivdi3+0x5e4>
 800954c:	202d883a 	mov	r22,r4
 8009550:	38a1c83a 	sub	r16,r7,r2
 8009554:	8009883a 	mov	r4,r16
 8009558:	a80b883a 	mov	r5,r21
 800955c:	d8c00115 	stw	r3,4(sp)
 8009560:	80014500 	call	8001450 <__umodsi3>
 8009564:	1027883a 	mov	r19,r2
 8009568:	8009883a 	mov	r4,r16
 800956c:	a80b883a 	mov	r5,r21
 8009570:	9826943a 	slli	r19,r19,16
 8009574:	80013ec0 	call	80013ec <__udivsi3>
 8009578:	a00b883a 	mov	r5,r20
 800957c:	1009883a 	mov	r4,r2
 8009580:	94bfffcc 	andi	r18,r18,65535
 8009584:	1021883a 	mov	r16,r2
 8009588:	94e4b03a 	or	r18,r18,r19
 800958c:	80014a80 	call	80014a8 <__mulsi3>
 8009590:	d8c00117 	ldw	r3,4(sp)
 8009594:	9080052e 	bgeu	r18,r2,80095ac <__udivdi3+0x2b4>
 8009598:	8ca5883a 	add	r18,r17,r18
 800959c:	813fffc4 	addi	r4,r16,-1
 80095a0:	9440ad36 	bltu	r18,r17,8009858 <__udivdi3+0x560>
 80095a4:	9080ac2e 	bgeu	r18,r2,8009858 <__udivdi3+0x560>
 80095a8:	843fff84 	addi	r16,r16,-2
 80095ac:	b004943a 	slli	r2,r22,16
 80095b0:	1404b03a 	or	r2,r2,r16
 80095b4:	00000206 	br	80095c0 <__udivdi3+0x2c8>
 80095b8:	0007883a 	mov	r3,zero
 80095bc:	0005883a 	mov	r2,zero
 80095c0:	dfc00b17 	ldw	ra,44(sp)
 80095c4:	df000a17 	ldw	fp,40(sp)
 80095c8:	ddc00917 	ldw	r23,36(sp)
 80095cc:	dd800817 	ldw	r22,32(sp)
 80095d0:	dd400717 	ldw	r21,28(sp)
 80095d4:	dd000617 	ldw	r20,24(sp)
 80095d8:	dcc00517 	ldw	r19,20(sp)
 80095dc:	dc800417 	ldw	r18,16(sp)
 80095e0:	dc400317 	ldw	r17,12(sp)
 80095e4:	dc000217 	ldw	r16,8(sp)
 80095e8:	dec00c04 	addi	sp,sp,48
 80095ec:	f800283a 	ret
 80095f0:	00803fc4 	movi	r2,255
 80095f4:	11c5803a 	cmpltu	r2,r2,r7
 80095f8:	100490fa 	slli	r2,r2,3
 80095fc:	003f9906 	br	8009464 <__alt_data_end+0xfc009464>
 8009600:	00803fc4 	movi	r2,255
 8009604:	1445803a 	cmpltu	r2,r2,r17
 8009608:	100490fa 	slli	r2,r2,3
 800960c:	003fad06 	br	80094c4 <__alt_data_end+0xfc0094c4>
 8009610:	00804034 	movhi	r2,256
 8009614:	10bfffc4 	addi	r2,r2,-1
 8009618:	11809f36 	bltu	r2,r6,8009898 <__udivdi3+0x5a0>
 800961c:	00800404 	movi	r2,16
 8009620:	003f4c06 	br	8009354 <__alt_data_end+0xfc009354>
 8009624:	3dce983a 	sll	r7,r7,r23
 8009628:	30b8d83a 	srl	fp,r6,r2
 800962c:	80a2d83a 	srl	r17,r16,r2
 8009630:	35cc983a 	sll	r6,r6,r23
 8009634:	3f38b03a 	or	fp,r7,fp
 8009638:	e024d43a 	srli	r18,fp,16
 800963c:	9884d83a 	srl	r2,r19,r2
 8009640:	85e0983a 	sll	r16,r16,r23
 8009644:	8809883a 	mov	r4,r17
 8009648:	900b883a 	mov	r5,r18
 800964c:	d9800015 	stw	r6,0(sp)
 8009650:	1420b03a 	or	r16,r2,r16
 8009654:	80014500 	call	8001450 <__umodsi3>
 8009658:	900b883a 	mov	r5,r18
 800965c:	8809883a 	mov	r4,r17
 8009660:	1029883a 	mov	r20,r2
 8009664:	e5bfffcc 	andi	r22,fp,65535
 8009668:	80013ec0 	call	80013ec <__udivsi3>
 800966c:	100b883a 	mov	r5,r2
 8009670:	b009883a 	mov	r4,r22
 8009674:	102b883a 	mov	r21,r2
 8009678:	80014a80 	call	80014a8 <__mulsi3>
 800967c:	a028943a 	slli	r20,r20,16
 8009680:	8006d43a 	srli	r3,r16,16
 8009684:	1d06b03a 	or	r3,r3,r20
 8009688:	1880042e 	bgeu	r3,r2,800969c <__udivdi3+0x3a4>
 800968c:	1f07883a 	add	r3,r3,fp
 8009690:	a93fffc4 	addi	r4,r21,-1
 8009694:	1f00892e 	bgeu	r3,fp,80098bc <__udivdi3+0x5c4>
 8009698:	202b883a 	mov	r21,r4
 800969c:	18a3c83a 	sub	r17,r3,r2
 80096a0:	8809883a 	mov	r4,r17
 80096a4:	900b883a 	mov	r5,r18
 80096a8:	80014500 	call	8001450 <__umodsi3>
 80096ac:	1029883a 	mov	r20,r2
 80096b0:	8809883a 	mov	r4,r17
 80096b4:	900b883a 	mov	r5,r18
 80096b8:	a028943a 	slli	r20,r20,16
 80096bc:	80013ec0 	call	80013ec <__udivsi3>
 80096c0:	100b883a 	mov	r5,r2
 80096c4:	b009883a 	mov	r4,r22
 80096c8:	843fffcc 	andi	r16,r16,65535
 80096cc:	1023883a 	mov	r17,r2
 80096d0:	8520b03a 	or	r16,r16,r20
 80096d4:	80014a80 	call	80014a8 <__mulsi3>
 80096d8:	8080042e 	bgeu	r16,r2,80096ec <__udivdi3+0x3f4>
 80096dc:	8721883a 	add	r16,r16,fp
 80096e0:	88ffffc4 	addi	r3,r17,-1
 80096e4:	8700712e 	bgeu	r16,fp,80098ac <__udivdi3+0x5b4>
 80096e8:	1823883a 	mov	r17,r3
 80096ec:	a80e943a 	slli	r7,r21,16
 80096f0:	d8c00017 	ldw	r3,0(sp)
 80096f4:	80a1c83a 	sub	r16,r16,r2
 80096f8:	3c64b03a 	or	r18,r7,r17
 80096fc:	1d3fffcc 	andi	r20,r3,65535
 8009700:	9022d43a 	srli	r17,r18,16
 8009704:	95bfffcc 	andi	r22,r18,65535
 8009708:	a00b883a 	mov	r5,r20
 800970c:	b009883a 	mov	r4,r22
 8009710:	182ad43a 	srli	r21,r3,16
 8009714:	80014a80 	call	80014a8 <__mulsi3>
 8009718:	a00b883a 	mov	r5,r20
 800971c:	8809883a 	mov	r4,r17
 8009720:	1039883a 	mov	fp,r2
 8009724:	80014a80 	call	80014a8 <__mulsi3>
 8009728:	8809883a 	mov	r4,r17
 800972c:	a80b883a 	mov	r5,r21
 8009730:	1029883a 	mov	r20,r2
 8009734:	80014a80 	call	80014a8 <__mulsi3>
 8009738:	a80b883a 	mov	r5,r21
 800973c:	b009883a 	mov	r4,r22
 8009740:	1023883a 	mov	r17,r2
 8009744:	80014a80 	call	80014a8 <__mulsi3>
 8009748:	e006d43a 	srli	r3,fp,16
 800974c:	1505883a 	add	r2,r2,r20
 8009750:	1887883a 	add	r3,r3,r2
 8009754:	1d00022e 	bgeu	r3,r20,8009760 <__udivdi3+0x468>
 8009758:	00800074 	movhi	r2,1
 800975c:	88a3883a 	add	r17,r17,r2
 8009760:	1804d43a 	srli	r2,r3,16
 8009764:	1463883a 	add	r17,r2,r17
 8009768:	84404436 	bltu	r16,r17,800987c <__udivdi3+0x584>
 800976c:	84403e26 	beq	r16,r17,8009868 <__udivdi3+0x570>
 8009770:	9005883a 	mov	r2,r18
 8009774:	0007883a 	mov	r3,zero
 8009778:	003f9106 	br	80095c0 <__alt_data_end+0xfc0095c0>
 800977c:	88e2983a 	sll	r17,r17,r3
 8009780:	80aed83a 	srl	r23,r16,r2
 8009784:	80e0983a 	sll	r16,r16,r3
 8009788:	882ad43a 	srli	r21,r17,16
 800978c:	9884d83a 	srl	r2,r19,r2
 8009790:	b809883a 	mov	r4,r23
 8009794:	a80b883a 	mov	r5,r21
 8009798:	98e4983a 	sll	r18,r19,r3
 800979c:	142cb03a 	or	r22,r2,r16
 80097a0:	80014500 	call	8001450 <__umodsi3>
 80097a4:	b809883a 	mov	r4,r23
 80097a8:	a80b883a 	mov	r5,r21
 80097ac:	1027883a 	mov	r19,r2
 80097b0:	8d3fffcc 	andi	r20,r17,65535
 80097b4:	80013ec0 	call	80013ec <__udivsi3>
 80097b8:	a009883a 	mov	r4,r20
 80097bc:	100b883a 	mov	r5,r2
 80097c0:	102f883a 	mov	r23,r2
 80097c4:	80014a80 	call	80014a8 <__mulsi3>
 80097c8:	9826943a 	slli	r19,r19,16
 80097cc:	b008d43a 	srli	r4,r22,16
 80097d0:	24c8b03a 	or	r4,r4,r19
 80097d4:	2080062e 	bgeu	r4,r2,80097f0 <__udivdi3+0x4f8>
 80097d8:	2449883a 	add	r4,r4,r17
 80097dc:	b8ffffc4 	addi	r3,r23,-1
 80097e0:	24403c36 	bltu	r4,r17,80098d4 <__udivdi3+0x5dc>
 80097e4:	20803b2e 	bgeu	r4,r2,80098d4 <__udivdi3+0x5dc>
 80097e8:	bdffff84 	addi	r23,r23,-2
 80097ec:	2449883a 	add	r4,r4,r17
 80097f0:	20a1c83a 	sub	r16,r4,r2
 80097f4:	a80b883a 	mov	r5,r21
 80097f8:	8009883a 	mov	r4,r16
 80097fc:	80014500 	call	8001450 <__umodsi3>
 8009800:	a80b883a 	mov	r5,r21
 8009804:	8009883a 	mov	r4,r16
 8009808:	1027883a 	mov	r19,r2
 800980c:	80013ec0 	call	80013ec <__udivsi3>
 8009810:	a009883a 	mov	r4,r20
 8009814:	100b883a 	mov	r5,r2
 8009818:	9826943a 	slli	r19,r19,16
 800981c:	1039883a 	mov	fp,r2
 8009820:	80014a80 	call	80014a8 <__mulsi3>
 8009824:	b13fffcc 	andi	r4,r22,65535
 8009828:	24c8b03a 	or	r4,r4,r19
 800982c:	2080062e 	bgeu	r4,r2,8009848 <__udivdi3+0x550>
 8009830:	2449883a 	add	r4,r4,r17
 8009834:	e0ffffc4 	addi	r3,fp,-1
 8009838:	24402436 	bltu	r4,r17,80098cc <__udivdi3+0x5d4>
 800983c:	2080232e 	bgeu	r4,r2,80098cc <__udivdi3+0x5d4>
 8009840:	e73fff84 	addi	fp,fp,-2
 8009844:	2449883a 	add	r4,r4,r17
 8009848:	b82e943a 	slli	r23,r23,16
 800984c:	20a1c83a 	sub	r16,r4,r2
 8009850:	bf06b03a 	or	r3,r23,fp
 8009854:	003f2806 	br	80094f8 <__alt_data_end+0xfc0094f8>
 8009858:	2021883a 	mov	r16,r4
 800985c:	003f5306 	br	80095ac <__alt_data_end+0xfc0095ac>
 8009860:	1821883a 	mov	r16,r3
 8009864:	003ef406 	br	8009438 <__alt_data_end+0xfc009438>
 8009868:	1806943a 	slli	r3,r3,16
 800986c:	9de6983a 	sll	r19,r19,r23
 8009870:	e73fffcc 	andi	fp,fp,65535
 8009874:	1f07883a 	add	r3,r3,fp
 8009878:	98ffbd2e 	bgeu	r19,r3,8009770 <__alt_data_end+0xfc009770>
 800987c:	90bfffc4 	addi	r2,r18,-1
 8009880:	0007883a 	mov	r3,zero
 8009884:	003f4e06 	br	80095c0 <__alt_data_end+0xfc0095c0>
 8009888:	00800604 	movi	r2,24
 800988c:	003ef506 	br	8009464 <__alt_data_end+0xfc009464>
 8009890:	00800604 	movi	r2,24
 8009894:	003f0b06 	br	80094c4 <__alt_data_end+0xfc0094c4>
 8009898:	00800604 	movi	r2,24
 800989c:	003ead06 	br	8009354 <__alt_data_end+0xfc009354>
 80098a0:	0007883a 	mov	r3,zero
 80098a4:	00800044 	movi	r2,1
 80098a8:	003f4506 	br	80095c0 <__alt_data_end+0xfc0095c0>
 80098ac:	80bf8e2e 	bgeu	r16,r2,80096e8 <__alt_data_end+0xfc0096e8>
 80098b0:	8c7fff84 	addi	r17,r17,-2
 80098b4:	8721883a 	add	r16,r16,fp
 80098b8:	003f8c06 	br	80096ec <__alt_data_end+0xfc0096ec>
 80098bc:	18bf762e 	bgeu	r3,r2,8009698 <__alt_data_end+0xfc009698>
 80098c0:	ad7fff84 	addi	r21,r21,-2
 80098c4:	1f07883a 	add	r3,r3,fp
 80098c8:	003f7406 	br	800969c <__alt_data_end+0xfc00969c>
 80098cc:	1839883a 	mov	fp,r3
 80098d0:	003fdd06 	br	8009848 <__alt_data_end+0xfc009848>
 80098d4:	182f883a 	mov	r23,r3
 80098d8:	003fc506 	br	80097f0 <__alt_data_end+0xfc0097f0>
 80098dc:	b5bfff84 	addi	r22,r22,-2
 80098e0:	3c4f883a 	add	r7,r7,r17
 80098e4:	003f1a06 	br	8009550 <__alt_data_end+0xfc009550>
 80098e8:	b5bfff84 	addi	r22,r22,-2
 80098ec:	1c47883a 	add	r3,r3,r17
 80098f0:	003ebc06 	br	80093e4 <__alt_data_end+0xfc0093e4>

080098f4 <__umoddi3>:
 80098f4:	defff304 	addi	sp,sp,-52
 80098f8:	df000b15 	stw	fp,44(sp)
 80098fc:	dc400415 	stw	r17,16(sp)
 8009900:	dc000315 	stw	r16,12(sp)
 8009904:	dfc00c15 	stw	ra,48(sp)
 8009908:	ddc00a15 	stw	r23,40(sp)
 800990c:	dd800915 	stw	r22,36(sp)
 8009910:	dd400815 	stw	r21,32(sp)
 8009914:	dd000715 	stw	r20,28(sp)
 8009918:	dcc00615 	stw	r19,24(sp)
 800991c:	dc800515 	stw	r18,20(sp)
 8009920:	2021883a 	mov	r16,r4
 8009924:	2823883a 	mov	r17,r5
 8009928:	2839883a 	mov	fp,r5
 800992c:	3800401e 	bne	r7,zero,8009a30 <__umoddi3+0x13c>
 8009930:	3027883a 	mov	r19,r6
 8009934:	2029883a 	mov	r20,r4
 8009938:	2980552e 	bgeu	r5,r6,8009a90 <__umoddi3+0x19c>
 800993c:	00bfffd4 	movui	r2,65535
 8009940:	1180a236 	bltu	r2,r6,8009bcc <__umoddi3+0x2d8>
 8009944:	01003fc4 	movi	r4,255
 8009948:	2189803a 	cmpltu	r4,r4,r6
 800994c:	200890fa 	slli	r4,r4,3
 8009950:	3104d83a 	srl	r2,r6,r4
 8009954:	00c20074 	movhi	r3,2049
 8009958:	18fb6604 	addi	r3,r3,-4712
 800995c:	1885883a 	add	r2,r3,r2
 8009960:	10c00003 	ldbu	r3,0(r2)
 8009964:	00800804 	movi	r2,32
 8009968:	1909883a 	add	r4,r3,r4
 800996c:	1125c83a 	sub	r18,r2,r4
 8009970:	90000526 	beq	r18,zero,8009988 <__umoddi3+0x94>
 8009974:	8ca2983a 	sll	r17,r17,r18
 8009978:	8108d83a 	srl	r4,r16,r4
 800997c:	34a6983a 	sll	r19,r6,r18
 8009980:	84a8983a 	sll	r20,r16,r18
 8009984:	2478b03a 	or	fp,r4,r17
 8009988:	982cd43a 	srli	r22,r19,16
 800998c:	e009883a 	mov	r4,fp
 8009990:	9dffffcc 	andi	r23,r19,65535
 8009994:	b00b883a 	mov	r5,r22
 8009998:	80014500 	call	8001450 <__umodsi3>
 800999c:	b00b883a 	mov	r5,r22
 80099a0:	e009883a 	mov	r4,fp
 80099a4:	102b883a 	mov	r21,r2
 80099a8:	80013ec0 	call	80013ec <__udivsi3>
 80099ac:	100b883a 	mov	r5,r2
 80099b0:	b809883a 	mov	r4,r23
 80099b4:	80014a80 	call	80014a8 <__mulsi3>
 80099b8:	a82a943a 	slli	r21,r21,16
 80099bc:	a006d43a 	srli	r3,r20,16
 80099c0:	1d46b03a 	or	r3,r3,r21
 80099c4:	1880032e 	bgeu	r3,r2,80099d4 <__umoddi3+0xe0>
 80099c8:	1cc7883a 	add	r3,r3,r19
 80099cc:	1cc00136 	bltu	r3,r19,80099d4 <__umoddi3+0xe0>
 80099d0:	18813136 	bltu	r3,r2,8009e98 <__umoddi3+0x5a4>
 80099d4:	18a1c83a 	sub	r16,r3,r2
 80099d8:	b00b883a 	mov	r5,r22
 80099dc:	8009883a 	mov	r4,r16
 80099e0:	80014500 	call	8001450 <__umodsi3>
 80099e4:	b00b883a 	mov	r5,r22
 80099e8:	8009883a 	mov	r4,r16
 80099ec:	1023883a 	mov	r17,r2
 80099f0:	80013ec0 	call	80013ec <__udivsi3>
 80099f4:	100b883a 	mov	r5,r2
 80099f8:	b809883a 	mov	r4,r23
 80099fc:	8822943a 	slli	r17,r17,16
 8009a00:	80014a80 	call	80014a8 <__mulsi3>
 8009a04:	a0ffffcc 	andi	r3,r20,65535
 8009a08:	1c46b03a 	or	r3,r3,r17
 8009a0c:	1880042e 	bgeu	r3,r2,8009a20 <__umoddi3+0x12c>
 8009a10:	1cc7883a 	add	r3,r3,r19
 8009a14:	1cc00236 	bltu	r3,r19,8009a20 <__umoddi3+0x12c>
 8009a18:	1880012e 	bgeu	r3,r2,8009a20 <__umoddi3+0x12c>
 8009a1c:	1cc7883a 	add	r3,r3,r19
 8009a20:	1885c83a 	sub	r2,r3,r2
 8009a24:	1484d83a 	srl	r2,r2,r18
 8009a28:	0007883a 	mov	r3,zero
 8009a2c:	00005306 	br	8009b7c <__umoddi3+0x288>
 8009a30:	29c05036 	bltu	r5,r7,8009b74 <__umoddi3+0x280>
 8009a34:	00bfffd4 	movui	r2,65535
 8009a38:	11c05c2e 	bgeu	r2,r7,8009bac <__umoddi3+0x2b8>
 8009a3c:	00804034 	movhi	r2,256
 8009a40:	10bfffc4 	addi	r2,r2,-1
 8009a44:	11c10636 	bltu	r2,r7,8009e60 <__umoddi3+0x56c>
 8009a48:	01000404 	movi	r4,16
 8009a4c:	3904d83a 	srl	r2,r7,r4
 8009a50:	00c20074 	movhi	r3,2049
 8009a54:	18fb6604 	addi	r3,r3,-4712
 8009a58:	1885883a 	add	r2,r3,r2
 8009a5c:	14c00003 	ldbu	r19,0(r2)
 8009a60:	00c00804 	movi	r3,32
 8009a64:	9927883a 	add	r19,r19,r4
 8009a68:	1ce9c83a 	sub	r20,r3,r19
 8009a6c:	a0005c1e 	bne	r20,zero,8009be0 <__umoddi3+0x2ec>
 8009a70:	3c400136 	bltu	r7,r17,8009a78 <__umoddi3+0x184>
 8009a74:	81810a36 	bltu	r16,r6,8009ea0 <__umoddi3+0x5ac>
 8009a78:	8185c83a 	sub	r2,r16,r6
 8009a7c:	89e3c83a 	sub	r17,r17,r7
 8009a80:	8089803a 	cmpltu	r4,r16,r2
 8009a84:	8939c83a 	sub	fp,r17,r4
 8009a88:	e007883a 	mov	r3,fp
 8009a8c:	00003b06 	br	8009b7c <__umoddi3+0x288>
 8009a90:	3000041e 	bne	r6,zero,8009aa4 <__umoddi3+0x1b0>
 8009a94:	000b883a 	mov	r5,zero
 8009a98:	01000044 	movi	r4,1
 8009a9c:	80013ec0 	call	80013ec <__udivsi3>
 8009aa0:	1027883a 	mov	r19,r2
 8009aa4:	00bfffd4 	movui	r2,65535
 8009aa8:	14c0442e 	bgeu	r2,r19,8009bbc <__umoddi3+0x2c8>
 8009aac:	00804034 	movhi	r2,256
 8009ab0:	10bfffc4 	addi	r2,r2,-1
 8009ab4:	14c0ec36 	bltu	r2,r19,8009e68 <__umoddi3+0x574>
 8009ab8:	00800404 	movi	r2,16
 8009abc:	9886d83a 	srl	r3,r19,r2
 8009ac0:	01020074 	movhi	r4,2049
 8009ac4:	213b6604 	addi	r4,r4,-4712
 8009ac8:	20c7883a 	add	r3,r4,r3
 8009acc:	18c00003 	ldbu	r3,0(r3)
 8009ad0:	1887883a 	add	r3,r3,r2
 8009ad4:	00800804 	movi	r2,32
 8009ad8:	10e5c83a 	sub	r18,r2,r3
 8009adc:	9000ab1e 	bne	r18,zero,8009d8c <__umoddi3+0x498>
 8009ae0:	982cd43a 	srli	r22,r19,16
 8009ae4:	8ce3c83a 	sub	r17,r17,r19
 8009ae8:	9dffffcc 	andi	r23,r19,65535
 8009aec:	b00b883a 	mov	r5,r22
 8009af0:	8809883a 	mov	r4,r17
 8009af4:	80014500 	call	8001450 <__umodsi3>
 8009af8:	b00b883a 	mov	r5,r22
 8009afc:	8809883a 	mov	r4,r17
 8009b00:	102b883a 	mov	r21,r2
 8009b04:	80013ec0 	call	80013ec <__udivsi3>
 8009b08:	b80b883a 	mov	r5,r23
 8009b0c:	1009883a 	mov	r4,r2
 8009b10:	80014a80 	call	80014a8 <__mulsi3>
 8009b14:	a82a943a 	slli	r21,r21,16
 8009b18:	a006d43a 	srli	r3,r20,16
 8009b1c:	1d46b03a 	or	r3,r3,r21
 8009b20:	1880042e 	bgeu	r3,r2,8009b34 <__umoddi3+0x240>
 8009b24:	1cc7883a 	add	r3,r3,r19
 8009b28:	1cc00236 	bltu	r3,r19,8009b34 <__umoddi3+0x240>
 8009b2c:	1880012e 	bgeu	r3,r2,8009b34 <__umoddi3+0x240>
 8009b30:	1cc7883a 	add	r3,r3,r19
 8009b34:	18a1c83a 	sub	r16,r3,r2
 8009b38:	b00b883a 	mov	r5,r22
 8009b3c:	8009883a 	mov	r4,r16
 8009b40:	80014500 	call	8001450 <__umodsi3>
 8009b44:	1023883a 	mov	r17,r2
 8009b48:	b00b883a 	mov	r5,r22
 8009b4c:	8009883a 	mov	r4,r16
 8009b50:	80013ec0 	call	80013ec <__udivsi3>
 8009b54:	8822943a 	slli	r17,r17,16
 8009b58:	b80b883a 	mov	r5,r23
 8009b5c:	1009883a 	mov	r4,r2
 8009b60:	80014a80 	call	80014a8 <__mulsi3>
 8009b64:	a53fffcc 	andi	r20,r20,65535
 8009b68:	a446b03a 	or	r3,r20,r17
 8009b6c:	18bfac2e 	bgeu	r3,r2,8009a20 <__alt_data_end+0xfc009a20>
 8009b70:	003fa706 	br	8009a10 <__alt_data_end+0xfc009a10>
 8009b74:	2005883a 	mov	r2,r4
 8009b78:	2807883a 	mov	r3,r5
 8009b7c:	dfc00c17 	ldw	ra,48(sp)
 8009b80:	df000b17 	ldw	fp,44(sp)
 8009b84:	ddc00a17 	ldw	r23,40(sp)
 8009b88:	dd800917 	ldw	r22,36(sp)
 8009b8c:	dd400817 	ldw	r21,32(sp)
 8009b90:	dd000717 	ldw	r20,28(sp)
 8009b94:	dcc00617 	ldw	r19,24(sp)
 8009b98:	dc800517 	ldw	r18,20(sp)
 8009b9c:	dc400417 	ldw	r17,16(sp)
 8009ba0:	dc000317 	ldw	r16,12(sp)
 8009ba4:	dec00d04 	addi	sp,sp,52
 8009ba8:	f800283a 	ret
 8009bac:	04c03fc4 	movi	r19,255
 8009bb0:	99c9803a 	cmpltu	r4,r19,r7
 8009bb4:	200890fa 	slli	r4,r4,3
 8009bb8:	003fa406 	br	8009a4c <__alt_data_end+0xfc009a4c>
 8009bbc:	00803fc4 	movi	r2,255
 8009bc0:	14c5803a 	cmpltu	r2,r2,r19
 8009bc4:	100490fa 	slli	r2,r2,3
 8009bc8:	003fbc06 	br	8009abc <__alt_data_end+0xfc009abc>
 8009bcc:	00804034 	movhi	r2,256
 8009bd0:	10bfffc4 	addi	r2,r2,-1
 8009bd4:	1180a636 	bltu	r2,r6,8009e70 <__umoddi3+0x57c>
 8009bd8:	01000404 	movi	r4,16
 8009bdc:	003f5c06 	br	8009950 <__alt_data_end+0xfc009950>
 8009be0:	3d0e983a 	sll	r7,r7,r20
 8009be4:	34ead83a 	srl	r21,r6,r19
 8009be8:	8cc6d83a 	srl	r3,r17,r19
 8009bec:	8d10983a 	sll	r8,r17,r20
 8009bf0:	3d6ab03a 	or	r21,r7,r21
 8009bf4:	a82cd43a 	srli	r22,r21,16
 8009bf8:	84e2d83a 	srl	r17,r16,r19
 8009bfc:	1809883a 	mov	r4,r3
 8009c00:	b00b883a 	mov	r5,r22
 8009c04:	8a22b03a 	or	r17,r17,r8
 8009c08:	3524983a 	sll	r18,r6,r20
 8009c0c:	dc400015 	stw	r17,0(sp)
 8009c10:	d8c00115 	stw	r3,4(sp)
 8009c14:	80014500 	call	8001450 <__umodsi3>
 8009c18:	d8c00117 	ldw	r3,4(sp)
 8009c1c:	b00b883a 	mov	r5,r22
 8009c20:	1039883a 	mov	fp,r2
 8009c24:	1809883a 	mov	r4,r3
 8009c28:	80013ec0 	call	80013ec <__udivsi3>
 8009c2c:	adffffcc 	andi	r23,r21,65535
 8009c30:	100b883a 	mov	r5,r2
 8009c34:	b809883a 	mov	r4,r23
 8009c38:	1023883a 	mov	r17,r2
 8009c3c:	80014a80 	call	80014a8 <__mulsi3>
 8009c40:	d9400017 	ldw	r5,0(sp)
 8009c44:	e008943a 	slli	r4,fp,16
 8009c48:	8520983a 	sll	r16,r16,r20
 8009c4c:	2806d43a 	srli	r3,r5,16
 8009c50:	1906b03a 	or	r3,r3,r4
 8009c54:	1880042e 	bgeu	r3,r2,8009c68 <__umoddi3+0x374>
 8009c58:	1d47883a 	add	r3,r3,r21
 8009c5c:	893fffc4 	addi	r4,r17,-1
 8009c60:	1d40892e 	bgeu	r3,r21,8009e88 <__umoddi3+0x594>
 8009c64:	2023883a 	mov	r17,r4
 8009c68:	18b9c83a 	sub	fp,r3,r2
 8009c6c:	b00b883a 	mov	r5,r22
 8009c70:	e009883a 	mov	r4,fp
 8009c74:	80014500 	call	8001450 <__umodsi3>
 8009c78:	b00b883a 	mov	r5,r22
 8009c7c:	e009883a 	mov	r4,fp
 8009c80:	d8800215 	stw	r2,8(sp)
 8009c84:	80013ec0 	call	80013ec <__udivsi3>
 8009c88:	100b883a 	mov	r5,r2
 8009c8c:	b809883a 	mov	r4,r23
 8009c90:	102d883a 	mov	r22,r2
 8009c94:	80014a80 	call	80014a8 <__mulsi3>
 8009c98:	d9800217 	ldw	r6,8(sp)
 8009c9c:	d8c00017 	ldw	r3,0(sp)
 8009ca0:	300c943a 	slli	r6,r6,16
 8009ca4:	1a3fffcc 	andi	r8,r3,65535
 8009ca8:	4190b03a 	or	r8,r8,r6
 8009cac:	4080042e 	bgeu	r8,r2,8009cc0 <__umoddi3+0x3cc>
 8009cb0:	4551883a 	add	r8,r8,r21
 8009cb4:	b0ffffc4 	addi	r3,r22,-1
 8009cb8:	45406f2e 	bgeu	r8,r21,8009e78 <__umoddi3+0x584>
 8009cbc:	182d883a 	mov	r22,r3
 8009cc0:	880e943a 	slli	r7,r17,16
 8009cc4:	9006d43a 	srli	r3,r18,16
 8009cc8:	91bfffcc 	andi	r6,r18,65535
 8009ccc:	3dacb03a 	or	r22,r7,r22
 8009cd0:	b02ed43a 	srli	r23,r22,16
 8009cd4:	b5bfffcc 	andi	r22,r22,65535
 8009cd8:	300b883a 	mov	r5,r6
 8009cdc:	b009883a 	mov	r4,r22
 8009ce0:	40a3c83a 	sub	r17,r8,r2
 8009ce4:	d8c00115 	stw	r3,4(sp)
 8009ce8:	d9800215 	stw	r6,8(sp)
 8009cec:	80014a80 	call	80014a8 <__mulsi3>
 8009cf0:	d9800217 	ldw	r6,8(sp)
 8009cf4:	b809883a 	mov	r4,r23
 8009cf8:	1039883a 	mov	fp,r2
 8009cfc:	300b883a 	mov	r5,r6
 8009d00:	80014a80 	call	80014a8 <__mulsi3>
 8009d04:	d8c00117 	ldw	r3,4(sp)
 8009d08:	b809883a 	mov	r4,r23
 8009d0c:	d8800215 	stw	r2,8(sp)
 8009d10:	180b883a 	mov	r5,r3
 8009d14:	80014a80 	call	80014a8 <__mulsi3>
 8009d18:	d8c00117 	ldw	r3,4(sp)
 8009d1c:	b009883a 	mov	r4,r22
 8009d20:	102f883a 	mov	r23,r2
 8009d24:	180b883a 	mov	r5,r3
 8009d28:	80014a80 	call	80014a8 <__mulsi3>
 8009d2c:	d9800217 	ldw	r6,8(sp)
 8009d30:	e006d43a 	srli	r3,fp,16
 8009d34:	1185883a 	add	r2,r2,r6
 8009d38:	1885883a 	add	r2,r3,r2
 8009d3c:	1180022e 	bgeu	r2,r6,8009d48 <__umoddi3+0x454>
 8009d40:	00c00074 	movhi	r3,1
 8009d44:	b8ef883a 	add	r23,r23,r3
 8009d48:	1006d43a 	srli	r3,r2,16
 8009d4c:	1004943a 	slli	r2,r2,16
 8009d50:	e73fffcc 	andi	fp,fp,65535
 8009d54:	1dc7883a 	add	r3,r3,r23
 8009d58:	1739883a 	add	fp,r2,fp
 8009d5c:	88c03a36 	bltu	r17,r3,8009e48 <__umoddi3+0x554>
 8009d60:	88c05126 	beq	r17,r3,8009ea8 <__umoddi3+0x5b4>
 8009d64:	88c9c83a 	sub	r4,r17,r3
 8009d68:	e00f883a 	mov	r7,fp
 8009d6c:	81cfc83a 	sub	r7,r16,r7
 8009d70:	81c7803a 	cmpltu	r3,r16,r7
 8009d74:	20c7c83a 	sub	r3,r4,r3
 8009d78:	1cc4983a 	sll	r2,r3,r19
 8009d7c:	3d0ed83a 	srl	r7,r7,r20
 8009d80:	1d06d83a 	srl	r3,r3,r20
 8009d84:	11c4b03a 	or	r2,r2,r7
 8009d88:	003f7c06 	br	8009b7c <__alt_data_end+0xfc009b7c>
 8009d8c:	9ca6983a 	sll	r19,r19,r18
 8009d90:	88f8d83a 	srl	fp,r17,r3
 8009d94:	80c4d83a 	srl	r2,r16,r3
 8009d98:	982cd43a 	srli	r22,r19,16
 8009d9c:	8ca2983a 	sll	r17,r17,r18
 8009da0:	e009883a 	mov	r4,fp
 8009da4:	b00b883a 	mov	r5,r22
 8009da8:	146ab03a 	or	r21,r2,r17
 8009dac:	80014500 	call	8001450 <__umodsi3>
 8009db0:	b00b883a 	mov	r5,r22
 8009db4:	e009883a 	mov	r4,fp
 8009db8:	1029883a 	mov	r20,r2
 8009dbc:	9dffffcc 	andi	r23,r19,65535
 8009dc0:	80013ec0 	call	80013ec <__udivsi3>
 8009dc4:	b809883a 	mov	r4,r23
 8009dc8:	100b883a 	mov	r5,r2
 8009dcc:	80014a80 	call	80014a8 <__mulsi3>
 8009dd0:	a008943a 	slli	r4,r20,16
 8009dd4:	a806d43a 	srli	r3,r21,16
 8009dd8:	84a8983a 	sll	r20,r16,r18
 8009ddc:	1906b03a 	or	r3,r3,r4
 8009de0:	1880042e 	bgeu	r3,r2,8009df4 <__umoddi3+0x500>
 8009de4:	1cc7883a 	add	r3,r3,r19
 8009de8:	1cc00236 	bltu	r3,r19,8009df4 <__umoddi3+0x500>
 8009dec:	1880012e 	bgeu	r3,r2,8009df4 <__umoddi3+0x500>
 8009df0:	1cc7883a 	add	r3,r3,r19
 8009df4:	18a3c83a 	sub	r17,r3,r2
 8009df8:	b00b883a 	mov	r5,r22
 8009dfc:	8809883a 	mov	r4,r17
 8009e00:	80014500 	call	8001450 <__umodsi3>
 8009e04:	b00b883a 	mov	r5,r22
 8009e08:	8809883a 	mov	r4,r17
 8009e0c:	1021883a 	mov	r16,r2
 8009e10:	80013ec0 	call	80013ec <__udivsi3>
 8009e14:	100b883a 	mov	r5,r2
 8009e18:	b809883a 	mov	r4,r23
 8009e1c:	8020943a 	slli	r16,r16,16
 8009e20:	80014a80 	call	80014a8 <__mulsi3>
 8009e24:	a8ffffcc 	andi	r3,r21,65535
 8009e28:	1c06b03a 	or	r3,r3,r16
 8009e2c:	1880042e 	bgeu	r3,r2,8009e40 <__umoddi3+0x54c>
 8009e30:	1cc7883a 	add	r3,r3,r19
 8009e34:	1cc00236 	bltu	r3,r19,8009e40 <__umoddi3+0x54c>
 8009e38:	1880012e 	bgeu	r3,r2,8009e40 <__umoddi3+0x54c>
 8009e3c:	1cc7883a 	add	r3,r3,r19
 8009e40:	18a3c83a 	sub	r17,r3,r2
 8009e44:	003f2906 	br	8009aec <__alt_data_end+0xfc009aec>
 8009e48:	e48fc83a 	sub	r7,fp,r18
 8009e4c:	1d49c83a 	sub	r4,r3,r21
 8009e50:	e1f9803a 	cmpltu	fp,fp,r7
 8009e54:	2739c83a 	sub	fp,r4,fp
 8009e58:	8f09c83a 	sub	r4,r17,fp
 8009e5c:	003fc306 	br	8009d6c <__alt_data_end+0xfc009d6c>
 8009e60:	01000604 	movi	r4,24
 8009e64:	003ef906 	br	8009a4c <__alt_data_end+0xfc009a4c>
 8009e68:	00800604 	movi	r2,24
 8009e6c:	003f1306 	br	8009abc <__alt_data_end+0xfc009abc>
 8009e70:	01000604 	movi	r4,24
 8009e74:	003eb606 	br	8009950 <__alt_data_end+0xfc009950>
 8009e78:	40bf902e 	bgeu	r8,r2,8009cbc <__alt_data_end+0xfc009cbc>
 8009e7c:	b5bfff84 	addi	r22,r22,-2
 8009e80:	4551883a 	add	r8,r8,r21
 8009e84:	003f8e06 	br	8009cc0 <__alt_data_end+0xfc009cc0>
 8009e88:	18bf762e 	bgeu	r3,r2,8009c64 <__alt_data_end+0xfc009c64>
 8009e8c:	8c7fff84 	addi	r17,r17,-2
 8009e90:	1d47883a 	add	r3,r3,r21
 8009e94:	003f7406 	br	8009c68 <__alt_data_end+0xfc009c68>
 8009e98:	1cc7883a 	add	r3,r3,r19
 8009e9c:	003ecd06 	br	80099d4 <__alt_data_end+0xfc0099d4>
 8009ea0:	8005883a 	mov	r2,r16
 8009ea4:	003ef806 	br	8009a88 <__alt_data_end+0xfc009a88>
 8009ea8:	873fe736 	bltu	r16,fp,8009e48 <__alt_data_end+0xfc009e48>
 8009eac:	e00f883a 	mov	r7,fp
 8009eb0:	0009883a 	mov	r4,zero
 8009eb4:	003fad06 	br	8009d6c <__alt_data_end+0xfc009d6c>

08009eb8 <__adddf3>:
 8009eb8:	02c00434 	movhi	r11,16
 8009ebc:	5affffc4 	addi	r11,r11,-1
 8009ec0:	2806d7fa 	srli	r3,r5,31
 8009ec4:	2ad4703a 	and	r10,r5,r11
 8009ec8:	3ad2703a 	and	r9,r7,r11
 8009ecc:	3804d53a 	srli	r2,r7,20
 8009ed0:	3018d77a 	srli	r12,r6,29
 8009ed4:	280ad53a 	srli	r5,r5,20
 8009ed8:	501490fa 	slli	r10,r10,3
 8009edc:	2010d77a 	srli	r8,r4,29
 8009ee0:	481290fa 	slli	r9,r9,3
 8009ee4:	380ed7fa 	srli	r7,r7,31
 8009ee8:	defffb04 	addi	sp,sp,-20
 8009eec:	dc800215 	stw	r18,8(sp)
 8009ef0:	dc400115 	stw	r17,4(sp)
 8009ef4:	dc000015 	stw	r16,0(sp)
 8009ef8:	dfc00415 	stw	ra,16(sp)
 8009efc:	dcc00315 	stw	r19,12(sp)
 8009f00:	1c803fcc 	andi	r18,r3,255
 8009f04:	2c01ffcc 	andi	r16,r5,2047
 8009f08:	5210b03a 	or	r8,r10,r8
 8009f0c:	202290fa 	slli	r17,r4,3
 8009f10:	1081ffcc 	andi	r2,r2,2047
 8009f14:	4b12b03a 	or	r9,r9,r12
 8009f18:	300c90fa 	slli	r6,r6,3
 8009f1c:	91c07526 	beq	r18,r7,800a0f4 <__adddf3+0x23c>
 8009f20:	8087c83a 	sub	r3,r16,r2
 8009f24:	00c0ab0e 	bge	zero,r3,800a1d4 <__adddf3+0x31c>
 8009f28:	10002a1e 	bne	r2,zero,8009fd4 <__adddf3+0x11c>
 8009f2c:	4984b03a 	or	r2,r9,r6
 8009f30:	1000961e 	bne	r2,zero,800a18c <__adddf3+0x2d4>
 8009f34:	888001cc 	andi	r2,r17,7
 8009f38:	10000726 	beq	r2,zero,8009f58 <__adddf3+0xa0>
 8009f3c:	888003cc 	andi	r2,r17,15
 8009f40:	00c00104 	movi	r3,4
 8009f44:	10c00426 	beq	r2,r3,8009f58 <__adddf3+0xa0>
 8009f48:	88c7883a 	add	r3,r17,r3
 8009f4c:	1c63803a 	cmpltu	r17,r3,r17
 8009f50:	4451883a 	add	r8,r8,r17
 8009f54:	1823883a 	mov	r17,r3
 8009f58:	4080202c 	andhi	r2,r8,128
 8009f5c:	10005926 	beq	r2,zero,800a0c4 <__adddf3+0x20c>
 8009f60:	84000044 	addi	r16,r16,1
 8009f64:	0081ffc4 	movi	r2,2047
 8009f68:	8080ba26 	beq	r16,r2,800a254 <__adddf3+0x39c>
 8009f6c:	00bfe034 	movhi	r2,65408
 8009f70:	10bfffc4 	addi	r2,r2,-1
 8009f74:	4090703a 	and	r8,r8,r2
 8009f78:	4004977a 	slli	r2,r8,29
 8009f7c:	4010927a 	slli	r8,r8,9
 8009f80:	8822d0fa 	srli	r17,r17,3
 8009f84:	8401ffcc 	andi	r16,r16,2047
 8009f88:	4010d33a 	srli	r8,r8,12
 8009f8c:	9007883a 	mov	r3,r18
 8009f90:	1444b03a 	or	r2,r2,r17
 8009f94:	8401ffcc 	andi	r16,r16,2047
 8009f98:	8020953a 	slli	r16,r16,20
 8009f9c:	18c03fcc 	andi	r3,r3,255
 8009fa0:	01000434 	movhi	r4,16
 8009fa4:	213fffc4 	addi	r4,r4,-1
 8009fa8:	180697fa 	slli	r3,r3,31
 8009fac:	4110703a 	and	r8,r8,r4
 8009fb0:	4410b03a 	or	r8,r8,r16
 8009fb4:	40c6b03a 	or	r3,r8,r3
 8009fb8:	dfc00417 	ldw	ra,16(sp)
 8009fbc:	dcc00317 	ldw	r19,12(sp)
 8009fc0:	dc800217 	ldw	r18,8(sp)
 8009fc4:	dc400117 	ldw	r17,4(sp)
 8009fc8:	dc000017 	ldw	r16,0(sp)
 8009fcc:	dec00504 	addi	sp,sp,20
 8009fd0:	f800283a 	ret
 8009fd4:	0081ffc4 	movi	r2,2047
 8009fd8:	80bfd626 	beq	r16,r2,8009f34 <__alt_data_end+0xfc009f34>
 8009fdc:	4a402034 	orhi	r9,r9,128
 8009fe0:	00800e04 	movi	r2,56
 8009fe4:	10c09f16 	blt	r2,r3,800a264 <__adddf3+0x3ac>
 8009fe8:	008007c4 	movi	r2,31
 8009fec:	10c0c216 	blt	r2,r3,800a2f8 <__adddf3+0x440>
 8009ff0:	00800804 	movi	r2,32
 8009ff4:	10c5c83a 	sub	r2,r2,r3
 8009ff8:	488a983a 	sll	r5,r9,r2
 8009ffc:	30c8d83a 	srl	r4,r6,r3
 800a000:	3084983a 	sll	r2,r6,r2
 800a004:	48c6d83a 	srl	r3,r9,r3
 800a008:	290cb03a 	or	r6,r5,r4
 800a00c:	1004c03a 	cmpne	r2,r2,zero
 800a010:	308cb03a 	or	r6,r6,r2
 800a014:	898dc83a 	sub	r6,r17,r6
 800a018:	89a3803a 	cmpltu	r17,r17,r6
 800a01c:	40d1c83a 	sub	r8,r8,r3
 800a020:	4451c83a 	sub	r8,r8,r17
 800a024:	3023883a 	mov	r17,r6
 800a028:	4080202c 	andhi	r2,r8,128
 800a02c:	10002326 	beq	r2,zero,800a0bc <__adddf3+0x204>
 800a030:	04c02034 	movhi	r19,128
 800a034:	9cffffc4 	addi	r19,r19,-1
 800a038:	44e6703a 	and	r19,r8,r19
 800a03c:	98007626 	beq	r19,zero,800a218 <__adddf3+0x360>
 800a040:	9809883a 	mov	r4,r19
 800a044:	800c6f80 	call	800c6f8 <__clzsi2>
 800a048:	10fffe04 	addi	r3,r2,-8
 800a04c:	010007c4 	movi	r4,31
 800a050:	20c07716 	blt	r4,r3,800a230 <__adddf3+0x378>
 800a054:	00800804 	movi	r2,32
 800a058:	10c5c83a 	sub	r2,r2,r3
 800a05c:	8884d83a 	srl	r2,r17,r2
 800a060:	98d0983a 	sll	r8,r19,r3
 800a064:	88e2983a 	sll	r17,r17,r3
 800a068:	1204b03a 	or	r2,r2,r8
 800a06c:	1c007416 	blt	r3,r16,800a240 <__adddf3+0x388>
 800a070:	1c21c83a 	sub	r16,r3,r16
 800a074:	82000044 	addi	r8,r16,1
 800a078:	00c007c4 	movi	r3,31
 800a07c:	1a009116 	blt	r3,r8,800a2c4 <__adddf3+0x40c>
 800a080:	00c00804 	movi	r3,32
 800a084:	1a07c83a 	sub	r3,r3,r8
 800a088:	8a08d83a 	srl	r4,r17,r8
 800a08c:	88e2983a 	sll	r17,r17,r3
 800a090:	10c6983a 	sll	r3,r2,r3
 800a094:	1210d83a 	srl	r8,r2,r8
 800a098:	8804c03a 	cmpne	r2,r17,zero
 800a09c:	1906b03a 	or	r3,r3,r4
 800a0a0:	18a2b03a 	or	r17,r3,r2
 800a0a4:	0021883a 	mov	r16,zero
 800a0a8:	003fa206 	br	8009f34 <__alt_data_end+0xfc009f34>
 800a0ac:	1890b03a 	or	r8,r3,r2
 800a0b0:	40017d26 	beq	r8,zero,800a6a8 <__adddf3+0x7f0>
 800a0b4:	1011883a 	mov	r8,r2
 800a0b8:	1823883a 	mov	r17,r3
 800a0bc:	888001cc 	andi	r2,r17,7
 800a0c0:	103f9e1e 	bne	r2,zero,8009f3c <__alt_data_end+0xfc009f3c>
 800a0c4:	4004977a 	slli	r2,r8,29
 800a0c8:	8822d0fa 	srli	r17,r17,3
 800a0cc:	4010d0fa 	srli	r8,r8,3
 800a0d0:	9007883a 	mov	r3,r18
 800a0d4:	1444b03a 	or	r2,r2,r17
 800a0d8:	0101ffc4 	movi	r4,2047
 800a0dc:	81002426 	beq	r16,r4,800a170 <__adddf3+0x2b8>
 800a0e0:	8120703a 	and	r16,r16,r4
 800a0e4:	01000434 	movhi	r4,16
 800a0e8:	213fffc4 	addi	r4,r4,-1
 800a0ec:	4110703a 	and	r8,r8,r4
 800a0f0:	003fa806 	br	8009f94 <__alt_data_end+0xfc009f94>
 800a0f4:	8089c83a 	sub	r4,r16,r2
 800a0f8:	01005e0e 	bge	zero,r4,800a274 <__adddf3+0x3bc>
 800a0fc:	10002b26 	beq	r2,zero,800a1ac <__adddf3+0x2f4>
 800a100:	0081ffc4 	movi	r2,2047
 800a104:	80bf8b26 	beq	r16,r2,8009f34 <__alt_data_end+0xfc009f34>
 800a108:	4a402034 	orhi	r9,r9,128
 800a10c:	00800e04 	movi	r2,56
 800a110:	1100a40e 	bge	r2,r4,800a3a4 <__adddf3+0x4ec>
 800a114:	498cb03a 	or	r6,r9,r6
 800a118:	300ac03a 	cmpne	r5,r6,zero
 800a11c:	0013883a 	mov	r9,zero
 800a120:	2c4b883a 	add	r5,r5,r17
 800a124:	2c63803a 	cmpltu	r17,r5,r17
 800a128:	4a11883a 	add	r8,r9,r8
 800a12c:	8a11883a 	add	r8,r17,r8
 800a130:	2823883a 	mov	r17,r5
 800a134:	4080202c 	andhi	r2,r8,128
 800a138:	103fe026 	beq	r2,zero,800a0bc <__alt_data_end+0xfc00a0bc>
 800a13c:	84000044 	addi	r16,r16,1
 800a140:	0081ffc4 	movi	r2,2047
 800a144:	8080d226 	beq	r16,r2,800a490 <__adddf3+0x5d8>
 800a148:	00bfe034 	movhi	r2,65408
 800a14c:	10bfffc4 	addi	r2,r2,-1
 800a150:	4090703a 	and	r8,r8,r2
 800a154:	880ad07a 	srli	r5,r17,1
 800a158:	400897fa 	slli	r4,r8,31
 800a15c:	88c0004c 	andi	r3,r17,1
 800a160:	28e2b03a 	or	r17,r5,r3
 800a164:	4010d07a 	srli	r8,r8,1
 800a168:	2462b03a 	or	r17,r4,r17
 800a16c:	003f7106 	br	8009f34 <__alt_data_end+0xfc009f34>
 800a170:	4088b03a 	or	r4,r8,r2
 800a174:	20014526 	beq	r4,zero,800a68c <__adddf3+0x7d4>
 800a178:	01000434 	movhi	r4,16
 800a17c:	42000234 	orhi	r8,r8,8
 800a180:	213fffc4 	addi	r4,r4,-1
 800a184:	4110703a 	and	r8,r8,r4
 800a188:	003f8206 	br	8009f94 <__alt_data_end+0xfc009f94>
 800a18c:	18ffffc4 	addi	r3,r3,-1
 800a190:	1800491e 	bne	r3,zero,800a2b8 <__adddf3+0x400>
 800a194:	898bc83a 	sub	r5,r17,r6
 800a198:	8963803a 	cmpltu	r17,r17,r5
 800a19c:	4251c83a 	sub	r8,r8,r9
 800a1a0:	4451c83a 	sub	r8,r8,r17
 800a1a4:	2823883a 	mov	r17,r5
 800a1a8:	003f9f06 	br	800a028 <__alt_data_end+0xfc00a028>
 800a1ac:	4984b03a 	or	r2,r9,r6
 800a1b0:	103f6026 	beq	r2,zero,8009f34 <__alt_data_end+0xfc009f34>
 800a1b4:	213fffc4 	addi	r4,r4,-1
 800a1b8:	2000931e 	bne	r4,zero,800a408 <__adddf3+0x550>
 800a1bc:	898d883a 	add	r6,r17,r6
 800a1c0:	3463803a 	cmpltu	r17,r6,r17
 800a1c4:	4251883a 	add	r8,r8,r9
 800a1c8:	8a11883a 	add	r8,r17,r8
 800a1cc:	3023883a 	mov	r17,r6
 800a1d0:	003fd806 	br	800a134 <__alt_data_end+0xfc00a134>
 800a1d4:	1800541e 	bne	r3,zero,800a328 <__adddf3+0x470>
 800a1d8:	80800044 	addi	r2,r16,1
 800a1dc:	1081ffcc 	andi	r2,r2,2047
 800a1e0:	00c00044 	movi	r3,1
 800a1e4:	1880a00e 	bge	r3,r2,800a468 <__adddf3+0x5b0>
 800a1e8:	8989c83a 	sub	r4,r17,r6
 800a1ec:	8905803a 	cmpltu	r2,r17,r4
 800a1f0:	4267c83a 	sub	r19,r8,r9
 800a1f4:	98a7c83a 	sub	r19,r19,r2
 800a1f8:	9880202c 	andhi	r2,r19,128
 800a1fc:	10006326 	beq	r2,zero,800a38c <__adddf3+0x4d4>
 800a200:	3463c83a 	sub	r17,r6,r17
 800a204:	4a07c83a 	sub	r3,r9,r8
 800a208:	344d803a 	cmpltu	r6,r6,r17
 800a20c:	19a7c83a 	sub	r19,r3,r6
 800a210:	3825883a 	mov	r18,r7
 800a214:	983f8a1e 	bne	r19,zero,800a040 <__alt_data_end+0xfc00a040>
 800a218:	8809883a 	mov	r4,r17
 800a21c:	800c6f80 	call	800c6f8 <__clzsi2>
 800a220:	10800804 	addi	r2,r2,32
 800a224:	10fffe04 	addi	r3,r2,-8
 800a228:	010007c4 	movi	r4,31
 800a22c:	20ff890e 	bge	r4,r3,800a054 <__alt_data_end+0xfc00a054>
 800a230:	10bff604 	addi	r2,r2,-40
 800a234:	8884983a 	sll	r2,r17,r2
 800a238:	0023883a 	mov	r17,zero
 800a23c:	1c3f8c0e 	bge	r3,r16,800a070 <__alt_data_end+0xfc00a070>
 800a240:	023fe034 	movhi	r8,65408
 800a244:	423fffc4 	addi	r8,r8,-1
 800a248:	80e1c83a 	sub	r16,r16,r3
 800a24c:	1210703a 	and	r8,r2,r8
 800a250:	003f3806 	br	8009f34 <__alt_data_end+0xfc009f34>
 800a254:	9007883a 	mov	r3,r18
 800a258:	0011883a 	mov	r8,zero
 800a25c:	0005883a 	mov	r2,zero
 800a260:	003f4c06 	br	8009f94 <__alt_data_end+0xfc009f94>
 800a264:	498cb03a 	or	r6,r9,r6
 800a268:	300cc03a 	cmpne	r6,r6,zero
 800a26c:	0007883a 	mov	r3,zero
 800a270:	003f6806 	br	800a014 <__alt_data_end+0xfc00a014>
 800a274:	20009c1e 	bne	r4,zero,800a4e8 <__adddf3+0x630>
 800a278:	80800044 	addi	r2,r16,1
 800a27c:	1141ffcc 	andi	r5,r2,2047
 800a280:	01000044 	movi	r4,1
 800a284:	2140670e 	bge	r4,r5,800a424 <__adddf3+0x56c>
 800a288:	0101ffc4 	movi	r4,2047
 800a28c:	11007f26 	beq	r2,r4,800a48c <__adddf3+0x5d4>
 800a290:	898d883a 	add	r6,r17,r6
 800a294:	4247883a 	add	r3,r8,r9
 800a298:	3451803a 	cmpltu	r8,r6,r17
 800a29c:	40d1883a 	add	r8,r8,r3
 800a2a0:	402297fa 	slli	r17,r8,31
 800a2a4:	300cd07a 	srli	r6,r6,1
 800a2a8:	4010d07a 	srli	r8,r8,1
 800a2ac:	1021883a 	mov	r16,r2
 800a2b0:	89a2b03a 	or	r17,r17,r6
 800a2b4:	003f1f06 	br	8009f34 <__alt_data_end+0xfc009f34>
 800a2b8:	0081ffc4 	movi	r2,2047
 800a2bc:	80bf481e 	bne	r16,r2,8009fe0 <__alt_data_end+0xfc009fe0>
 800a2c0:	003f1c06 	br	8009f34 <__alt_data_end+0xfc009f34>
 800a2c4:	843ff844 	addi	r16,r16,-31
 800a2c8:	01000804 	movi	r4,32
 800a2cc:	1406d83a 	srl	r3,r2,r16
 800a2d0:	41005026 	beq	r8,r4,800a414 <__adddf3+0x55c>
 800a2d4:	01001004 	movi	r4,64
 800a2d8:	2211c83a 	sub	r8,r4,r8
 800a2dc:	1204983a 	sll	r2,r2,r8
 800a2e0:	88a2b03a 	or	r17,r17,r2
 800a2e4:	8822c03a 	cmpne	r17,r17,zero
 800a2e8:	1c62b03a 	or	r17,r3,r17
 800a2ec:	0011883a 	mov	r8,zero
 800a2f0:	0021883a 	mov	r16,zero
 800a2f4:	003f7106 	br	800a0bc <__alt_data_end+0xfc00a0bc>
 800a2f8:	193ff804 	addi	r4,r3,-32
 800a2fc:	00800804 	movi	r2,32
 800a300:	4908d83a 	srl	r4,r9,r4
 800a304:	18804526 	beq	r3,r2,800a41c <__adddf3+0x564>
 800a308:	00801004 	movi	r2,64
 800a30c:	10c5c83a 	sub	r2,r2,r3
 800a310:	4886983a 	sll	r3,r9,r2
 800a314:	198cb03a 	or	r6,r3,r6
 800a318:	300cc03a 	cmpne	r6,r6,zero
 800a31c:	218cb03a 	or	r6,r4,r6
 800a320:	0007883a 	mov	r3,zero
 800a324:	003f3b06 	br	800a014 <__alt_data_end+0xfc00a014>
 800a328:	80002a26 	beq	r16,zero,800a3d4 <__adddf3+0x51c>
 800a32c:	0101ffc4 	movi	r4,2047
 800a330:	11006826 	beq	r2,r4,800a4d4 <__adddf3+0x61c>
 800a334:	00c7c83a 	sub	r3,zero,r3
 800a338:	42002034 	orhi	r8,r8,128
 800a33c:	01000e04 	movi	r4,56
 800a340:	20c07c16 	blt	r4,r3,800a534 <__adddf3+0x67c>
 800a344:	010007c4 	movi	r4,31
 800a348:	20c0da16 	blt	r4,r3,800a6b4 <__adddf3+0x7fc>
 800a34c:	01000804 	movi	r4,32
 800a350:	20c9c83a 	sub	r4,r4,r3
 800a354:	4114983a 	sll	r10,r8,r4
 800a358:	88cad83a 	srl	r5,r17,r3
 800a35c:	8908983a 	sll	r4,r17,r4
 800a360:	40c6d83a 	srl	r3,r8,r3
 800a364:	5162b03a 	or	r17,r10,r5
 800a368:	2008c03a 	cmpne	r4,r4,zero
 800a36c:	8922b03a 	or	r17,r17,r4
 800a370:	3463c83a 	sub	r17,r6,r17
 800a374:	48c7c83a 	sub	r3,r9,r3
 800a378:	344d803a 	cmpltu	r6,r6,r17
 800a37c:	1991c83a 	sub	r8,r3,r6
 800a380:	1021883a 	mov	r16,r2
 800a384:	3825883a 	mov	r18,r7
 800a388:	003f2706 	br	800a028 <__alt_data_end+0xfc00a028>
 800a38c:	24d0b03a 	or	r8,r4,r19
 800a390:	40001b1e 	bne	r8,zero,800a400 <__adddf3+0x548>
 800a394:	0005883a 	mov	r2,zero
 800a398:	0007883a 	mov	r3,zero
 800a39c:	0021883a 	mov	r16,zero
 800a3a0:	003f4d06 	br	800a0d8 <__alt_data_end+0xfc00a0d8>
 800a3a4:	008007c4 	movi	r2,31
 800a3a8:	11003c16 	blt	r2,r4,800a49c <__adddf3+0x5e4>
 800a3ac:	00800804 	movi	r2,32
 800a3b0:	1105c83a 	sub	r2,r2,r4
 800a3b4:	488e983a 	sll	r7,r9,r2
 800a3b8:	310ad83a 	srl	r5,r6,r4
 800a3bc:	3084983a 	sll	r2,r6,r2
 800a3c0:	4912d83a 	srl	r9,r9,r4
 800a3c4:	394ab03a 	or	r5,r7,r5
 800a3c8:	1004c03a 	cmpne	r2,r2,zero
 800a3cc:	288ab03a 	or	r5,r5,r2
 800a3d0:	003f5306 	br	800a120 <__alt_data_end+0xfc00a120>
 800a3d4:	4448b03a 	or	r4,r8,r17
 800a3d8:	20003e26 	beq	r4,zero,800a4d4 <__adddf3+0x61c>
 800a3dc:	00c6303a 	nor	r3,zero,r3
 800a3e0:	18003a1e 	bne	r3,zero,800a4cc <__adddf3+0x614>
 800a3e4:	3463c83a 	sub	r17,r6,r17
 800a3e8:	4a07c83a 	sub	r3,r9,r8
 800a3ec:	344d803a 	cmpltu	r6,r6,r17
 800a3f0:	1991c83a 	sub	r8,r3,r6
 800a3f4:	1021883a 	mov	r16,r2
 800a3f8:	3825883a 	mov	r18,r7
 800a3fc:	003f0a06 	br	800a028 <__alt_data_end+0xfc00a028>
 800a400:	2023883a 	mov	r17,r4
 800a404:	003f0d06 	br	800a03c <__alt_data_end+0xfc00a03c>
 800a408:	0081ffc4 	movi	r2,2047
 800a40c:	80bf3f1e 	bne	r16,r2,800a10c <__alt_data_end+0xfc00a10c>
 800a410:	003ec806 	br	8009f34 <__alt_data_end+0xfc009f34>
 800a414:	0005883a 	mov	r2,zero
 800a418:	003fb106 	br	800a2e0 <__alt_data_end+0xfc00a2e0>
 800a41c:	0007883a 	mov	r3,zero
 800a420:	003fbc06 	br	800a314 <__alt_data_end+0xfc00a314>
 800a424:	4444b03a 	or	r2,r8,r17
 800a428:	8000871e 	bne	r16,zero,800a648 <__adddf3+0x790>
 800a42c:	1000ba26 	beq	r2,zero,800a718 <__adddf3+0x860>
 800a430:	4984b03a 	or	r2,r9,r6
 800a434:	103ebf26 	beq	r2,zero,8009f34 <__alt_data_end+0xfc009f34>
 800a438:	8985883a 	add	r2,r17,r6
 800a43c:	4247883a 	add	r3,r8,r9
 800a440:	1451803a 	cmpltu	r8,r2,r17
 800a444:	40d1883a 	add	r8,r8,r3
 800a448:	40c0202c 	andhi	r3,r8,128
 800a44c:	1023883a 	mov	r17,r2
 800a450:	183f1a26 	beq	r3,zero,800a0bc <__alt_data_end+0xfc00a0bc>
 800a454:	00bfe034 	movhi	r2,65408
 800a458:	10bfffc4 	addi	r2,r2,-1
 800a45c:	2021883a 	mov	r16,r4
 800a460:	4090703a 	and	r8,r8,r2
 800a464:	003eb306 	br	8009f34 <__alt_data_end+0xfc009f34>
 800a468:	4444b03a 	or	r2,r8,r17
 800a46c:	8000291e 	bne	r16,zero,800a514 <__adddf3+0x65c>
 800a470:	10004b1e 	bne	r2,zero,800a5a0 <__adddf3+0x6e8>
 800a474:	4990b03a 	or	r8,r9,r6
 800a478:	40008b26 	beq	r8,zero,800a6a8 <__adddf3+0x7f0>
 800a47c:	4811883a 	mov	r8,r9
 800a480:	3023883a 	mov	r17,r6
 800a484:	3825883a 	mov	r18,r7
 800a488:	003eaa06 	br	8009f34 <__alt_data_end+0xfc009f34>
 800a48c:	1021883a 	mov	r16,r2
 800a490:	0011883a 	mov	r8,zero
 800a494:	0005883a 	mov	r2,zero
 800a498:	003f0f06 	br	800a0d8 <__alt_data_end+0xfc00a0d8>
 800a49c:	217ff804 	addi	r5,r4,-32
 800a4a0:	00800804 	movi	r2,32
 800a4a4:	494ad83a 	srl	r5,r9,r5
 800a4a8:	20807d26 	beq	r4,r2,800a6a0 <__adddf3+0x7e8>
 800a4ac:	00801004 	movi	r2,64
 800a4b0:	1109c83a 	sub	r4,r2,r4
 800a4b4:	4912983a 	sll	r9,r9,r4
 800a4b8:	498cb03a 	or	r6,r9,r6
 800a4bc:	300cc03a 	cmpne	r6,r6,zero
 800a4c0:	298ab03a 	or	r5,r5,r6
 800a4c4:	0013883a 	mov	r9,zero
 800a4c8:	003f1506 	br	800a120 <__alt_data_end+0xfc00a120>
 800a4cc:	0101ffc4 	movi	r4,2047
 800a4d0:	113f9a1e 	bne	r2,r4,800a33c <__alt_data_end+0xfc00a33c>
 800a4d4:	4811883a 	mov	r8,r9
 800a4d8:	3023883a 	mov	r17,r6
 800a4dc:	1021883a 	mov	r16,r2
 800a4e0:	3825883a 	mov	r18,r7
 800a4e4:	003e9306 	br	8009f34 <__alt_data_end+0xfc009f34>
 800a4e8:	8000161e 	bne	r16,zero,800a544 <__adddf3+0x68c>
 800a4ec:	444ab03a 	or	r5,r8,r17
 800a4f0:	28005126 	beq	r5,zero,800a638 <__adddf3+0x780>
 800a4f4:	0108303a 	nor	r4,zero,r4
 800a4f8:	20004d1e 	bne	r4,zero,800a630 <__adddf3+0x778>
 800a4fc:	89a3883a 	add	r17,r17,r6
 800a500:	4253883a 	add	r9,r8,r9
 800a504:	898d803a 	cmpltu	r6,r17,r6
 800a508:	3251883a 	add	r8,r6,r9
 800a50c:	1021883a 	mov	r16,r2
 800a510:	003f0806 	br	800a134 <__alt_data_end+0xfc00a134>
 800a514:	1000301e 	bne	r2,zero,800a5d8 <__adddf3+0x720>
 800a518:	4984b03a 	or	r2,r9,r6
 800a51c:	10007126 	beq	r2,zero,800a6e4 <__adddf3+0x82c>
 800a520:	4811883a 	mov	r8,r9
 800a524:	3023883a 	mov	r17,r6
 800a528:	3825883a 	mov	r18,r7
 800a52c:	0401ffc4 	movi	r16,2047
 800a530:	003e8006 	br	8009f34 <__alt_data_end+0xfc009f34>
 800a534:	4462b03a 	or	r17,r8,r17
 800a538:	8822c03a 	cmpne	r17,r17,zero
 800a53c:	0007883a 	mov	r3,zero
 800a540:	003f8b06 	br	800a370 <__alt_data_end+0xfc00a370>
 800a544:	0141ffc4 	movi	r5,2047
 800a548:	11403b26 	beq	r2,r5,800a638 <__adddf3+0x780>
 800a54c:	0109c83a 	sub	r4,zero,r4
 800a550:	42002034 	orhi	r8,r8,128
 800a554:	01400e04 	movi	r5,56
 800a558:	29006716 	blt	r5,r4,800a6f8 <__adddf3+0x840>
 800a55c:	014007c4 	movi	r5,31
 800a560:	29007016 	blt	r5,r4,800a724 <__adddf3+0x86c>
 800a564:	01400804 	movi	r5,32
 800a568:	290bc83a 	sub	r5,r5,r4
 800a56c:	4154983a 	sll	r10,r8,r5
 800a570:	890ed83a 	srl	r7,r17,r4
 800a574:	894a983a 	sll	r5,r17,r5
 800a578:	4108d83a 	srl	r4,r8,r4
 800a57c:	51e2b03a 	or	r17,r10,r7
 800a580:	280ac03a 	cmpne	r5,r5,zero
 800a584:	8962b03a 	or	r17,r17,r5
 800a588:	89a3883a 	add	r17,r17,r6
 800a58c:	2253883a 	add	r9,r4,r9
 800a590:	898d803a 	cmpltu	r6,r17,r6
 800a594:	3251883a 	add	r8,r6,r9
 800a598:	1021883a 	mov	r16,r2
 800a59c:	003ee506 	br	800a134 <__alt_data_end+0xfc00a134>
 800a5a0:	4984b03a 	or	r2,r9,r6
 800a5a4:	103e6326 	beq	r2,zero,8009f34 <__alt_data_end+0xfc009f34>
 800a5a8:	8987c83a 	sub	r3,r17,r6
 800a5ac:	88c9803a 	cmpltu	r4,r17,r3
 800a5b0:	4245c83a 	sub	r2,r8,r9
 800a5b4:	1105c83a 	sub	r2,r2,r4
 800a5b8:	1100202c 	andhi	r4,r2,128
 800a5bc:	203ebb26 	beq	r4,zero,800a0ac <__alt_data_end+0xfc00a0ac>
 800a5c0:	3463c83a 	sub	r17,r6,r17
 800a5c4:	4a07c83a 	sub	r3,r9,r8
 800a5c8:	344d803a 	cmpltu	r6,r6,r17
 800a5cc:	1991c83a 	sub	r8,r3,r6
 800a5d0:	3825883a 	mov	r18,r7
 800a5d4:	003e5706 	br	8009f34 <__alt_data_end+0xfc009f34>
 800a5d8:	4984b03a 	or	r2,r9,r6
 800a5dc:	10002e26 	beq	r2,zero,800a698 <__adddf3+0x7e0>
 800a5e0:	4004d0fa 	srli	r2,r8,3
 800a5e4:	8822d0fa 	srli	r17,r17,3
 800a5e8:	4010977a 	slli	r8,r8,29
 800a5ec:	10c0022c 	andhi	r3,r2,8
 800a5f0:	4462b03a 	or	r17,r8,r17
 800a5f4:	18000826 	beq	r3,zero,800a618 <__adddf3+0x760>
 800a5f8:	4808d0fa 	srli	r4,r9,3
 800a5fc:	20c0022c 	andhi	r3,r4,8
 800a600:	1800051e 	bne	r3,zero,800a618 <__adddf3+0x760>
 800a604:	300cd0fa 	srli	r6,r6,3
 800a608:	4806977a 	slli	r3,r9,29
 800a60c:	2005883a 	mov	r2,r4
 800a610:	3825883a 	mov	r18,r7
 800a614:	19a2b03a 	or	r17,r3,r6
 800a618:	8810d77a 	srli	r8,r17,29
 800a61c:	100490fa 	slli	r2,r2,3
 800a620:	882290fa 	slli	r17,r17,3
 800a624:	0401ffc4 	movi	r16,2047
 800a628:	4090b03a 	or	r8,r8,r2
 800a62c:	003e4106 	br	8009f34 <__alt_data_end+0xfc009f34>
 800a630:	0141ffc4 	movi	r5,2047
 800a634:	117fc71e 	bne	r2,r5,800a554 <__alt_data_end+0xfc00a554>
 800a638:	4811883a 	mov	r8,r9
 800a63c:	3023883a 	mov	r17,r6
 800a640:	1021883a 	mov	r16,r2
 800a644:	003e3b06 	br	8009f34 <__alt_data_end+0xfc009f34>
 800a648:	10002f26 	beq	r2,zero,800a708 <__adddf3+0x850>
 800a64c:	4984b03a 	or	r2,r9,r6
 800a650:	10001126 	beq	r2,zero,800a698 <__adddf3+0x7e0>
 800a654:	4004d0fa 	srli	r2,r8,3
 800a658:	8822d0fa 	srli	r17,r17,3
 800a65c:	4010977a 	slli	r8,r8,29
 800a660:	10c0022c 	andhi	r3,r2,8
 800a664:	4462b03a 	or	r17,r8,r17
 800a668:	183feb26 	beq	r3,zero,800a618 <__alt_data_end+0xfc00a618>
 800a66c:	4808d0fa 	srli	r4,r9,3
 800a670:	20c0022c 	andhi	r3,r4,8
 800a674:	183fe81e 	bne	r3,zero,800a618 <__alt_data_end+0xfc00a618>
 800a678:	300cd0fa 	srli	r6,r6,3
 800a67c:	4806977a 	slli	r3,r9,29
 800a680:	2005883a 	mov	r2,r4
 800a684:	19a2b03a 	or	r17,r3,r6
 800a688:	003fe306 	br	800a618 <__alt_data_end+0xfc00a618>
 800a68c:	0011883a 	mov	r8,zero
 800a690:	0005883a 	mov	r2,zero
 800a694:	003e3f06 	br	8009f94 <__alt_data_end+0xfc009f94>
 800a698:	0401ffc4 	movi	r16,2047
 800a69c:	003e2506 	br	8009f34 <__alt_data_end+0xfc009f34>
 800a6a0:	0013883a 	mov	r9,zero
 800a6a4:	003f8406 	br	800a4b8 <__alt_data_end+0xfc00a4b8>
 800a6a8:	0005883a 	mov	r2,zero
 800a6ac:	0007883a 	mov	r3,zero
 800a6b0:	003e8906 	br	800a0d8 <__alt_data_end+0xfc00a0d8>
 800a6b4:	197ff804 	addi	r5,r3,-32
 800a6b8:	01000804 	movi	r4,32
 800a6bc:	414ad83a 	srl	r5,r8,r5
 800a6c0:	19002426 	beq	r3,r4,800a754 <__adddf3+0x89c>
 800a6c4:	01001004 	movi	r4,64
 800a6c8:	20c7c83a 	sub	r3,r4,r3
 800a6cc:	40c6983a 	sll	r3,r8,r3
 800a6d0:	1c46b03a 	or	r3,r3,r17
 800a6d4:	1806c03a 	cmpne	r3,r3,zero
 800a6d8:	28e2b03a 	or	r17,r5,r3
 800a6dc:	0007883a 	mov	r3,zero
 800a6e0:	003f2306 	br	800a370 <__alt_data_end+0xfc00a370>
 800a6e4:	0007883a 	mov	r3,zero
 800a6e8:	5811883a 	mov	r8,r11
 800a6ec:	00bfffc4 	movi	r2,-1
 800a6f0:	0401ffc4 	movi	r16,2047
 800a6f4:	003e7806 	br	800a0d8 <__alt_data_end+0xfc00a0d8>
 800a6f8:	4462b03a 	or	r17,r8,r17
 800a6fc:	8822c03a 	cmpne	r17,r17,zero
 800a700:	0009883a 	mov	r4,zero
 800a704:	003fa006 	br	800a588 <__alt_data_end+0xfc00a588>
 800a708:	4811883a 	mov	r8,r9
 800a70c:	3023883a 	mov	r17,r6
 800a710:	0401ffc4 	movi	r16,2047
 800a714:	003e0706 	br	8009f34 <__alt_data_end+0xfc009f34>
 800a718:	4811883a 	mov	r8,r9
 800a71c:	3023883a 	mov	r17,r6
 800a720:	003e0406 	br	8009f34 <__alt_data_end+0xfc009f34>
 800a724:	21fff804 	addi	r7,r4,-32
 800a728:	01400804 	movi	r5,32
 800a72c:	41ced83a 	srl	r7,r8,r7
 800a730:	21400a26 	beq	r4,r5,800a75c <__adddf3+0x8a4>
 800a734:	01401004 	movi	r5,64
 800a738:	2909c83a 	sub	r4,r5,r4
 800a73c:	4108983a 	sll	r4,r8,r4
 800a740:	2448b03a 	or	r4,r4,r17
 800a744:	2008c03a 	cmpne	r4,r4,zero
 800a748:	3922b03a 	or	r17,r7,r4
 800a74c:	0009883a 	mov	r4,zero
 800a750:	003f8d06 	br	800a588 <__alt_data_end+0xfc00a588>
 800a754:	0007883a 	mov	r3,zero
 800a758:	003fdd06 	br	800a6d0 <__alt_data_end+0xfc00a6d0>
 800a75c:	0009883a 	mov	r4,zero
 800a760:	003ff706 	br	800a740 <__alt_data_end+0xfc00a740>

0800a764 <__divdf3>:
 800a764:	defff004 	addi	sp,sp,-64
 800a768:	dc800815 	stw	r18,32(sp)
 800a76c:	2824d53a 	srli	r18,r5,20
 800a770:	dd800c15 	stw	r22,48(sp)
 800a774:	282cd7fa 	srli	r22,r5,31
 800a778:	dc000615 	stw	r16,24(sp)
 800a77c:	04000434 	movhi	r16,16
 800a780:	843fffc4 	addi	r16,r16,-1
 800a784:	dfc00f15 	stw	ra,60(sp)
 800a788:	df000e15 	stw	fp,56(sp)
 800a78c:	ddc00d15 	stw	r23,52(sp)
 800a790:	dd400b15 	stw	r21,44(sp)
 800a794:	dd000a15 	stw	r20,40(sp)
 800a798:	dcc00915 	stw	r19,36(sp)
 800a79c:	dc400715 	stw	r17,28(sp)
 800a7a0:	9481ffcc 	andi	r18,r18,2047
 800a7a4:	2c20703a 	and	r16,r5,r16
 800a7a8:	b2003fcc 	andi	r8,r22,255
 800a7ac:	90006126 	beq	r18,zero,800a934 <__divdf3+0x1d0>
 800a7b0:	0081ffc4 	movi	r2,2047
 800a7b4:	202b883a 	mov	r21,r4
 800a7b8:	90803726 	beq	r18,r2,800a898 <__divdf3+0x134>
 800a7bc:	80800434 	orhi	r2,r16,16
 800a7c0:	100490fa 	slli	r2,r2,3
 800a7c4:	2020d77a 	srli	r16,r4,29
 800a7c8:	202a90fa 	slli	r21,r4,3
 800a7cc:	94bf0044 	addi	r18,r18,-1023
 800a7d0:	80a0b03a 	or	r16,r16,r2
 800a7d4:	0013883a 	mov	r9,zero
 800a7d8:	000b883a 	mov	r5,zero
 800a7dc:	3806d53a 	srli	r3,r7,20
 800a7e0:	382ed7fa 	srli	r23,r7,31
 800a7e4:	04400434 	movhi	r17,16
 800a7e8:	8c7fffc4 	addi	r17,r17,-1
 800a7ec:	18c1ffcc 	andi	r3,r3,2047
 800a7f0:	3029883a 	mov	r20,r6
 800a7f4:	3c62703a 	and	r17,r7,r17
 800a7f8:	bf003fcc 	andi	fp,r23,255
 800a7fc:	18006e26 	beq	r3,zero,800a9b8 <__divdf3+0x254>
 800a800:	0081ffc4 	movi	r2,2047
 800a804:	18806626 	beq	r3,r2,800a9a0 <__divdf3+0x23c>
 800a808:	88800434 	orhi	r2,r17,16
 800a80c:	100490fa 	slli	r2,r2,3
 800a810:	3022d77a 	srli	r17,r6,29
 800a814:	302890fa 	slli	r20,r6,3
 800a818:	18ff0044 	addi	r3,r3,-1023
 800a81c:	88a2b03a 	or	r17,r17,r2
 800a820:	000f883a 	mov	r7,zero
 800a824:	b5e6f03a 	xor	r19,r22,r23
 800a828:	3a4cb03a 	or	r6,r7,r9
 800a82c:	008003c4 	movi	r2,15
 800a830:	9809883a 	mov	r4,r19
 800a834:	90c7c83a 	sub	r3,r18,r3
 800a838:	9cc03fcc 	andi	r19,r19,255
 800a83c:	11809636 	bltu	r2,r6,800aa98 <__divdf3+0x334>
 800a840:	300c90ba 	slli	r6,r6,2
 800a844:	00820074 	movhi	r2,2049
 800a848:	10aa1604 	addi	r2,r2,-22440
 800a84c:	308d883a 	add	r6,r6,r2
 800a850:	30800017 	ldw	r2,0(r6)
 800a854:	1000683a 	jmp	r2
 800a858:	0800aa98 	cmpnei	zero,at,682
 800a85c:	0800a8d0 	cmplti	zero,at,675
 800a860:	0800aa88 	cmpgei	zero,at,682
 800a864:	0800a8c4 	addi	zero,at,675
 800a868:	0800aa88 	cmpgei	zero,at,682
 800a86c:	0800aa5c 	xori	zero,at,681
 800a870:	0800aa88 	cmpgei	zero,at,682
 800a874:	0800a8c4 	addi	zero,at,675
 800a878:	0800a8d0 	cmplti	zero,at,675
 800a87c:	0800a8d0 	cmplti	zero,at,675
 800a880:	0800aa5c 	xori	zero,at,681
 800a884:	0800a8c4 	addi	zero,at,675
 800a888:	0800a8b4 	orhi	zero,at,674
 800a88c:	0800a8b4 	orhi	zero,at,674
 800a890:	0800a8b4 	orhi	zero,at,674
 800a894:	0800ae20 	cmpeqi	zero,at,696
 800a898:	2404b03a 	or	r2,r4,r16
 800a89c:	10006c1e 	bne	r2,zero,800aa50 <__divdf3+0x2ec>
 800a8a0:	02400204 	movi	r9,8
 800a8a4:	0021883a 	mov	r16,zero
 800a8a8:	002b883a 	mov	r21,zero
 800a8ac:	01400084 	movi	r5,2
 800a8b0:	003fca06 	br	800a7dc <__alt_data_end+0xfc00a7dc>
 800a8b4:	8023883a 	mov	r17,r16
 800a8b8:	a829883a 	mov	r20,r21
 800a8bc:	4039883a 	mov	fp,r8
 800a8c0:	280f883a 	mov	r7,r5
 800a8c4:	00800084 	movi	r2,2
 800a8c8:	3881601e 	bne	r7,r2,800ae4c <__divdf3+0x6e8>
 800a8cc:	e027883a 	mov	r19,fp
 800a8d0:	9900004c 	andi	r4,r19,1
 800a8d4:	0081ffc4 	movi	r2,2047
 800a8d8:	0021883a 	mov	r16,zero
 800a8dc:	002b883a 	mov	r21,zero
 800a8e0:	1004953a 	slli	r2,r2,20
 800a8e4:	20c03fcc 	andi	r3,r4,255
 800a8e8:	01400434 	movhi	r5,16
 800a8ec:	297fffc4 	addi	r5,r5,-1
 800a8f0:	180697fa 	slli	r3,r3,31
 800a8f4:	8160703a 	and	r16,r16,r5
 800a8f8:	80a0b03a 	or	r16,r16,r2
 800a8fc:	80c6b03a 	or	r3,r16,r3
 800a900:	a805883a 	mov	r2,r21
 800a904:	dfc00f17 	ldw	ra,60(sp)
 800a908:	df000e17 	ldw	fp,56(sp)
 800a90c:	ddc00d17 	ldw	r23,52(sp)
 800a910:	dd800c17 	ldw	r22,48(sp)
 800a914:	dd400b17 	ldw	r21,44(sp)
 800a918:	dd000a17 	ldw	r20,40(sp)
 800a91c:	dcc00917 	ldw	r19,36(sp)
 800a920:	dc800817 	ldw	r18,32(sp)
 800a924:	dc400717 	ldw	r17,28(sp)
 800a928:	dc000617 	ldw	r16,24(sp)
 800a92c:	dec01004 	addi	sp,sp,64
 800a930:	f800283a 	ret
 800a934:	2404b03a 	or	r2,r4,r16
 800a938:	2023883a 	mov	r17,r4
 800a93c:	10003f26 	beq	r2,zero,800aa3c <__divdf3+0x2d8>
 800a940:	80015e26 	beq	r16,zero,800aebc <__divdf3+0x758>
 800a944:	8009883a 	mov	r4,r16
 800a948:	d9800215 	stw	r6,8(sp)
 800a94c:	d9c00515 	stw	r7,20(sp)
 800a950:	da000415 	stw	r8,16(sp)
 800a954:	800c6f80 	call	800c6f8 <__clzsi2>
 800a958:	d9800217 	ldw	r6,8(sp)
 800a95c:	d9c00517 	ldw	r7,20(sp)
 800a960:	da000417 	ldw	r8,16(sp)
 800a964:	113ffd44 	addi	r4,r2,-11
 800a968:	00c00704 	movi	r3,28
 800a96c:	19014f16 	blt	r3,r4,800aeac <__divdf3+0x748>
 800a970:	00c00744 	movi	r3,29
 800a974:	157ffe04 	addi	r21,r2,-8
 800a978:	1907c83a 	sub	r3,r3,r4
 800a97c:	8560983a 	sll	r16,r16,r21
 800a980:	88c6d83a 	srl	r3,r17,r3
 800a984:	8d6a983a 	sll	r21,r17,r21
 800a988:	1c20b03a 	or	r16,r3,r16
 800a98c:	1080fcc4 	addi	r2,r2,1011
 800a990:	00a5c83a 	sub	r18,zero,r2
 800a994:	0013883a 	mov	r9,zero
 800a998:	000b883a 	mov	r5,zero
 800a99c:	003f8f06 	br	800a7dc <__alt_data_end+0xfc00a7dc>
 800a9a0:	3444b03a 	or	r2,r6,r17
 800a9a4:	1000231e 	bne	r2,zero,800aa34 <__divdf3+0x2d0>
 800a9a8:	0023883a 	mov	r17,zero
 800a9ac:	0029883a 	mov	r20,zero
 800a9b0:	01c00084 	movi	r7,2
 800a9b4:	003f9b06 	br	800a824 <__alt_data_end+0xfc00a824>
 800a9b8:	3444b03a 	or	r2,r6,r17
 800a9bc:	10001926 	beq	r2,zero,800aa24 <__divdf3+0x2c0>
 800a9c0:	88014b26 	beq	r17,zero,800aef0 <__divdf3+0x78c>
 800a9c4:	8809883a 	mov	r4,r17
 800a9c8:	d9400115 	stw	r5,4(sp)
 800a9cc:	d9800215 	stw	r6,8(sp)
 800a9d0:	da000415 	stw	r8,16(sp)
 800a9d4:	da400315 	stw	r9,12(sp)
 800a9d8:	800c6f80 	call	800c6f8 <__clzsi2>
 800a9dc:	d9400117 	ldw	r5,4(sp)
 800a9e0:	d9800217 	ldw	r6,8(sp)
 800a9e4:	da000417 	ldw	r8,16(sp)
 800a9e8:	da400317 	ldw	r9,12(sp)
 800a9ec:	113ffd44 	addi	r4,r2,-11
 800a9f0:	00c00704 	movi	r3,28
 800a9f4:	19013a16 	blt	r3,r4,800aee0 <__divdf3+0x77c>
 800a9f8:	00c00744 	movi	r3,29
 800a9fc:	153ffe04 	addi	r20,r2,-8
 800aa00:	1907c83a 	sub	r3,r3,r4
 800aa04:	8d22983a 	sll	r17,r17,r20
 800aa08:	30c6d83a 	srl	r3,r6,r3
 800aa0c:	3528983a 	sll	r20,r6,r20
 800aa10:	1c62b03a 	or	r17,r3,r17
 800aa14:	1080fcc4 	addi	r2,r2,1011
 800aa18:	0087c83a 	sub	r3,zero,r2
 800aa1c:	000f883a 	mov	r7,zero
 800aa20:	003f8006 	br	800a824 <__alt_data_end+0xfc00a824>
 800aa24:	0023883a 	mov	r17,zero
 800aa28:	0029883a 	mov	r20,zero
 800aa2c:	01c00044 	movi	r7,1
 800aa30:	003f7c06 	br	800a824 <__alt_data_end+0xfc00a824>
 800aa34:	01c000c4 	movi	r7,3
 800aa38:	003f7a06 	br	800a824 <__alt_data_end+0xfc00a824>
 800aa3c:	02400104 	movi	r9,4
 800aa40:	0021883a 	mov	r16,zero
 800aa44:	002b883a 	mov	r21,zero
 800aa48:	01400044 	movi	r5,1
 800aa4c:	003f6306 	br	800a7dc <__alt_data_end+0xfc00a7dc>
 800aa50:	02400304 	movi	r9,12
 800aa54:	014000c4 	movi	r5,3
 800aa58:	003f6006 	br	800a7dc <__alt_data_end+0xfc00a7dc>
 800aa5c:	04000434 	movhi	r16,16
 800aa60:	0009883a 	mov	r4,zero
 800aa64:	843fffc4 	addi	r16,r16,-1
 800aa68:	057fffc4 	movi	r21,-1
 800aa6c:	0081ffc4 	movi	r2,2047
 800aa70:	003f9b06 	br	800a8e0 <__alt_data_end+0xfc00a8e0>
 800aa74:	00c00044 	movi	r3,1
 800aa78:	1887c83a 	sub	r3,r3,r2
 800aa7c:	01000e04 	movi	r4,56
 800aa80:	20c1530e 	bge	r4,r3,800afd0 <__divdf3+0x86c>
 800aa84:	9900004c 	andi	r4,r19,1
 800aa88:	0005883a 	mov	r2,zero
 800aa8c:	0021883a 	mov	r16,zero
 800aa90:	002b883a 	mov	r21,zero
 800aa94:	003f9206 	br	800a8e0 <__alt_data_end+0xfc00a8e0>
 800aa98:	8c012e36 	bltu	r17,r16,800af54 <__divdf3+0x7f0>
 800aa9c:	84412c26 	beq	r16,r17,800af50 <__divdf3+0x7ec>
 800aaa0:	a82f883a 	mov	r23,r21
 800aaa4:	18ffffc4 	addi	r3,r3,-1
 800aaa8:	002b883a 	mov	r21,zero
 800aaac:	a004d63a 	srli	r2,r20,24
 800aab0:	8822923a 	slli	r17,r17,8
 800aab4:	a028923a 	slli	r20,r20,8
 800aab8:	8009883a 	mov	r4,r16
 800aabc:	88acb03a 	or	r22,r17,r2
 800aac0:	dd000015 	stw	r20,0(sp)
 800aac4:	b028d43a 	srli	r20,r22,16
 800aac8:	d8c00215 	stw	r3,8(sp)
 800aacc:	b4bfffcc 	andi	r18,r22,65535
 800aad0:	a00b883a 	mov	r5,r20
 800aad4:	80013ec0 	call	80013ec <__udivsi3>
 800aad8:	100b883a 	mov	r5,r2
 800aadc:	9009883a 	mov	r4,r18
 800aae0:	1023883a 	mov	r17,r2
 800aae4:	80014a80 	call	80014a8 <__mulsi3>
 800aae8:	8009883a 	mov	r4,r16
 800aaec:	a00b883a 	mov	r5,r20
 800aaf0:	1039883a 	mov	fp,r2
 800aaf4:	80014500 	call	8001450 <__umodsi3>
 800aaf8:	1004943a 	slli	r2,r2,16
 800aafc:	b808d43a 	srli	r4,r23,16
 800ab00:	d8c00217 	ldw	r3,8(sp)
 800ab04:	2084b03a 	or	r2,r4,r2
 800ab08:	1700062e 	bgeu	r2,fp,800ab24 <__divdf3+0x3c0>
 800ab0c:	1585883a 	add	r2,r2,r22
 800ab10:	893fffc4 	addi	r4,r17,-1
 800ab14:	15811d36 	bltu	r2,r22,800af8c <__divdf3+0x828>
 800ab18:	17011c2e 	bgeu	r2,fp,800af8c <__divdf3+0x828>
 800ab1c:	8c7fff84 	addi	r17,r17,-2
 800ab20:	1585883a 	add	r2,r2,r22
 800ab24:	1739c83a 	sub	fp,r2,fp
 800ab28:	a00b883a 	mov	r5,r20
 800ab2c:	e009883a 	mov	r4,fp
 800ab30:	d8c00215 	stw	r3,8(sp)
 800ab34:	80013ec0 	call	80013ec <__udivsi3>
 800ab38:	100b883a 	mov	r5,r2
 800ab3c:	9009883a 	mov	r4,r18
 800ab40:	1021883a 	mov	r16,r2
 800ab44:	80014a80 	call	80014a8 <__mulsi3>
 800ab48:	a00b883a 	mov	r5,r20
 800ab4c:	e009883a 	mov	r4,fp
 800ab50:	d8800415 	stw	r2,16(sp)
 800ab54:	80014500 	call	8001450 <__umodsi3>
 800ab58:	1004943a 	slli	r2,r2,16
 800ab5c:	da000417 	ldw	r8,16(sp)
 800ab60:	bdffffcc 	andi	r23,r23,65535
 800ab64:	b884b03a 	or	r2,r23,r2
 800ab68:	d8c00217 	ldw	r3,8(sp)
 800ab6c:	1200062e 	bgeu	r2,r8,800ab88 <__divdf3+0x424>
 800ab70:	1585883a 	add	r2,r2,r22
 800ab74:	813fffc4 	addi	r4,r16,-1
 800ab78:	15810236 	bltu	r2,r22,800af84 <__divdf3+0x820>
 800ab7c:	1201012e 	bgeu	r2,r8,800af84 <__divdf3+0x820>
 800ab80:	843fff84 	addi	r16,r16,-2
 800ab84:	1585883a 	add	r2,r2,r22
 800ab88:	8822943a 	slli	r17,r17,16
 800ab8c:	d9800017 	ldw	r6,0(sp)
 800ab90:	1211c83a 	sub	r8,r2,r8
 800ab94:	8c22b03a 	or	r17,r17,r16
 800ab98:	373fffcc 	andi	fp,r6,65535
 800ab9c:	8abfffcc 	andi	r10,r17,65535
 800aba0:	8820d43a 	srli	r16,r17,16
 800aba4:	5009883a 	mov	r4,r10
 800aba8:	e00b883a 	mov	r5,fp
 800abac:	302ed43a 	srli	r23,r6,16
 800abb0:	d8c00215 	stw	r3,8(sp)
 800abb4:	da000415 	stw	r8,16(sp)
 800abb8:	da800115 	stw	r10,4(sp)
 800abbc:	80014a80 	call	80014a8 <__mulsi3>
 800abc0:	800b883a 	mov	r5,r16
 800abc4:	e009883a 	mov	r4,fp
 800abc8:	d8800515 	stw	r2,20(sp)
 800abcc:	80014a80 	call	80014a8 <__mulsi3>
 800abd0:	8009883a 	mov	r4,r16
 800abd4:	b80b883a 	mov	r5,r23
 800abd8:	d8800315 	stw	r2,12(sp)
 800abdc:	80014a80 	call	80014a8 <__mulsi3>
 800abe0:	da800117 	ldw	r10,4(sp)
 800abe4:	b80b883a 	mov	r5,r23
 800abe8:	1021883a 	mov	r16,r2
 800abec:	5009883a 	mov	r4,r10
 800abf0:	80014a80 	call	80014a8 <__mulsi3>
 800abf4:	d9c00517 	ldw	r7,20(sp)
 800abf8:	da400317 	ldw	r9,12(sp)
 800abfc:	d8c00217 	ldw	r3,8(sp)
 800ac00:	3808d43a 	srli	r4,r7,16
 800ac04:	1245883a 	add	r2,r2,r9
 800ac08:	da000417 	ldw	r8,16(sp)
 800ac0c:	2085883a 	add	r2,r4,r2
 800ac10:	1240022e 	bgeu	r2,r9,800ac1c <__divdf3+0x4b8>
 800ac14:	01000074 	movhi	r4,1
 800ac18:	8121883a 	add	r16,r16,r4
 800ac1c:	1008d43a 	srli	r4,r2,16
 800ac20:	1004943a 	slli	r2,r2,16
 800ac24:	39ffffcc 	andi	r7,r7,65535
 800ac28:	2409883a 	add	r4,r4,r16
 800ac2c:	11c5883a 	add	r2,r2,r7
 800ac30:	4100bb36 	bltu	r8,r4,800af20 <__divdf3+0x7bc>
 800ac34:	4100d726 	beq	r8,r4,800af94 <__divdf3+0x830>
 800ac38:	4109c83a 	sub	r4,r8,r4
 800ac3c:	a8a1c83a 	sub	r16,r21,r2
 800ac40:	ac2b803a 	cmpltu	r21,r21,r16
 800ac44:	256bc83a 	sub	r21,r4,r21
 800ac48:	b540d926 	beq	r22,r21,800afb0 <__divdf3+0x84c>
 800ac4c:	a00b883a 	mov	r5,r20
 800ac50:	a809883a 	mov	r4,r21
 800ac54:	d8c00215 	stw	r3,8(sp)
 800ac58:	80013ec0 	call	80013ec <__udivsi3>
 800ac5c:	100b883a 	mov	r5,r2
 800ac60:	9009883a 	mov	r4,r18
 800ac64:	d8800515 	stw	r2,20(sp)
 800ac68:	80014a80 	call	80014a8 <__mulsi3>
 800ac6c:	a809883a 	mov	r4,r21
 800ac70:	a00b883a 	mov	r5,r20
 800ac74:	d8800415 	stw	r2,16(sp)
 800ac78:	80014500 	call	8001450 <__umodsi3>
 800ac7c:	1004943a 	slli	r2,r2,16
 800ac80:	8008d43a 	srli	r4,r16,16
 800ac84:	da000417 	ldw	r8,16(sp)
 800ac88:	d8c00217 	ldw	r3,8(sp)
 800ac8c:	2084b03a 	or	r2,r4,r2
 800ac90:	d9c00517 	ldw	r7,20(sp)
 800ac94:	1200062e 	bgeu	r2,r8,800acb0 <__divdf3+0x54c>
 800ac98:	1585883a 	add	r2,r2,r22
 800ac9c:	393fffc4 	addi	r4,r7,-1
 800aca0:	1580c536 	bltu	r2,r22,800afb8 <__divdf3+0x854>
 800aca4:	1200c42e 	bgeu	r2,r8,800afb8 <__divdf3+0x854>
 800aca8:	39ffff84 	addi	r7,r7,-2
 800acac:	1585883a 	add	r2,r2,r22
 800acb0:	122bc83a 	sub	r21,r2,r8
 800acb4:	a00b883a 	mov	r5,r20
 800acb8:	a809883a 	mov	r4,r21
 800acbc:	d8c00215 	stw	r3,8(sp)
 800acc0:	d9c00515 	stw	r7,20(sp)
 800acc4:	80013ec0 	call	80013ec <__udivsi3>
 800acc8:	9009883a 	mov	r4,r18
 800accc:	100b883a 	mov	r5,r2
 800acd0:	d8800415 	stw	r2,16(sp)
 800acd4:	80014a80 	call	80014a8 <__mulsi3>
 800acd8:	a809883a 	mov	r4,r21
 800acdc:	a00b883a 	mov	r5,r20
 800ace0:	1025883a 	mov	r18,r2
 800ace4:	80014500 	call	8001450 <__umodsi3>
 800ace8:	1004943a 	slli	r2,r2,16
 800acec:	813fffcc 	andi	r4,r16,65535
 800acf0:	d8c00217 	ldw	r3,8(sp)
 800acf4:	20a0b03a 	or	r16,r4,r2
 800acf8:	d9c00517 	ldw	r7,20(sp)
 800acfc:	da000417 	ldw	r8,16(sp)
 800ad00:	8480062e 	bgeu	r16,r18,800ad1c <__divdf3+0x5b8>
 800ad04:	85a1883a 	add	r16,r16,r22
 800ad08:	40bfffc4 	addi	r2,r8,-1
 800ad0c:	8580ac36 	bltu	r16,r22,800afc0 <__divdf3+0x85c>
 800ad10:	8480ab2e 	bgeu	r16,r18,800afc0 <__divdf3+0x85c>
 800ad14:	423fff84 	addi	r8,r8,-2
 800ad18:	85a1883a 	add	r16,r16,r22
 800ad1c:	3804943a 	slli	r2,r7,16
 800ad20:	84a1c83a 	sub	r16,r16,r18
 800ad24:	e009883a 	mov	r4,fp
 800ad28:	1228b03a 	or	r20,r2,r8
 800ad2c:	a1ffffcc 	andi	r7,r20,65535
 800ad30:	a024d43a 	srli	r18,r20,16
 800ad34:	380b883a 	mov	r5,r7
 800ad38:	d8c00215 	stw	r3,8(sp)
 800ad3c:	d9c00515 	stw	r7,20(sp)
 800ad40:	80014a80 	call	80014a8 <__mulsi3>
 800ad44:	900b883a 	mov	r5,r18
 800ad48:	e009883a 	mov	r4,fp
 800ad4c:	102b883a 	mov	r21,r2
 800ad50:	80014a80 	call	80014a8 <__mulsi3>
 800ad54:	900b883a 	mov	r5,r18
 800ad58:	b809883a 	mov	r4,r23
 800ad5c:	1039883a 	mov	fp,r2
 800ad60:	80014a80 	call	80014a8 <__mulsi3>
 800ad64:	d9c00517 	ldw	r7,20(sp)
 800ad68:	b80b883a 	mov	r5,r23
 800ad6c:	1025883a 	mov	r18,r2
 800ad70:	3809883a 	mov	r4,r7
 800ad74:	80014a80 	call	80014a8 <__mulsi3>
 800ad78:	a808d43a 	srli	r4,r21,16
 800ad7c:	1705883a 	add	r2,r2,fp
 800ad80:	d8c00217 	ldw	r3,8(sp)
 800ad84:	2085883a 	add	r2,r4,r2
 800ad88:	1700022e 	bgeu	r2,fp,800ad94 <__divdf3+0x630>
 800ad8c:	01000074 	movhi	r4,1
 800ad90:	9125883a 	add	r18,r18,r4
 800ad94:	1008d43a 	srli	r4,r2,16
 800ad98:	1004943a 	slli	r2,r2,16
 800ad9c:	ad7fffcc 	andi	r21,r21,65535
 800ada0:	2489883a 	add	r4,r4,r18
 800ada4:	1545883a 	add	r2,r2,r21
 800ada8:	81003836 	bltu	r16,r4,800ae8c <__divdf3+0x728>
 800adac:	81003626 	beq	r16,r4,800ae88 <__divdf3+0x724>
 800adb0:	a5000054 	ori	r20,r20,1
 800adb4:	1880ffc4 	addi	r2,r3,1023
 800adb8:	00bf2e0e 	bge	zero,r2,800aa74 <__alt_data_end+0xfc00aa74>
 800adbc:	a10001cc 	andi	r4,r20,7
 800adc0:	20000726 	beq	r4,zero,800ade0 <__divdf3+0x67c>
 800adc4:	a10003cc 	andi	r4,r20,15
 800adc8:	01400104 	movi	r5,4
 800adcc:	21400426 	beq	r4,r5,800ade0 <__divdf3+0x67c>
 800add0:	a149883a 	add	r4,r20,r5
 800add4:	2529803a 	cmpltu	r20,r4,r20
 800add8:	8d23883a 	add	r17,r17,r20
 800addc:	2029883a 	mov	r20,r4
 800ade0:	8900402c 	andhi	r4,r17,256
 800ade4:	20000426 	beq	r4,zero,800adf8 <__divdf3+0x694>
 800ade8:	18810004 	addi	r2,r3,1024
 800adec:	00ffc034 	movhi	r3,65280
 800adf0:	18ffffc4 	addi	r3,r3,-1
 800adf4:	88e2703a 	and	r17,r17,r3
 800adf8:	00c1ff84 	movi	r3,2046
 800adfc:	18beb416 	blt	r3,r2,800a8d0 <__alt_data_end+0xfc00a8d0>
 800ae00:	a028d0fa 	srli	r20,r20,3
 800ae04:	882a977a 	slli	r21,r17,29
 800ae08:	8820927a 	slli	r16,r17,9
 800ae0c:	1081ffcc 	andi	r2,r2,2047
 800ae10:	ad2ab03a 	or	r21,r21,r20
 800ae14:	8020d33a 	srli	r16,r16,12
 800ae18:	9900004c 	andi	r4,r19,1
 800ae1c:	003eb006 	br	800a8e0 <__alt_data_end+0xfc00a8e0>
 800ae20:	8080022c 	andhi	r2,r16,8
 800ae24:	10001226 	beq	r2,zero,800ae70 <__divdf3+0x70c>
 800ae28:	8880022c 	andhi	r2,r17,8
 800ae2c:	1000101e 	bne	r2,zero,800ae70 <__divdf3+0x70c>
 800ae30:	00800434 	movhi	r2,16
 800ae34:	8c000234 	orhi	r16,r17,8
 800ae38:	10bfffc4 	addi	r2,r2,-1
 800ae3c:	b809883a 	mov	r4,r23
 800ae40:	80a0703a 	and	r16,r16,r2
 800ae44:	a02b883a 	mov	r21,r20
 800ae48:	003f0806 	br	800aa6c <__alt_data_end+0xfc00aa6c>
 800ae4c:	008000c4 	movi	r2,3
 800ae50:	3880b126 	beq	r7,r2,800b118 <__divdf3+0x9b4>
 800ae54:	00800044 	movi	r2,1
 800ae58:	38805b1e 	bne	r7,r2,800afc8 <__divdf3+0x864>
 800ae5c:	e009883a 	mov	r4,fp
 800ae60:	0005883a 	mov	r2,zero
 800ae64:	0021883a 	mov	r16,zero
 800ae68:	002b883a 	mov	r21,zero
 800ae6c:	003e9c06 	br	800a8e0 <__alt_data_end+0xfc00a8e0>
 800ae70:	00800434 	movhi	r2,16
 800ae74:	84000234 	orhi	r16,r16,8
 800ae78:	10bfffc4 	addi	r2,r2,-1
 800ae7c:	b009883a 	mov	r4,r22
 800ae80:	80a0703a 	and	r16,r16,r2
 800ae84:	003ef906 	br	800aa6c <__alt_data_end+0xfc00aa6c>
 800ae88:	103fca26 	beq	r2,zero,800adb4 <__alt_data_end+0xfc00adb4>
 800ae8c:	b421883a 	add	r16,r22,r16
 800ae90:	a17fffc4 	addi	r5,r20,-1
 800ae94:	8580422e 	bgeu	r16,r22,800afa0 <__divdf3+0x83c>
 800ae98:	2829883a 	mov	r20,r5
 800ae9c:	813fc41e 	bne	r16,r4,800adb0 <__alt_data_end+0xfc00adb0>
 800aea0:	d9800017 	ldw	r6,0(sp)
 800aea4:	30bfc21e 	bne	r6,r2,800adb0 <__alt_data_end+0xfc00adb0>
 800aea8:	003fc206 	br	800adb4 <__alt_data_end+0xfc00adb4>
 800aeac:	143ff604 	addi	r16,r2,-40
 800aeb0:	8c20983a 	sll	r16,r17,r16
 800aeb4:	002b883a 	mov	r21,zero
 800aeb8:	003eb406 	br	800a98c <__alt_data_end+0xfc00a98c>
 800aebc:	d9800215 	stw	r6,8(sp)
 800aec0:	d9c00515 	stw	r7,20(sp)
 800aec4:	da000415 	stw	r8,16(sp)
 800aec8:	800c6f80 	call	800c6f8 <__clzsi2>
 800aecc:	10800804 	addi	r2,r2,32
 800aed0:	da000417 	ldw	r8,16(sp)
 800aed4:	d9c00517 	ldw	r7,20(sp)
 800aed8:	d9800217 	ldw	r6,8(sp)
 800aedc:	003ea106 	br	800a964 <__alt_data_end+0xfc00a964>
 800aee0:	147ff604 	addi	r17,r2,-40
 800aee4:	3462983a 	sll	r17,r6,r17
 800aee8:	0029883a 	mov	r20,zero
 800aeec:	003ec906 	br	800aa14 <__alt_data_end+0xfc00aa14>
 800aef0:	3009883a 	mov	r4,r6
 800aef4:	d9400115 	stw	r5,4(sp)
 800aef8:	d9800215 	stw	r6,8(sp)
 800aefc:	da000415 	stw	r8,16(sp)
 800af00:	da400315 	stw	r9,12(sp)
 800af04:	800c6f80 	call	800c6f8 <__clzsi2>
 800af08:	10800804 	addi	r2,r2,32
 800af0c:	da400317 	ldw	r9,12(sp)
 800af10:	da000417 	ldw	r8,16(sp)
 800af14:	d9800217 	ldw	r6,8(sp)
 800af18:	d9400117 	ldw	r5,4(sp)
 800af1c:	003eb306 	br	800a9ec <__alt_data_end+0xfc00a9ec>
 800af20:	d9800017 	ldw	r6,0(sp)
 800af24:	a9ab883a 	add	r21,r21,r6
 800af28:	a98b803a 	cmpltu	r5,r21,r6
 800af2c:	2d8b883a 	add	r5,r5,r22
 800af30:	2a11883a 	add	r8,r5,r8
 800af34:	897fffc4 	addi	r5,r17,-1
 800af38:	b2000c2e 	bgeu	r22,r8,800af6c <__divdf3+0x808>
 800af3c:	41003f36 	bltu	r8,r4,800b03c <__divdf3+0x8d8>
 800af40:	22006c26 	beq	r4,r8,800b0f4 <__divdf3+0x990>
 800af44:	4109c83a 	sub	r4,r8,r4
 800af48:	2823883a 	mov	r17,r5
 800af4c:	003f3b06 	br	800ac3c <__alt_data_end+0xfc00ac3c>
 800af50:	ad3ed336 	bltu	r21,r20,800aaa0 <__alt_data_end+0xfc00aaa0>
 800af54:	a804d07a 	srli	r2,r21,1
 800af58:	802e97fa 	slli	r23,r16,31
 800af5c:	a82a97fa 	slli	r21,r21,31
 800af60:	8020d07a 	srli	r16,r16,1
 800af64:	b8aeb03a 	or	r23,r23,r2
 800af68:	003ed006 	br	800aaac <__alt_data_end+0xfc00aaac>
 800af6c:	b23ff51e 	bne	r22,r8,800af44 <__alt_data_end+0xfc00af44>
 800af70:	d9800017 	ldw	r6,0(sp)
 800af74:	a9bff12e 	bgeu	r21,r6,800af3c <__alt_data_end+0xfc00af3c>
 800af78:	b109c83a 	sub	r4,r22,r4
 800af7c:	2823883a 	mov	r17,r5
 800af80:	003f2e06 	br	800ac3c <__alt_data_end+0xfc00ac3c>
 800af84:	2021883a 	mov	r16,r4
 800af88:	003eff06 	br	800ab88 <__alt_data_end+0xfc00ab88>
 800af8c:	2023883a 	mov	r17,r4
 800af90:	003ee406 	br	800ab24 <__alt_data_end+0xfc00ab24>
 800af94:	a8bfe236 	bltu	r21,r2,800af20 <__alt_data_end+0xfc00af20>
 800af98:	0009883a 	mov	r4,zero
 800af9c:	003f2706 	br	800ac3c <__alt_data_end+0xfc00ac3c>
 800afa0:	81002d36 	bltu	r16,r4,800b058 <__divdf3+0x8f4>
 800afa4:	24005626 	beq	r4,r16,800b100 <__divdf3+0x99c>
 800afa8:	2829883a 	mov	r20,r5
 800afac:	003f8006 	br	800adb0 <__alt_data_end+0xfc00adb0>
 800afb0:	053fffc4 	movi	r20,-1
 800afb4:	003f7f06 	br	800adb4 <__alt_data_end+0xfc00adb4>
 800afb8:	200f883a 	mov	r7,r4
 800afbc:	003f3c06 	br	800acb0 <__alt_data_end+0xfc00acb0>
 800afc0:	1011883a 	mov	r8,r2
 800afc4:	003f5506 	br	800ad1c <__alt_data_end+0xfc00ad1c>
 800afc8:	e027883a 	mov	r19,fp
 800afcc:	003f7906 	br	800adb4 <__alt_data_end+0xfc00adb4>
 800afd0:	010007c4 	movi	r4,31
 800afd4:	20c02816 	blt	r4,r3,800b078 <__divdf3+0x914>
 800afd8:	00800804 	movi	r2,32
 800afdc:	10c5c83a 	sub	r2,r2,r3
 800afe0:	888a983a 	sll	r5,r17,r2
 800afe4:	a0c8d83a 	srl	r4,r20,r3
 800afe8:	a084983a 	sll	r2,r20,r2
 800afec:	88e2d83a 	srl	r17,r17,r3
 800aff0:	2906b03a 	or	r3,r5,r4
 800aff4:	1004c03a 	cmpne	r2,r2,zero
 800aff8:	1886b03a 	or	r3,r3,r2
 800affc:	188001cc 	andi	r2,r3,7
 800b000:	10000726 	beq	r2,zero,800b020 <__divdf3+0x8bc>
 800b004:	188003cc 	andi	r2,r3,15
 800b008:	01000104 	movi	r4,4
 800b00c:	11000426 	beq	r2,r4,800b020 <__divdf3+0x8bc>
 800b010:	1805883a 	mov	r2,r3
 800b014:	10c00104 	addi	r3,r2,4
 800b018:	1885803a 	cmpltu	r2,r3,r2
 800b01c:	88a3883a 	add	r17,r17,r2
 800b020:	8880202c 	andhi	r2,r17,128
 800b024:	10002926 	beq	r2,zero,800b0cc <__divdf3+0x968>
 800b028:	9900004c 	andi	r4,r19,1
 800b02c:	00800044 	movi	r2,1
 800b030:	0021883a 	mov	r16,zero
 800b034:	002b883a 	mov	r21,zero
 800b038:	003e2906 	br	800a8e0 <__alt_data_end+0xfc00a8e0>
 800b03c:	d9800017 	ldw	r6,0(sp)
 800b040:	8c7fff84 	addi	r17,r17,-2
 800b044:	a9ab883a 	add	r21,r21,r6
 800b048:	a98b803a 	cmpltu	r5,r21,r6
 800b04c:	2d8b883a 	add	r5,r5,r22
 800b050:	2a11883a 	add	r8,r5,r8
 800b054:	003ef806 	br	800ac38 <__alt_data_end+0xfc00ac38>
 800b058:	d9800017 	ldw	r6,0(sp)
 800b05c:	318f883a 	add	r7,r6,r6
 800b060:	398b803a 	cmpltu	r5,r7,r6
 800b064:	2d8d883a 	add	r6,r5,r22
 800b068:	81a1883a 	add	r16,r16,r6
 800b06c:	a17fff84 	addi	r5,r20,-2
 800b070:	d9c00015 	stw	r7,0(sp)
 800b074:	003f8806 	br	800ae98 <__alt_data_end+0xfc00ae98>
 800b078:	013ff844 	movi	r4,-31
 800b07c:	2085c83a 	sub	r2,r4,r2
 800b080:	8888d83a 	srl	r4,r17,r2
 800b084:	00800804 	movi	r2,32
 800b088:	18802126 	beq	r3,r2,800b110 <__divdf3+0x9ac>
 800b08c:	04001004 	movi	r16,64
 800b090:	80c7c83a 	sub	r3,r16,r3
 800b094:	88e0983a 	sll	r16,r17,r3
 800b098:	8504b03a 	or	r2,r16,r20
 800b09c:	1004c03a 	cmpne	r2,r2,zero
 800b0a0:	2084b03a 	or	r2,r4,r2
 800b0a4:	144001cc 	andi	r17,r2,7
 800b0a8:	88000d1e 	bne	r17,zero,800b0e0 <__divdf3+0x97c>
 800b0ac:	0021883a 	mov	r16,zero
 800b0b0:	102ad0fa 	srli	r21,r2,3
 800b0b4:	9900004c 	andi	r4,r19,1
 800b0b8:	0005883a 	mov	r2,zero
 800b0bc:	ac6ab03a 	or	r21,r21,r17
 800b0c0:	003e0706 	br	800a8e0 <__alt_data_end+0xfc00a8e0>
 800b0c4:	1007883a 	mov	r3,r2
 800b0c8:	0023883a 	mov	r17,zero
 800b0cc:	8820927a 	slli	r16,r17,9
 800b0d0:	1805883a 	mov	r2,r3
 800b0d4:	8822977a 	slli	r17,r17,29
 800b0d8:	8020d33a 	srli	r16,r16,12
 800b0dc:	003ff406 	br	800b0b0 <__alt_data_end+0xfc00b0b0>
 800b0e0:	10c003cc 	andi	r3,r2,15
 800b0e4:	01000104 	movi	r4,4
 800b0e8:	193ff626 	beq	r3,r4,800b0c4 <__alt_data_end+0xfc00b0c4>
 800b0ec:	0023883a 	mov	r17,zero
 800b0f0:	003fc806 	br	800b014 <__alt_data_end+0xfc00b014>
 800b0f4:	a8bfd136 	bltu	r21,r2,800b03c <__alt_data_end+0xfc00b03c>
 800b0f8:	2823883a 	mov	r17,r5
 800b0fc:	003fa606 	br	800af98 <__alt_data_end+0xfc00af98>
 800b100:	d9800017 	ldw	r6,0(sp)
 800b104:	30bfd436 	bltu	r6,r2,800b058 <__alt_data_end+0xfc00b058>
 800b108:	2829883a 	mov	r20,r5
 800b10c:	003f6406 	br	800aea0 <__alt_data_end+0xfc00aea0>
 800b110:	0021883a 	mov	r16,zero
 800b114:	003fe006 	br	800b098 <__alt_data_end+0xfc00b098>
 800b118:	00800434 	movhi	r2,16
 800b11c:	8c000234 	orhi	r16,r17,8
 800b120:	10bfffc4 	addi	r2,r2,-1
 800b124:	e009883a 	mov	r4,fp
 800b128:	80a0703a 	and	r16,r16,r2
 800b12c:	a02b883a 	mov	r21,r20
 800b130:	003e4e06 	br	800aa6c <__alt_data_end+0xfc00aa6c>

0800b134 <__eqdf2>:
 800b134:	2804d53a 	srli	r2,r5,20
 800b138:	3806d53a 	srli	r3,r7,20
 800b13c:	02000434 	movhi	r8,16
 800b140:	423fffc4 	addi	r8,r8,-1
 800b144:	1081ffcc 	andi	r2,r2,2047
 800b148:	0281ffc4 	movi	r10,2047
 800b14c:	2a12703a 	and	r9,r5,r8
 800b150:	18c1ffcc 	andi	r3,r3,2047
 800b154:	3a10703a 	and	r8,r7,r8
 800b158:	280ad7fa 	srli	r5,r5,31
 800b15c:	380ed7fa 	srli	r7,r7,31
 800b160:	12801026 	beq	r2,r10,800b1a4 <__eqdf2+0x70>
 800b164:	0281ffc4 	movi	r10,2047
 800b168:	1a800a26 	beq	r3,r10,800b194 <__eqdf2+0x60>
 800b16c:	10c00226 	beq	r2,r3,800b178 <__eqdf2+0x44>
 800b170:	00800044 	movi	r2,1
 800b174:	f800283a 	ret
 800b178:	4a3ffd1e 	bne	r9,r8,800b170 <__alt_data_end+0xfc00b170>
 800b17c:	21bffc1e 	bne	r4,r6,800b170 <__alt_data_end+0xfc00b170>
 800b180:	29c00c26 	beq	r5,r7,800b1b4 <__eqdf2+0x80>
 800b184:	103ffa1e 	bne	r2,zero,800b170 <__alt_data_end+0xfc00b170>
 800b188:	2244b03a 	or	r2,r4,r9
 800b18c:	1004c03a 	cmpne	r2,r2,zero
 800b190:	f800283a 	ret
 800b194:	3214b03a 	or	r10,r6,r8
 800b198:	503ff426 	beq	r10,zero,800b16c <__alt_data_end+0xfc00b16c>
 800b19c:	00800044 	movi	r2,1
 800b1a0:	f800283a 	ret
 800b1a4:	2254b03a 	or	r10,r4,r9
 800b1a8:	503fee26 	beq	r10,zero,800b164 <__alt_data_end+0xfc00b164>
 800b1ac:	00800044 	movi	r2,1
 800b1b0:	f800283a 	ret
 800b1b4:	0005883a 	mov	r2,zero
 800b1b8:	f800283a 	ret

0800b1bc <__gedf2>:
 800b1bc:	2804d53a 	srli	r2,r5,20
 800b1c0:	3806d53a 	srli	r3,r7,20
 800b1c4:	02000434 	movhi	r8,16
 800b1c8:	423fffc4 	addi	r8,r8,-1
 800b1cc:	1081ffcc 	andi	r2,r2,2047
 800b1d0:	0241ffc4 	movi	r9,2047
 800b1d4:	2a14703a 	and	r10,r5,r8
 800b1d8:	18c1ffcc 	andi	r3,r3,2047
 800b1dc:	3a10703a 	and	r8,r7,r8
 800b1e0:	280ad7fa 	srli	r5,r5,31
 800b1e4:	380ed7fa 	srli	r7,r7,31
 800b1e8:	12401d26 	beq	r2,r9,800b260 <__gedf2+0xa4>
 800b1ec:	0241ffc4 	movi	r9,2047
 800b1f0:	1a401226 	beq	r3,r9,800b23c <__gedf2+0x80>
 800b1f4:	1000081e 	bne	r2,zero,800b218 <__gedf2+0x5c>
 800b1f8:	2296b03a 	or	r11,r4,r10
 800b1fc:	5813003a 	cmpeq	r9,r11,zero
 800b200:	1800091e 	bne	r3,zero,800b228 <__gedf2+0x6c>
 800b204:	3218b03a 	or	r12,r6,r8
 800b208:	6000071e 	bne	r12,zero,800b228 <__gedf2+0x6c>
 800b20c:	0005883a 	mov	r2,zero
 800b210:	5800101e 	bne	r11,zero,800b254 <__gedf2+0x98>
 800b214:	f800283a 	ret
 800b218:	18000c1e 	bne	r3,zero,800b24c <__gedf2+0x90>
 800b21c:	3212b03a 	or	r9,r6,r8
 800b220:	48000c26 	beq	r9,zero,800b254 <__gedf2+0x98>
 800b224:	0013883a 	mov	r9,zero
 800b228:	39c03fcc 	andi	r7,r7,255
 800b22c:	48000826 	beq	r9,zero,800b250 <__gedf2+0x94>
 800b230:	38000926 	beq	r7,zero,800b258 <__gedf2+0x9c>
 800b234:	00800044 	movi	r2,1
 800b238:	f800283a 	ret
 800b23c:	3212b03a 	or	r9,r6,r8
 800b240:	483fec26 	beq	r9,zero,800b1f4 <__alt_data_end+0xfc00b1f4>
 800b244:	00bfff84 	movi	r2,-2
 800b248:	f800283a 	ret
 800b24c:	39c03fcc 	andi	r7,r7,255
 800b250:	29c00626 	beq	r5,r7,800b26c <__gedf2+0xb0>
 800b254:	283ff726 	beq	r5,zero,800b234 <__alt_data_end+0xfc00b234>
 800b258:	00bfffc4 	movi	r2,-1
 800b25c:	f800283a 	ret
 800b260:	2292b03a 	or	r9,r4,r10
 800b264:	483fe126 	beq	r9,zero,800b1ec <__alt_data_end+0xfc00b1ec>
 800b268:	003ff606 	br	800b244 <__alt_data_end+0xfc00b244>
 800b26c:	18bff916 	blt	r3,r2,800b254 <__alt_data_end+0xfc00b254>
 800b270:	10c00316 	blt	r2,r3,800b280 <__gedf2+0xc4>
 800b274:	42bff736 	bltu	r8,r10,800b254 <__alt_data_end+0xfc00b254>
 800b278:	52000326 	beq	r10,r8,800b288 <__gedf2+0xcc>
 800b27c:	5200042e 	bgeu	r10,r8,800b290 <__gedf2+0xd4>
 800b280:	283fec1e 	bne	r5,zero,800b234 <__alt_data_end+0xfc00b234>
 800b284:	003ff406 	br	800b258 <__alt_data_end+0xfc00b258>
 800b288:	313ff236 	bltu	r6,r4,800b254 <__alt_data_end+0xfc00b254>
 800b28c:	21bffc36 	bltu	r4,r6,800b280 <__alt_data_end+0xfc00b280>
 800b290:	0005883a 	mov	r2,zero
 800b294:	f800283a 	ret

0800b298 <__ledf2>:
 800b298:	2804d53a 	srli	r2,r5,20
 800b29c:	3810d53a 	srli	r8,r7,20
 800b2a0:	00c00434 	movhi	r3,16
 800b2a4:	18ffffc4 	addi	r3,r3,-1
 800b2a8:	1081ffcc 	andi	r2,r2,2047
 800b2ac:	0241ffc4 	movi	r9,2047
 800b2b0:	28d4703a 	and	r10,r5,r3
 800b2b4:	4201ffcc 	andi	r8,r8,2047
 800b2b8:	38c6703a 	and	r3,r7,r3
 800b2bc:	280ad7fa 	srli	r5,r5,31
 800b2c0:	380ed7fa 	srli	r7,r7,31
 800b2c4:	12401f26 	beq	r2,r9,800b344 <__ledf2+0xac>
 800b2c8:	0241ffc4 	movi	r9,2047
 800b2cc:	42401426 	beq	r8,r9,800b320 <__ledf2+0x88>
 800b2d0:	1000091e 	bne	r2,zero,800b2f8 <__ledf2+0x60>
 800b2d4:	2296b03a 	or	r11,r4,r10
 800b2d8:	5813003a 	cmpeq	r9,r11,zero
 800b2dc:	29403fcc 	andi	r5,r5,255
 800b2e0:	40000a1e 	bne	r8,zero,800b30c <__ledf2+0x74>
 800b2e4:	30d8b03a 	or	r12,r6,r3
 800b2e8:	6000081e 	bne	r12,zero,800b30c <__ledf2+0x74>
 800b2ec:	0005883a 	mov	r2,zero
 800b2f0:	5800111e 	bne	r11,zero,800b338 <__ledf2+0xa0>
 800b2f4:	f800283a 	ret
 800b2f8:	29403fcc 	andi	r5,r5,255
 800b2fc:	40000c1e 	bne	r8,zero,800b330 <__ledf2+0x98>
 800b300:	30d2b03a 	or	r9,r6,r3
 800b304:	48000c26 	beq	r9,zero,800b338 <__ledf2+0xa0>
 800b308:	0013883a 	mov	r9,zero
 800b30c:	39c03fcc 	andi	r7,r7,255
 800b310:	48000826 	beq	r9,zero,800b334 <__ledf2+0x9c>
 800b314:	38001126 	beq	r7,zero,800b35c <__ledf2+0xc4>
 800b318:	00800044 	movi	r2,1
 800b31c:	f800283a 	ret
 800b320:	30d2b03a 	or	r9,r6,r3
 800b324:	483fea26 	beq	r9,zero,800b2d0 <__alt_data_end+0xfc00b2d0>
 800b328:	00800084 	movi	r2,2
 800b32c:	f800283a 	ret
 800b330:	39c03fcc 	andi	r7,r7,255
 800b334:	39400726 	beq	r7,r5,800b354 <__ledf2+0xbc>
 800b338:	2800081e 	bne	r5,zero,800b35c <__ledf2+0xc4>
 800b33c:	00800044 	movi	r2,1
 800b340:	f800283a 	ret
 800b344:	2292b03a 	or	r9,r4,r10
 800b348:	483fdf26 	beq	r9,zero,800b2c8 <__alt_data_end+0xfc00b2c8>
 800b34c:	00800084 	movi	r2,2
 800b350:	f800283a 	ret
 800b354:	4080030e 	bge	r8,r2,800b364 <__ledf2+0xcc>
 800b358:	383fef26 	beq	r7,zero,800b318 <__alt_data_end+0xfc00b318>
 800b35c:	00bfffc4 	movi	r2,-1
 800b360:	f800283a 	ret
 800b364:	123feb16 	blt	r2,r8,800b314 <__alt_data_end+0xfc00b314>
 800b368:	1abff336 	bltu	r3,r10,800b338 <__alt_data_end+0xfc00b338>
 800b36c:	50c00326 	beq	r10,r3,800b37c <__ledf2+0xe4>
 800b370:	50c0042e 	bgeu	r10,r3,800b384 <__ledf2+0xec>
 800b374:	283fe81e 	bne	r5,zero,800b318 <__alt_data_end+0xfc00b318>
 800b378:	003ff806 	br	800b35c <__alt_data_end+0xfc00b35c>
 800b37c:	313fee36 	bltu	r6,r4,800b338 <__alt_data_end+0xfc00b338>
 800b380:	21bffc36 	bltu	r4,r6,800b374 <__alt_data_end+0xfc00b374>
 800b384:	0005883a 	mov	r2,zero
 800b388:	f800283a 	ret

0800b38c <__muldf3>:
 800b38c:	deffee04 	addi	sp,sp,-72
 800b390:	dd000c15 	stw	r20,48(sp)
 800b394:	2828d53a 	srli	r20,r5,20
 800b398:	ddc00f15 	stw	r23,60(sp)
 800b39c:	282ed7fa 	srli	r23,r5,31
 800b3a0:	dc000815 	stw	r16,32(sp)
 800b3a4:	04000434 	movhi	r16,16
 800b3a8:	dcc00b15 	stw	r19,44(sp)
 800b3ac:	843fffc4 	addi	r16,r16,-1
 800b3b0:	dfc01115 	stw	ra,68(sp)
 800b3b4:	df001015 	stw	fp,64(sp)
 800b3b8:	dd800e15 	stw	r22,56(sp)
 800b3bc:	dd400d15 	stw	r21,52(sp)
 800b3c0:	dc800a15 	stw	r18,40(sp)
 800b3c4:	dc400915 	stw	r17,36(sp)
 800b3c8:	a501ffcc 	andi	r20,r20,2047
 800b3cc:	2c20703a 	and	r16,r5,r16
 800b3d0:	b827883a 	mov	r19,r23
 800b3d4:	ba403fcc 	andi	r9,r23,255
 800b3d8:	a0006026 	beq	r20,zero,800b55c <__muldf3+0x1d0>
 800b3dc:	0081ffc4 	movi	r2,2047
 800b3e0:	202d883a 	mov	r22,r4
 800b3e4:	a0803626 	beq	r20,r2,800b4c0 <__muldf3+0x134>
 800b3e8:	84000434 	orhi	r16,r16,16
 800b3ec:	200ad77a 	srli	r5,r4,29
 800b3f0:	800490fa 	slli	r2,r16,3
 800b3f4:	202c90fa 	slli	r22,r4,3
 800b3f8:	a53f0044 	addi	r20,r20,-1023
 800b3fc:	28a0b03a 	or	r16,r5,r2
 800b400:	002b883a 	mov	r21,zero
 800b404:	000b883a 	mov	r5,zero
 800b408:	3804d53a 	srli	r2,r7,20
 800b40c:	3838d7fa 	srli	fp,r7,31
 800b410:	04400434 	movhi	r17,16
 800b414:	8c7fffc4 	addi	r17,r17,-1
 800b418:	1081ffcc 	andi	r2,r2,2047
 800b41c:	3025883a 	mov	r18,r6
 800b420:	3c62703a 	and	r17,r7,r17
 800b424:	e2803fcc 	andi	r10,fp,255
 800b428:	10006d26 	beq	r2,zero,800b5e0 <__muldf3+0x254>
 800b42c:	00c1ffc4 	movi	r3,2047
 800b430:	10c06526 	beq	r2,r3,800b5c8 <__muldf3+0x23c>
 800b434:	8c400434 	orhi	r17,r17,16
 800b438:	300ed77a 	srli	r7,r6,29
 800b43c:	880690fa 	slli	r3,r17,3
 800b440:	302490fa 	slli	r18,r6,3
 800b444:	10bf0044 	addi	r2,r2,-1023
 800b448:	38e2b03a 	or	r17,r7,r3
 800b44c:	000f883a 	mov	r7,zero
 800b450:	a087883a 	add	r3,r20,r2
 800b454:	010003c4 	movi	r4,15
 800b458:	3d44b03a 	or	r2,r7,r21
 800b45c:	e5ccf03a 	xor	r6,fp,r23
 800b460:	1a000044 	addi	r8,r3,1
 800b464:	20809b36 	bltu	r4,r2,800b6d4 <__muldf3+0x348>
 800b468:	100490ba 	slli	r2,r2,2
 800b46c:	01020074 	movhi	r4,2049
 800b470:	212d2004 	addi	r4,r4,-19328
 800b474:	1105883a 	add	r2,r2,r4
 800b478:	10800017 	ldw	r2,0(r2)
 800b47c:	1000683a 	jmp	r2
 800b480:	0800b6d4 	ori	zero,at,731
 800b484:	0800b4e0 	cmpeqi	zero,at,723
 800b488:	0800b4e0 	cmpeqi	zero,at,723
 800b48c:	0800b4dc 	xori	zero,at,723
 800b490:	0800b6b0 	cmpltui	zero,at,730
 800b494:	0800b6b0 	cmpltui	zero,at,730
 800b498:	0800b698 	cmpnei	zero,at,730
 800b49c:	0800b4dc 	xori	zero,at,723
 800b4a0:	0800b6b0 	cmpltui	zero,at,730
 800b4a4:	0800b698 	cmpnei	zero,at,730
 800b4a8:	0800b6b0 	cmpltui	zero,at,730
 800b4ac:	0800b4dc 	xori	zero,at,723
 800b4b0:	0800b6c0 	call	800b6c <__alt_mem_onchip_memory2_0+0x80096c>
 800b4b4:	0800b6c0 	call	800b6c <__alt_mem_onchip_memory2_0+0x80096c>
 800b4b8:	0800b6c0 	call	800b6c <__alt_mem_onchip_memory2_0+0x80096c>
 800b4bc:	0800ba20 	cmpeqi	zero,at,744
 800b4c0:	2404b03a 	or	r2,r4,r16
 800b4c4:	1000711e 	bne	r2,zero,800b68c <__muldf3+0x300>
 800b4c8:	05400204 	movi	r21,8
 800b4cc:	0021883a 	mov	r16,zero
 800b4d0:	002d883a 	mov	r22,zero
 800b4d4:	01400084 	movi	r5,2
 800b4d8:	003fcb06 	br	800b408 <__alt_data_end+0xfc00b408>
 800b4dc:	500d883a 	mov	r6,r10
 800b4e0:	00800084 	movi	r2,2
 800b4e4:	38805926 	beq	r7,r2,800b64c <__muldf3+0x2c0>
 800b4e8:	008000c4 	movi	r2,3
 800b4ec:	3881bb26 	beq	r7,r2,800bbdc <__muldf3+0x850>
 800b4f0:	00800044 	movi	r2,1
 800b4f4:	3881961e 	bne	r7,r2,800bb50 <__muldf3+0x7c4>
 800b4f8:	3027883a 	mov	r19,r6
 800b4fc:	0005883a 	mov	r2,zero
 800b500:	0021883a 	mov	r16,zero
 800b504:	002d883a 	mov	r22,zero
 800b508:	1004953a 	slli	r2,r2,20
 800b50c:	98c03fcc 	andi	r3,r19,255
 800b510:	04400434 	movhi	r17,16
 800b514:	8c7fffc4 	addi	r17,r17,-1
 800b518:	180697fa 	slli	r3,r3,31
 800b51c:	8460703a 	and	r16,r16,r17
 800b520:	80a0b03a 	or	r16,r16,r2
 800b524:	80c6b03a 	or	r3,r16,r3
 800b528:	b005883a 	mov	r2,r22
 800b52c:	dfc01117 	ldw	ra,68(sp)
 800b530:	df001017 	ldw	fp,64(sp)
 800b534:	ddc00f17 	ldw	r23,60(sp)
 800b538:	dd800e17 	ldw	r22,56(sp)
 800b53c:	dd400d17 	ldw	r21,52(sp)
 800b540:	dd000c17 	ldw	r20,48(sp)
 800b544:	dcc00b17 	ldw	r19,44(sp)
 800b548:	dc800a17 	ldw	r18,40(sp)
 800b54c:	dc400917 	ldw	r17,36(sp)
 800b550:	dc000817 	ldw	r16,32(sp)
 800b554:	dec01204 	addi	sp,sp,72
 800b558:	f800283a 	ret
 800b55c:	2404b03a 	or	r2,r4,r16
 800b560:	202b883a 	mov	r21,r4
 800b564:	10004426 	beq	r2,zero,800b678 <__muldf3+0x2ec>
 800b568:	80015126 	beq	r16,zero,800bab0 <__muldf3+0x724>
 800b56c:	8009883a 	mov	r4,r16
 800b570:	d9800715 	stw	r6,28(sp)
 800b574:	d9c00215 	stw	r7,8(sp)
 800b578:	da400415 	stw	r9,16(sp)
 800b57c:	800c6f80 	call	800c6f8 <__clzsi2>
 800b580:	d9800717 	ldw	r6,28(sp)
 800b584:	d9c00217 	ldw	r7,8(sp)
 800b588:	da400417 	ldw	r9,16(sp)
 800b58c:	113ffd44 	addi	r4,r2,-11
 800b590:	00c00704 	movi	r3,28
 800b594:	19014216 	blt	r3,r4,800baa0 <__muldf3+0x714>
 800b598:	00c00744 	movi	r3,29
 800b59c:	15bffe04 	addi	r22,r2,-8
 800b5a0:	1907c83a 	sub	r3,r3,r4
 800b5a4:	85a0983a 	sll	r16,r16,r22
 800b5a8:	a8c6d83a 	srl	r3,r21,r3
 800b5ac:	adac983a 	sll	r22,r21,r22
 800b5b0:	1c20b03a 	or	r16,r3,r16
 800b5b4:	1080fcc4 	addi	r2,r2,1011
 800b5b8:	00a9c83a 	sub	r20,zero,r2
 800b5bc:	002b883a 	mov	r21,zero
 800b5c0:	000b883a 	mov	r5,zero
 800b5c4:	003f9006 	br	800b408 <__alt_data_end+0xfc00b408>
 800b5c8:	3446b03a 	or	r3,r6,r17
 800b5cc:	1800281e 	bne	r3,zero,800b670 <__muldf3+0x2e4>
 800b5d0:	0023883a 	mov	r17,zero
 800b5d4:	0025883a 	mov	r18,zero
 800b5d8:	01c00084 	movi	r7,2
 800b5dc:	003f9c06 	br	800b450 <__alt_data_end+0xfc00b450>
 800b5e0:	3446b03a 	or	r3,r6,r17
 800b5e4:	18001e26 	beq	r3,zero,800b660 <__muldf3+0x2d4>
 800b5e8:	88012126 	beq	r17,zero,800ba70 <__muldf3+0x6e4>
 800b5ec:	8809883a 	mov	r4,r17
 800b5f0:	d9400215 	stw	r5,8(sp)
 800b5f4:	d9800715 	stw	r6,28(sp)
 800b5f8:	da400415 	stw	r9,16(sp)
 800b5fc:	da800315 	stw	r10,12(sp)
 800b600:	800c6f80 	call	800c6f8 <__clzsi2>
 800b604:	d9400217 	ldw	r5,8(sp)
 800b608:	d9800717 	ldw	r6,28(sp)
 800b60c:	da400417 	ldw	r9,16(sp)
 800b610:	da800317 	ldw	r10,12(sp)
 800b614:	113ffd44 	addi	r4,r2,-11
 800b618:	00c00704 	movi	r3,28
 800b61c:	19011016 	blt	r3,r4,800ba60 <__muldf3+0x6d4>
 800b620:	00c00744 	movi	r3,29
 800b624:	14bffe04 	addi	r18,r2,-8
 800b628:	1907c83a 	sub	r3,r3,r4
 800b62c:	8ca2983a 	sll	r17,r17,r18
 800b630:	30c6d83a 	srl	r3,r6,r3
 800b634:	34a4983a 	sll	r18,r6,r18
 800b638:	1c62b03a 	or	r17,r3,r17
 800b63c:	1080fcc4 	addi	r2,r2,1011
 800b640:	0085c83a 	sub	r2,zero,r2
 800b644:	000f883a 	mov	r7,zero
 800b648:	003f8106 	br	800b450 <__alt_data_end+0xfc00b450>
 800b64c:	3027883a 	mov	r19,r6
 800b650:	0081ffc4 	movi	r2,2047
 800b654:	0021883a 	mov	r16,zero
 800b658:	002d883a 	mov	r22,zero
 800b65c:	003faa06 	br	800b508 <__alt_data_end+0xfc00b508>
 800b660:	0023883a 	mov	r17,zero
 800b664:	0025883a 	mov	r18,zero
 800b668:	01c00044 	movi	r7,1
 800b66c:	003f7806 	br	800b450 <__alt_data_end+0xfc00b450>
 800b670:	01c000c4 	movi	r7,3
 800b674:	003f7606 	br	800b450 <__alt_data_end+0xfc00b450>
 800b678:	05400104 	movi	r21,4
 800b67c:	0021883a 	mov	r16,zero
 800b680:	002d883a 	mov	r22,zero
 800b684:	01400044 	movi	r5,1
 800b688:	003f5f06 	br	800b408 <__alt_data_end+0xfc00b408>
 800b68c:	05400304 	movi	r21,12
 800b690:	014000c4 	movi	r5,3
 800b694:	003f5c06 	br	800b408 <__alt_data_end+0xfc00b408>
 800b698:	04000434 	movhi	r16,16
 800b69c:	0027883a 	mov	r19,zero
 800b6a0:	843fffc4 	addi	r16,r16,-1
 800b6a4:	05bfffc4 	movi	r22,-1
 800b6a8:	0081ffc4 	movi	r2,2047
 800b6ac:	003f9606 	br	800b508 <__alt_data_end+0xfc00b508>
 800b6b0:	8023883a 	mov	r17,r16
 800b6b4:	b025883a 	mov	r18,r22
 800b6b8:	280f883a 	mov	r7,r5
 800b6bc:	003f8806 	br	800b4e0 <__alt_data_end+0xfc00b4e0>
 800b6c0:	8023883a 	mov	r17,r16
 800b6c4:	b025883a 	mov	r18,r22
 800b6c8:	480d883a 	mov	r6,r9
 800b6cc:	280f883a 	mov	r7,r5
 800b6d0:	003f8306 	br	800b4e0 <__alt_data_end+0xfc00b4e0>
 800b6d4:	b026d43a 	srli	r19,r22,16
 800b6d8:	902ed43a 	srli	r23,r18,16
 800b6dc:	b5bfffcc 	andi	r22,r22,65535
 800b6e0:	94bfffcc 	andi	r18,r18,65535
 800b6e4:	b00b883a 	mov	r5,r22
 800b6e8:	9009883a 	mov	r4,r18
 800b6ec:	d8c00515 	stw	r3,20(sp)
 800b6f0:	d9800715 	stw	r6,28(sp)
 800b6f4:	da000615 	stw	r8,24(sp)
 800b6f8:	80014a80 	call	80014a8 <__mulsi3>
 800b6fc:	980b883a 	mov	r5,r19
 800b700:	9009883a 	mov	r4,r18
 800b704:	1029883a 	mov	r20,r2
 800b708:	80014a80 	call	80014a8 <__mulsi3>
 800b70c:	b80b883a 	mov	r5,r23
 800b710:	9809883a 	mov	r4,r19
 800b714:	102b883a 	mov	r21,r2
 800b718:	80014a80 	call	80014a8 <__mulsi3>
 800b71c:	b809883a 	mov	r4,r23
 800b720:	b00b883a 	mov	r5,r22
 800b724:	1039883a 	mov	fp,r2
 800b728:	80014a80 	call	80014a8 <__mulsi3>
 800b72c:	a008d43a 	srli	r4,r20,16
 800b730:	1545883a 	add	r2,r2,r21
 800b734:	d8c00517 	ldw	r3,20(sp)
 800b738:	2085883a 	add	r2,r4,r2
 800b73c:	d9800717 	ldw	r6,28(sp)
 800b740:	da000617 	ldw	r8,24(sp)
 800b744:	1540022e 	bgeu	r2,r21,800b750 <__muldf3+0x3c4>
 800b748:	01000074 	movhi	r4,1
 800b74c:	e139883a 	add	fp,fp,r4
 800b750:	100e943a 	slli	r7,r2,16
 800b754:	1004d43a 	srli	r2,r2,16
 800b758:	882ad43a 	srli	r21,r17,16
 800b75c:	a53fffcc 	andi	r20,r20,65535
 800b760:	8c7fffcc 	andi	r17,r17,65535
 800b764:	3d29883a 	add	r20,r7,r20
 800b768:	b00b883a 	mov	r5,r22
 800b76c:	8809883a 	mov	r4,r17
 800b770:	d8c00515 	stw	r3,20(sp)
 800b774:	d9800715 	stw	r6,28(sp)
 800b778:	da000615 	stw	r8,24(sp)
 800b77c:	dd000115 	stw	r20,4(sp)
 800b780:	d8800015 	stw	r2,0(sp)
 800b784:	80014a80 	call	80014a8 <__mulsi3>
 800b788:	980b883a 	mov	r5,r19
 800b78c:	8809883a 	mov	r4,r17
 800b790:	d8800215 	stw	r2,8(sp)
 800b794:	80014a80 	call	80014a8 <__mulsi3>
 800b798:	9809883a 	mov	r4,r19
 800b79c:	a80b883a 	mov	r5,r21
 800b7a0:	1029883a 	mov	r20,r2
 800b7a4:	80014a80 	call	80014a8 <__mulsi3>
 800b7a8:	b00b883a 	mov	r5,r22
 800b7ac:	a809883a 	mov	r4,r21
 800b7b0:	d8800415 	stw	r2,16(sp)
 800b7b4:	80014a80 	call	80014a8 <__mulsi3>
 800b7b8:	d9c00217 	ldw	r7,8(sp)
 800b7bc:	1505883a 	add	r2,r2,r20
 800b7c0:	d8c00517 	ldw	r3,20(sp)
 800b7c4:	3826d43a 	srli	r19,r7,16
 800b7c8:	d9800717 	ldw	r6,28(sp)
 800b7cc:	da000617 	ldw	r8,24(sp)
 800b7d0:	9885883a 	add	r2,r19,r2
 800b7d4:	da400417 	ldw	r9,16(sp)
 800b7d8:	1500022e 	bgeu	r2,r20,800b7e4 <__muldf3+0x458>
 800b7dc:	01000074 	movhi	r4,1
 800b7e0:	4913883a 	add	r9,r9,r4
 800b7e4:	1028d43a 	srli	r20,r2,16
 800b7e8:	1004943a 	slli	r2,r2,16
 800b7ec:	802cd43a 	srli	r22,r16,16
 800b7f0:	843fffcc 	andi	r16,r16,65535
 800b7f4:	3cffffcc 	andi	r19,r7,65535
 800b7f8:	9009883a 	mov	r4,r18
 800b7fc:	800b883a 	mov	r5,r16
 800b800:	a269883a 	add	r20,r20,r9
 800b804:	d8c00515 	stw	r3,20(sp)
 800b808:	d9800715 	stw	r6,28(sp)
 800b80c:	da000615 	stw	r8,24(sp)
 800b810:	14e7883a 	add	r19,r2,r19
 800b814:	80014a80 	call	80014a8 <__mulsi3>
 800b818:	9009883a 	mov	r4,r18
 800b81c:	b00b883a 	mov	r5,r22
 800b820:	d8800315 	stw	r2,12(sp)
 800b824:	80014a80 	call	80014a8 <__mulsi3>
 800b828:	b809883a 	mov	r4,r23
 800b82c:	b00b883a 	mov	r5,r22
 800b830:	d8800215 	stw	r2,8(sp)
 800b834:	80014a80 	call	80014a8 <__mulsi3>
 800b838:	b80b883a 	mov	r5,r23
 800b83c:	8009883a 	mov	r4,r16
 800b840:	d8800415 	stw	r2,16(sp)
 800b844:	80014a80 	call	80014a8 <__mulsi3>
 800b848:	da800317 	ldw	r10,12(sp)
 800b84c:	d9c00217 	ldw	r7,8(sp)
 800b850:	d9000017 	ldw	r4,0(sp)
 800b854:	502ed43a 	srli	r23,r10,16
 800b858:	11c5883a 	add	r2,r2,r7
 800b85c:	24e5883a 	add	r18,r4,r19
 800b860:	b885883a 	add	r2,r23,r2
 800b864:	d8c00517 	ldw	r3,20(sp)
 800b868:	d9800717 	ldw	r6,28(sp)
 800b86c:	da000617 	ldw	r8,24(sp)
 800b870:	da400417 	ldw	r9,16(sp)
 800b874:	11c0022e 	bgeu	r2,r7,800b880 <__muldf3+0x4f4>
 800b878:	01000074 	movhi	r4,1
 800b87c:	4913883a 	add	r9,r9,r4
 800b880:	100ed43a 	srli	r7,r2,16
 800b884:	1004943a 	slli	r2,r2,16
 800b888:	55ffffcc 	andi	r23,r10,65535
 800b88c:	3a53883a 	add	r9,r7,r9
 800b890:	8809883a 	mov	r4,r17
 800b894:	800b883a 	mov	r5,r16
 800b898:	d8c00515 	stw	r3,20(sp)
 800b89c:	d9800715 	stw	r6,28(sp)
 800b8a0:	da000615 	stw	r8,24(sp)
 800b8a4:	da400415 	stw	r9,16(sp)
 800b8a8:	15ef883a 	add	r23,r2,r23
 800b8ac:	80014a80 	call	80014a8 <__mulsi3>
 800b8b0:	8809883a 	mov	r4,r17
 800b8b4:	b00b883a 	mov	r5,r22
 800b8b8:	d8800215 	stw	r2,8(sp)
 800b8bc:	80014a80 	call	80014a8 <__mulsi3>
 800b8c0:	b00b883a 	mov	r5,r22
 800b8c4:	a809883a 	mov	r4,r21
 800b8c8:	d8800315 	stw	r2,12(sp)
 800b8cc:	80014a80 	call	80014a8 <__mulsi3>
 800b8d0:	8009883a 	mov	r4,r16
 800b8d4:	a80b883a 	mov	r5,r21
 800b8d8:	1023883a 	mov	r17,r2
 800b8dc:	80014a80 	call	80014a8 <__mulsi3>
 800b8e0:	d9c00217 	ldw	r7,8(sp)
 800b8e4:	da800317 	ldw	r10,12(sp)
 800b8e8:	d8c00517 	ldw	r3,20(sp)
 800b8ec:	3808d43a 	srli	r4,r7,16
 800b8f0:	1285883a 	add	r2,r2,r10
 800b8f4:	d9800717 	ldw	r6,28(sp)
 800b8f8:	2085883a 	add	r2,r4,r2
 800b8fc:	da000617 	ldw	r8,24(sp)
 800b900:	da400417 	ldw	r9,16(sp)
 800b904:	1280022e 	bgeu	r2,r10,800b910 <__muldf3+0x584>
 800b908:	01000074 	movhi	r4,1
 800b90c:	8923883a 	add	r17,r17,r4
 800b910:	1008943a 	slli	r4,r2,16
 800b914:	39ffffcc 	andi	r7,r7,65535
 800b918:	e4b9883a 	add	fp,fp,r18
 800b91c:	21cf883a 	add	r7,r4,r7
 800b920:	e4e7803a 	cmpltu	r19,fp,r19
 800b924:	3d0f883a 	add	r7,r7,r20
 800b928:	bf39883a 	add	fp,r23,fp
 800b92c:	99c9883a 	add	r4,r19,r7
 800b930:	e5ef803a 	cmpltu	r23,fp,r23
 800b934:	490b883a 	add	r5,r9,r4
 800b938:	1004d43a 	srli	r2,r2,16
 800b93c:	b965883a 	add	r18,r23,r5
 800b940:	24c9803a 	cmpltu	r4,r4,r19
 800b944:	3d29803a 	cmpltu	r20,r7,r20
 800b948:	a128b03a 	or	r20,r20,r4
 800b94c:	95ef803a 	cmpltu	r23,r18,r23
 800b950:	2a53803a 	cmpltu	r9,r5,r9
 800b954:	a0a9883a 	add	r20,r20,r2
 800b958:	4deeb03a 	or	r23,r9,r23
 800b95c:	a5ef883a 	add	r23,r20,r23
 800b960:	bc63883a 	add	r17,r23,r17
 800b964:	e004927a 	slli	r2,fp,9
 800b968:	d9000117 	ldw	r4,4(sp)
 800b96c:	882e927a 	slli	r23,r17,9
 800b970:	9022d5fa 	srli	r17,r18,23
 800b974:	e038d5fa 	srli	fp,fp,23
 800b978:	1104b03a 	or	r2,r2,r4
 800b97c:	9024927a 	slli	r18,r18,9
 800b980:	1004c03a 	cmpne	r2,r2,zero
 800b984:	bc62b03a 	or	r17,r23,r17
 800b988:	1738b03a 	or	fp,r2,fp
 800b98c:	8880402c 	andhi	r2,r17,256
 800b990:	e4a4b03a 	or	r18,fp,r18
 800b994:	10000726 	beq	r2,zero,800b9b4 <__muldf3+0x628>
 800b998:	9006d07a 	srli	r3,r18,1
 800b99c:	880497fa 	slli	r2,r17,31
 800b9a0:	9480004c 	andi	r18,r18,1
 800b9a4:	8822d07a 	srli	r17,r17,1
 800b9a8:	1ca4b03a 	or	r18,r3,r18
 800b9ac:	14a4b03a 	or	r18,r2,r18
 800b9b0:	4007883a 	mov	r3,r8
 800b9b4:	1880ffc4 	addi	r2,r3,1023
 800b9b8:	0080460e 	bge	zero,r2,800bad4 <__muldf3+0x748>
 800b9bc:	910001cc 	andi	r4,r18,7
 800b9c0:	20000726 	beq	r4,zero,800b9e0 <__muldf3+0x654>
 800b9c4:	910003cc 	andi	r4,r18,15
 800b9c8:	01400104 	movi	r5,4
 800b9cc:	21400426 	beq	r4,r5,800b9e0 <__muldf3+0x654>
 800b9d0:	9149883a 	add	r4,r18,r5
 800b9d4:	24a5803a 	cmpltu	r18,r4,r18
 800b9d8:	8ca3883a 	add	r17,r17,r18
 800b9dc:	2025883a 	mov	r18,r4
 800b9e0:	8900402c 	andhi	r4,r17,256
 800b9e4:	20000426 	beq	r4,zero,800b9f8 <__muldf3+0x66c>
 800b9e8:	18810004 	addi	r2,r3,1024
 800b9ec:	00ffc034 	movhi	r3,65280
 800b9f0:	18ffffc4 	addi	r3,r3,-1
 800b9f4:	88e2703a 	and	r17,r17,r3
 800b9f8:	00c1ff84 	movi	r3,2046
 800b9fc:	18bf1316 	blt	r3,r2,800b64c <__alt_data_end+0xfc00b64c>
 800ba00:	882c977a 	slli	r22,r17,29
 800ba04:	9024d0fa 	srli	r18,r18,3
 800ba08:	8822927a 	slli	r17,r17,9
 800ba0c:	1081ffcc 	andi	r2,r2,2047
 800ba10:	b4acb03a 	or	r22,r22,r18
 800ba14:	8820d33a 	srli	r16,r17,12
 800ba18:	3027883a 	mov	r19,r6
 800ba1c:	003eba06 	br	800b508 <__alt_data_end+0xfc00b508>
 800ba20:	8080022c 	andhi	r2,r16,8
 800ba24:	10000926 	beq	r2,zero,800ba4c <__muldf3+0x6c0>
 800ba28:	8880022c 	andhi	r2,r17,8
 800ba2c:	1000071e 	bne	r2,zero,800ba4c <__muldf3+0x6c0>
 800ba30:	00800434 	movhi	r2,16
 800ba34:	8c000234 	orhi	r16,r17,8
 800ba38:	10bfffc4 	addi	r2,r2,-1
 800ba3c:	e027883a 	mov	r19,fp
 800ba40:	80a0703a 	and	r16,r16,r2
 800ba44:	902d883a 	mov	r22,r18
 800ba48:	003f1706 	br	800b6a8 <__alt_data_end+0xfc00b6a8>
 800ba4c:	00800434 	movhi	r2,16
 800ba50:	84000234 	orhi	r16,r16,8
 800ba54:	10bfffc4 	addi	r2,r2,-1
 800ba58:	80a0703a 	and	r16,r16,r2
 800ba5c:	003f1206 	br	800b6a8 <__alt_data_end+0xfc00b6a8>
 800ba60:	147ff604 	addi	r17,r2,-40
 800ba64:	3462983a 	sll	r17,r6,r17
 800ba68:	0025883a 	mov	r18,zero
 800ba6c:	003ef306 	br	800b63c <__alt_data_end+0xfc00b63c>
 800ba70:	3009883a 	mov	r4,r6
 800ba74:	d9400215 	stw	r5,8(sp)
 800ba78:	d9800715 	stw	r6,28(sp)
 800ba7c:	da400415 	stw	r9,16(sp)
 800ba80:	da800315 	stw	r10,12(sp)
 800ba84:	800c6f80 	call	800c6f8 <__clzsi2>
 800ba88:	10800804 	addi	r2,r2,32
 800ba8c:	da800317 	ldw	r10,12(sp)
 800ba90:	da400417 	ldw	r9,16(sp)
 800ba94:	d9800717 	ldw	r6,28(sp)
 800ba98:	d9400217 	ldw	r5,8(sp)
 800ba9c:	003edd06 	br	800b614 <__alt_data_end+0xfc00b614>
 800baa0:	143ff604 	addi	r16,r2,-40
 800baa4:	ac20983a 	sll	r16,r21,r16
 800baa8:	002d883a 	mov	r22,zero
 800baac:	003ec106 	br	800b5b4 <__alt_data_end+0xfc00b5b4>
 800bab0:	d9800715 	stw	r6,28(sp)
 800bab4:	d9c00215 	stw	r7,8(sp)
 800bab8:	da400415 	stw	r9,16(sp)
 800babc:	800c6f80 	call	800c6f8 <__clzsi2>
 800bac0:	10800804 	addi	r2,r2,32
 800bac4:	da400417 	ldw	r9,16(sp)
 800bac8:	d9c00217 	ldw	r7,8(sp)
 800bacc:	d9800717 	ldw	r6,28(sp)
 800bad0:	003eae06 	br	800b58c <__alt_data_end+0xfc00b58c>
 800bad4:	00c00044 	movi	r3,1
 800bad8:	1887c83a 	sub	r3,r3,r2
 800badc:	01000e04 	movi	r4,56
 800bae0:	20fe8516 	blt	r4,r3,800b4f8 <__alt_data_end+0xfc00b4f8>
 800bae4:	010007c4 	movi	r4,31
 800bae8:	20c01b16 	blt	r4,r3,800bb58 <__muldf3+0x7cc>
 800baec:	00800804 	movi	r2,32
 800baf0:	10c5c83a 	sub	r2,r2,r3
 800baf4:	888a983a 	sll	r5,r17,r2
 800baf8:	90c8d83a 	srl	r4,r18,r3
 800bafc:	9084983a 	sll	r2,r18,r2
 800bb00:	88e2d83a 	srl	r17,r17,r3
 800bb04:	2906b03a 	or	r3,r5,r4
 800bb08:	1004c03a 	cmpne	r2,r2,zero
 800bb0c:	1886b03a 	or	r3,r3,r2
 800bb10:	188001cc 	andi	r2,r3,7
 800bb14:	10000726 	beq	r2,zero,800bb34 <__muldf3+0x7a8>
 800bb18:	188003cc 	andi	r2,r3,15
 800bb1c:	01000104 	movi	r4,4
 800bb20:	11000426 	beq	r2,r4,800bb34 <__muldf3+0x7a8>
 800bb24:	1805883a 	mov	r2,r3
 800bb28:	10c00104 	addi	r3,r2,4
 800bb2c:	1885803a 	cmpltu	r2,r3,r2
 800bb30:	88a3883a 	add	r17,r17,r2
 800bb34:	8880202c 	andhi	r2,r17,128
 800bb38:	10001c26 	beq	r2,zero,800bbac <__muldf3+0x820>
 800bb3c:	3027883a 	mov	r19,r6
 800bb40:	00800044 	movi	r2,1
 800bb44:	0021883a 	mov	r16,zero
 800bb48:	002d883a 	mov	r22,zero
 800bb4c:	003e6e06 	br	800b508 <__alt_data_end+0xfc00b508>
 800bb50:	4007883a 	mov	r3,r8
 800bb54:	003f9706 	br	800b9b4 <__alt_data_end+0xfc00b9b4>
 800bb58:	017ff844 	movi	r5,-31
 800bb5c:	2885c83a 	sub	r2,r5,r2
 800bb60:	888ad83a 	srl	r5,r17,r2
 800bb64:	00800804 	movi	r2,32
 800bb68:	18801a26 	beq	r3,r2,800bbd4 <__muldf3+0x848>
 800bb6c:	01001004 	movi	r4,64
 800bb70:	20c7c83a 	sub	r3,r4,r3
 800bb74:	88e2983a 	sll	r17,r17,r3
 800bb78:	8ca4b03a 	or	r18,r17,r18
 800bb7c:	9004c03a 	cmpne	r2,r18,zero
 800bb80:	2884b03a 	or	r2,r5,r2
 800bb84:	144001cc 	andi	r17,r2,7
 800bb88:	88000d1e 	bne	r17,zero,800bbc0 <__muldf3+0x834>
 800bb8c:	0021883a 	mov	r16,zero
 800bb90:	102cd0fa 	srli	r22,r2,3
 800bb94:	3027883a 	mov	r19,r6
 800bb98:	0005883a 	mov	r2,zero
 800bb9c:	b46cb03a 	or	r22,r22,r17
 800bba0:	003e5906 	br	800b508 <__alt_data_end+0xfc00b508>
 800bba4:	1007883a 	mov	r3,r2
 800bba8:	0023883a 	mov	r17,zero
 800bbac:	8820927a 	slli	r16,r17,9
 800bbb0:	1805883a 	mov	r2,r3
 800bbb4:	8822977a 	slli	r17,r17,29
 800bbb8:	8020d33a 	srli	r16,r16,12
 800bbbc:	003ff406 	br	800bb90 <__alt_data_end+0xfc00bb90>
 800bbc0:	10c003cc 	andi	r3,r2,15
 800bbc4:	01000104 	movi	r4,4
 800bbc8:	193ff626 	beq	r3,r4,800bba4 <__alt_data_end+0xfc00bba4>
 800bbcc:	0023883a 	mov	r17,zero
 800bbd0:	003fd506 	br	800bb28 <__alt_data_end+0xfc00bb28>
 800bbd4:	0023883a 	mov	r17,zero
 800bbd8:	003fe706 	br	800bb78 <__alt_data_end+0xfc00bb78>
 800bbdc:	00800434 	movhi	r2,16
 800bbe0:	8c000234 	orhi	r16,r17,8
 800bbe4:	10bfffc4 	addi	r2,r2,-1
 800bbe8:	3027883a 	mov	r19,r6
 800bbec:	80a0703a 	and	r16,r16,r2
 800bbf0:	902d883a 	mov	r22,r18
 800bbf4:	003eac06 	br	800b6a8 <__alt_data_end+0xfc00b6a8>

0800bbf8 <__subdf3>:
 800bbf8:	02000434 	movhi	r8,16
 800bbfc:	423fffc4 	addi	r8,r8,-1
 800bc00:	defffb04 	addi	sp,sp,-20
 800bc04:	2a14703a 	and	r10,r5,r8
 800bc08:	3812d53a 	srli	r9,r7,20
 800bc0c:	3a10703a 	and	r8,r7,r8
 800bc10:	2006d77a 	srli	r3,r4,29
 800bc14:	3004d77a 	srli	r2,r6,29
 800bc18:	dc000015 	stw	r16,0(sp)
 800bc1c:	501490fa 	slli	r10,r10,3
 800bc20:	2820d53a 	srli	r16,r5,20
 800bc24:	401090fa 	slli	r8,r8,3
 800bc28:	dc800215 	stw	r18,8(sp)
 800bc2c:	dc400115 	stw	r17,4(sp)
 800bc30:	dfc00415 	stw	ra,16(sp)
 800bc34:	202290fa 	slli	r17,r4,3
 800bc38:	dcc00315 	stw	r19,12(sp)
 800bc3c:	4a41ffcc 	andi	r9,r9,2047
 800bc40:	0101ffc4 	movi	r4,2047
 800bc44:	2824d7fa 	srli	r18,r5,31
 800bc48:	8401ffcc 	andi	r16,r16,2047
 800bc4c:	50c6b03a 	or	r3,r10,r3
 800bc50:	380ed7fa 	srli	r7,r7,31
 800bc54:	408ab03a 	or	r5,r8,r2
 800bc58:	300c90fa 	slli	r6,r6,3
 800bc5c:	49009626 	beq	r9,r4,800beb8 <__subdf3+0x2c0>
 800bc60:	39c0005c 	xori	r7,r7,1
 800bc64:	8245c83a 	sub	r2,r16,r9
 800bc68:	3c807426 	beq	r7,r18,800be3c <__subdf3+0x244>
 800bc6c:	0080af0e 	bge	zero,r2,800bf2c <__subdf3+0x334>
 800bc70:	48002a1e 	bne	r9,zero,800bd1c <__subdf3+0x124>
 800bc74:	2988b03a 	or	r4,r5,r6
 800bc78:	20009a1e 	bne	r4,zero,800bee4 <__subdf3+0x2ec>
 800bc7c:	888001cc 	andi	r2,r17,7
 800bc80:	10000726 	beq	r2,zero,800bca0 <__subdf3+0xa8>
 800bc84:	888003cc 	andi	r2,r17,15
 800bc88:	01000104 	movi	r4,4
 800bc8c:	11000426 	beq	r2,r4,800bca0 <__subdf3+0xa8>
 800bc90:	890b883a 	add	r5,r17,r4
 800bc94:	2c63803a 	cmpltu	r17,r5,r17
 800bc98:	1c47883a 	add	r3,r3,r17
 800bc9c:	2823883a 	mov	r17,r5
 800bca0:	1880202c 	andhi	r2,r3,128
 800bca4:	10005926 	beq	r2,zero,800be0c <__subdf3+0x214>
 800bca8:	84000044 	addi	r16,r16,1
 800bcac:	0081ffc4 	movi	r2,2047
 800bcb0:	8080be26 	beq	r16,r2,800bfac <__subdf3+0x3b4>
 800bcb4:	017fe034 	movhi	r5,65408
 800bcb8:	297fffc4 	addi	r5,r5,-1
 800bcbc:	1946703a 	and	r3,r3,r5
 800bcc0:	1804977a 	slli	r2,r3,29
 800bcc4:	1806927a 	slli	r3,r3,9
 800bcc8:	8822d0fa 	srli	r17,r17,3
 800bccc:	8401ffcc 	andi	r16,r16,2047
 800bcd0:	180ad33a 	srli	r5,r3,12
 800bcd4:	9100004c 	andi	r4,r18,1
 800bcd8:	1444b03a 	or	r2,r2,r17
 800bcdc:	80c1ffcc 	andi	r3,r16,2047
 800bce0:	1820953a 	slli	r16,r3,20
 800bce4:	20c03fcc 	andi	r3,r4,255
 800bce8:	180897fa 	slli	r4,r3,31
 800bcec:	00c00434 	movhi	r3,16
 800bcf0:	18ffffc4 	addi	r3,r3,-1
 800bcf4:	28c6703a 	and	r3,r5,r3
 800bcf8:	1c06b03a 	or	r3,r3,r16
 800bcfc:	1906b03a 	or	r3,r3,r4
 800bd00:	dfc00417 	ldw	ra,16(sp)
 800bd04:	dcc00317 	ldw	r19,12(sp)
 800bd08:	dc800217 	ldw	r18,8(sp)
 800bd0c:	dc400117 	ldw	r17,4(sp)
 800bd10:	dc000017 	ldw	r16,0(sp)
 800bd14:	dec00504 	addi	sp,sp,20
 800bd18:	f800283a 	ret
 800bd1c:	0101ffc4 	movi	r4,2047
 800bd20:	813fd626 	beq	r16,r4,800bc7c <__alt_data_end+0xfc00bc7c>
 800bd24:	29402034 	orhi	r5,r5,128
 800bd28:	01000e04 	movi	r4,56
 800bd2c:	2080a316 	blt	r4,r2,800bfbc <__subdf3+0x3c4>
 800bd30:	010007c4 	movi	r4,31
 800bd34:	2080c616 	blt	r4,r2,800c050 <__subdf3+0x458>
 800bd38:	01000804 	movi	r4,32
 800bd3c:	2089c83a 	sub	r4,r4,r2
 800bd40:	2910983a 	sll	r8,r5,r4
 800bd44:	308ed83a 	srl	r7,r6,r2
 800bd48:	3108983a 	sll	r4,r6,r4
 800bd4c:	2884d83a 	srl	r2,r5,r2
 800bd50:	41ccb03a 	or	r6,r8,r7
 800bd54:	2008c03a 	cmpne	r4,r4,zero
 800bd58:	310cb03a 	or	r6,r6,r4
 800bd5c:	898dc83a 	sub	r6,r17,r6
 800bd60:	89a3803a 	cmpltu	r17,r17,r6
 800bd64:	1887c83a 	sub	r3,r3,r2
 800bd68:	1c47c83a 	sub	r3,r3,r17
 800bd6c:	3023883a 	mov	r17,r6
 800bd70:	1880202c 	andhi	r2,r3,128
 800bd74:	10002326 	beq	r2,zero,800be04 <__subdf3+0x20c>
 800bd78:	04c02034 	movhi	r19,128
 800bd7c:	9cffffc4 	addi	r19,r19,-1
 800bd80:	1ce6703a 	and	r19,r3,r19
 800bd84:	98007a26 	beq	r19,zero,800bf70 <__subdf3+0x378>
 800bd88:	9809883a 	mov	r4,r19
 800bd8c:	800c6f80 	call	800c6f8 <__clzsi2>
 800bd90:	113ffe04 	addi	r4,r2,-8
 800bd94:	00c007c4 	movi	r3,31
 800bd98:	19007b16 	blt	r3,r4,800bf88 <__subdf3+0x390>
 800bd9c:	00800804 	movi	r2,32
 800bda0:	1105c83a 	sub	r2,r2,r4
 800bda4:	8884d83a 	srl	r2,r17,r2
 800bda8:	9906983a 	sll	r3,r19,r4
 800bdac:	8922983a 	sll	r17,r17,r4
 800bdb0:	10c4b03a 	or	r2,r2,r3
 800bdb4:	24007816 	blt	r4,r16,800bf98 <__subdf3+0x3a0>
 800bdb8:	2421c83a 	sub	r16,r4,r16
 800bdbc:	80c00044 	addi	r3,r16,1
 800bdc0:	010007c4 	movi	r4,31
 800bdc4:	20c09516 	blt	r4,r3,800c01c <__subdf3+0x424>
 800bdc8:	01400804 	movi	r5,32
 800bdcc:	28cbc83a 	sub	r5,r5,r3
 800bdd0:	88c8d83a 	srl	r4,r17,r3
 800bdd4:	8962983a 	sll	r17,r17,r5
 800bdd8:	114a983a 	sll	r5,r2,r5
 800bddc:	10c6d83a 	srl	r3,r2,r3
 800bde0:	8804c03a 	cmpne	r2,r17,zero
 800bde4:	290ab03a 	or	r5,r5,r4
 800bde8:	28a2b03a 	or	r17,r5,r2
 800bdec:	0021883a 	mov	r16,zero
 800bdf0:	003fa206 	br	800bc7c <__alt_data_end+0xfc00bc7c>
 800bdf4:	2090b03a 	or	r8,r4,r2
 800bdf8:	40018e26 	beq	r8,zero,800c434 <__subdf3+0x83c>
 800bdfc:	1007883a 	mov	r3,r2
 800be00:	2023883a 	mov	r17,r4
 800be04:	888001cc 	andi	r2,r17,7
 800be08:	103f9e1e 	bne	r2,zero,800bc84 <__alt_data_end+0xfc00bc84>
 800be0c:	1804977a 	slli	r2,r3,29
 800be10:	8822d0fa 	srli	r17,r17,3
 800be14:	1810d0fa 	srli	r8,r3,3
 800be18:	9100004c 	andi	r4,r18,1
 800be1c:	1444b03a 	or	r2,r2,r17
 800be20:	00c1ffc4 	movi	r3,2047
 800be24:	80c02826 	beq	r16,r3,800bec8 <__subdf3+0x2d0>
 800be28:	01400434 	movhi	r5,16
 800be2c:	297fffc4 	addi	r5,r5,-1
 800be30:	80e0703a 	and	r16,r16,r3
 800be34:	414a703a 	and	r5,r8,r5
 800be38:	003fa806 	br	800bcdc <__alt_data_end+0xfc00bcdc>
 800be3c:	0080630e 	bge	zero,r2,800bfcc <__subdf3+0x3d4>
 800be40:	48003026 	beq	r9,zero,800bf04 <__subdf3+0x30c>
 800be44:	0101ffc4 	movi	r4,2047
 800be48:	813f8c26 	beq	r16,r4,800bc7c <__alt_data_end+0xfc00bc7c>
 800be4c:	29402034 	orhi	r5,r5,128
 800be50:	01000e04 	movi	r4,56
 800be54:	2080a90e 	bge	r4,r2,800c0fc <__subdf3+0x504>
 800be58:	298cb03a 	or	r6,r5,r6
 800be5c:	3012c03a 	cmpne	r9,r6,zero
 800be60:	0005883a 	mov	r2,zero
 800be64:	4c53883a 	add	r9,r9,r17
 800be68:	4c63803a 	cmpltu	r17,r9,r17
 800be6c:	10c7883a 	add	r3,r2,r3
 800be70:	88c7883a 	add	r3,r17,r3
 800be74:	4823883a 	mov	r17,r9
 800be78:	1880202c 	andhi	r2,r3,128
 800be7c:	1000d026 	beq	r2,zero,800c1c0 <__subdf3+0x5c8>
 800be80:	84000044 	addi	r16,r16,1
 800be84:	0081ffc4 	movi	r2,2047
 800be88:	8080fe26 	beq	r16,r2,800c284 <__subdf3+0x68c>
 800be8c:	00bfe034 	movhi	r2,65408
 800be90:	10bfffc4 	addi	r2,r2,-1
 800be94:	1886703a 	and	r3,r3,r2
 800be98:	880ad07a 	srli	r5,r17,1
 800be9c:	180497fa 	slli	r2,r3,31
 800bea0:	8900004c 	andi	r4,r17,1
 800bea4:	2922b03a 	or	r17,r5,r4
 800bea8:	1806d07a 	srli	r3,r3,1
 800beac:	1462b03a 	or	r17,r2,r17
 800beb0:	3825883a 	mov	r18,r7
 800beb4:	003f7106 	br	800bc7c <__alt_data_end+0xfc00bc7c>
 800beb8:	2984b03a 	or	r2,r5,r6
 800bebc:	103f6826 	beq	r2,zero,800bc60 <__alt_data_end+0xfc00bc60>
 800bec0:	39c03fcc 	andi	r7,r7,255
 800bec4:	003f6706 	br	800bc64 <__alt_data_end+0xfc00bc64>
 800bec8:	4086b03a 	or	r3,r8,r2
 800becc:	18015226 	beq	r3,zero,800c418 <__subdf3+0x820>
 800bed0:	00c00434 	movhi	r3,16
 800bed4:	41400234 	orhi	r5,r8,8
 800bed8:	18ffffc4 	addi	r3,r3,-1
 800bedc:	28ca703a 	and	r5,r5,r3
 800bee0:	003f7e06 	br	800bcdc <__alt_data_end+0xfc00bcdc>
 800bee4:	10bfffc4 	addi	r2,r2,-1
 800bee8:	1000491e 	bne	r2,zero,800c010 <__subdf3+0x418>
 800beec:	898fc83a 	sub	r7,r17,r6
 800bef0:	89e3803a 	cmpltu	r17,r17,r7
 800bef4:	1947c83a 	sub	r3,r3,r5
 800bef8:	1c47c83a 	sub	r3,r3,r17
 800befc:	3823883a 	mov	r17,r7
 800bf00:	003f9b06 	br	800bd70 <__alt_data_end+0xfc00bd70>
 800bf04:	2988b03a 	or	r4,r5,r6
 800bf08:	203f5c26 	beq	r4,zero,800bc7c <__alt_data_end+0xfc00bc7c>
 800bf0c:	10bfffc4 	addi	r2,r2,-1
 800bf10:	1000931e 	bne	r2,zero,800c160 <__subdf3+0x568>
 800bf14:	898d883a 	add	r6,r17,r6
 800bf18:	3463803a 	cmpltu	r17,r6,r17
 800bf1c:	1947883a 	add	r3,r3,r5
 800bf20:	88c7883a 	add	r3,r17,r3
 800bf24:	3023883a 	mov	r17,r6
 800bf28:	003fd306 	br	800be78 <__alt_data_end+0xfc00be78>
 800bf2c:	1000541e 	bne	r2,zero,800c080 <__subdf3+0x488>
 800bf30:	80800044 	addi	r2,r16,1
 800bf34:	1081ffcc 	andi	r2,r2,2047
 800bf38:	01000044 	movi	r4,1
 800bf3c:	2080a20e 	bge	r4,r2,800c1c8 <__subdf3+0x5d0>
 800bf40:	8989c83a 	sub	r4,r17,r6
 800bf44:	8905803a 	cmpltu	r2,r17,r4
 800bf48:	1967c83a 	sub	r19,r3,r5
 800bf4c:	98a7c83a 	sub	r19,r19,r2
 800bf50:	9880202c 	andhi	r2,r19,128
 800bf54:	10006326 	beq	r2,zero,800c0e4 <__subdf3+0x4ec>
 800bf58:	3463c83a 	sub	r17,r6,r17
 800bf5c:	28c7c83a 	sub	r3,r5,r3
 800bf60:	344d803a 	cmpltu	r6,r6,r17
 800bf64:	19a7c83a 	sub	r19,r3,r6
 800bf68:	3825883a 	mov	r18,r7
 800bf6c:	983f861e 	bne	r19,zero,800bd88 <__alt_data_end+0xfc00bd88>
 800bf70:	8809883a 	mov	r4,r17
 800bf74:	800c6f80 	call	800c6f8 <__clzsi2>
 800bf78:	10800804 	addi	r2,r2,32
 800bf7c:	113ffe04 	addi	r4,r2,-8
 800bf80:	00c007c4 	movi	r3,31
 800bf84:	193f850e 	bge	r3,r4,800bd9c <__alt_data_end+0xfc00bd9c>
 800bf88:	10bff604 	addi	r2,r2,-40
 800bf8c:	8884983a 	sll	r2,r17,r2
 800bf90:	0023883a 	mov	r17,zero
 800bf94:	243f880e 	bge	r4,r16,800bdb8 <__alt_data_end+0xfc00bdb8>
 800bf98:	00ffe034 	movhi	r3,65408
 800bf9c:	18ffffc4 	addi	r3,r3,-1
 800bfa0:	8121c83a 	sub	r16,r16,r4
 800bfa4:	10c6703a 	and	r3,r2,r3
 800bfa8:	003f3406 	br	800bc7c <__alt_data_end+0xfc00bc7c>
 800bfac:	9100004c 	andi	r4,r18,1
 800bfb0:	000b883a 	mov	r5,zero
 800bfb4:	0005883a 	mov	r2,zero
 800bfb8:	003f4806 	br	800bcdc <__alt_data_end+0xfc00bcdc>
 800bfbc:	298cb03a 	or	r6,r5,r6
 800bfc0:	300cc03a 	cmpne	r6,r6,zero
 800bfc4:	0005883a 	mov	r2,zero
 800bfc8:	003f6406 	br	800bd5c <__alt_data_end+0xfc00bd5c>
 800bfcc:	10009a1e 	bne	r2,zero,800c238 <__subdf3+0x640>
 800bfd0:	82400044 	addi	r9,r16,1
 800bfd4:	4881ffcc 	andi	r2,r9,2047
 800bfd8:	02800044 	movi	r10,1
 800bfdc:	5080670e 	bge	r10,r2,800c17c <__subdf3+0x584>
 800bfe0:	0081ffc4 	movi	r2,2047
 800bfe4:	4880af26 	beq	r9,r2,800c2a4 <__subdf3+0x6ac>
 800bfe8:	898d883a 	add	r6,r17,r6
 800bfec:	1945883a 	add	r2,r3,r5
 800bff0:	3447803a 	cmpltu	r3,r6,r17
 800bff4:	1887883a 	add	r3,r3,r2
 800bff8:	182297fa 	slli	r17,r3,31
 800bffc:	300cd07a 	srli	r6,r6,1
 800c000:	1806d07a 	srli	r3,r3,1
 800c004:	4821883a 	mov	r16,r9
 800c008:	89a2b03a 	or	r17,r17,r6
 800c00c:	003f1b06 	br	800bc7c <__alt_data_end+0xfc00bc7c>
 800c010:	0101ffc4 	movi	r4,2047
 800c014:	813f441e 	bne	r16,r4,800bd28 <__alt_data_end+0xfc00bd28>
 800c018:	003f1806 	br	800bc7c <__alt_data_end+0xfc00bc7c>
 800c01c:	843ff844 	addi	r16,r16,-31
 800c020:	01400804 	movi	r5,32
 800c024:	1408d83a 	srl	r4,r2,r16
 800c028:	19405026 	beq	r3,r5,800c16c <__subdf3+0x574>
 800c02c:	01401004 	movi	r5,64
 800c030:	28c7c83a 	sub	r3,r5,r3
 800c034:	10c4983a 	sll	r2,r2,r3
 800c038:	88a2b03a 	or	r17,r17,r2
 800c03c:	8822c03a 	cmpne	r17,r17,zero
 800c040:	2462b03a 	or	r17,r4,r17
 800c044:	0007883a 	mov	r3,zero
 800c048:	0021883a 	mov	r16,zero
 800c04c:	003f6d06 	br	800be04 <__alt_data_end+0xfc00be04>
 800c050:	11fff804 	addi	r7,r2,-32
 800c054:	01000804 	movi	r4,32
 800c058:	29ced83a 	srl	r7,r5,r7
 800c05c:	11004526 	beq	r2,r4,800c174 <__subdf3+0x57c>
 800c060:	01001004 	movi	r4,64
 800c064:	2089c83a 	sub	r4,r4,r2
 800c068:	2904983a 	sll	r2,r5,r4
 800c06c:	118cb03a 	or	r6,r2,r6
 800c070:	300cc03a 	cmpne	r6,r6,zero
 800c074:	398cb03a 	or	r6,r7,r6
 800c078:	0005883a 	mov	r2,zero
 800c07c:	003f3706 	br	800bd5c <__alt_data_end+0xfc00bd5c>
 800c080:	80002a26 	beq	r16,zero,800c12c <__subdf3+0x534>
 800c084:	0101ffc4 	movi	r4,2047
 800c088:	49006626 	beq	r9,r4,800c224 <__subdf3+0x62c>
 800c08c:	0085c83a 	sub	r2,zero,r2
 800c090:	18c02034 	orhi	r3,r3,128
 800c094:	01000e04 	movi	r4,56
 800c098:	20807e16 	blt	r4,r2,800c294 <__subdf3+0x69c>
 800c09c:	010007c4 	movi	r4,31
 800c0a0:	2080e716 	blt	r4,r2,800c440 <__subdf3+0x848>
 800c0a4:	01000804 	movi	r4,32
 800c0a8:	2089c83a 	sub	r4,r4,r2
 800c0ac:	1914983a 	sll	r10,r3,r4
 800c0b0:	8890d83a 	srl	r8,r17,r2
 800c0b4:	8908983a 	sll	r4,r17,r4
 800c0b8:	1884d83a 	srl	r2,r3,r2
 800c0bc:	5222b03a 	or	r17,r10,r8
 800c0c0:	2006c03a 	cmpne	r3,r4,zero
 800c0c4:	88e2b03a 	or	r17,r17,r3
 800c0c8:	3463c83a 	sub	r17,r6,r17
 800c0cc:	2885c83a 	sub	r2,r5,r2
 800c0d0:	344d803a 	cmpltu	r6,r6,r17
 800c0d4:	1187c83a 	sub	r3,r2,r6
 800c0d8:	4821883a 	mov	r16,r9
 800c0dc:	3825883a 	mov	r18,r7
 800c0e0:	003f2306 	br	800bd70 <__alt_data_end+0xfc00bd70>
 800c0e4:	24d0b03a 	or	r8,r4,r19
 800c0e8:	40001b1e 	bne	r8,zero,800c158 <__subdf3+0x560>
 800c0ec:	0005883a 	mov	r2,zero
 800c0f0:	0009883a 	mov	r4,zero
 800c0f4:	0021883a 	mov	r16,zero
 800c0f8:	003f4906 	br	800be20 <__alt_data_end+0xfc00be20>
 800c0fc:	010007c4 	movi	r4,31
 800c100:	20803a16 	blt	r4,r2,800c1ec <__subdf3+0x5f4>
 800c104:	01000804 	movi	r4,32
 800c108:	2089c83a 	sub	r4,r4,r2
 800c10c:	2912983a 	sll	r9,r5,r4
 800c110:	3090d83a 	srl	r8,r6,r2
 800c114:	3108983a 	sll	r4,r6,r4
 800c118:	2884d83a 	srl	r2,r5,r2
 800c11c:	4a12b03a 	or	r9,r9,r8
 800c120:	2008c03a 	cmpne	r4,r4,zero
 800c124:	4912b03a 	or	r9,r9,r4
 800c128:	003f4e06 	br	800be64 <__alt_data_end+0xfc00be64>
 800c12c:	1c48b03a 	or	r4,r3,r17
 800c130:	20003c26 	beq	r4,zero,800c224 <__subdf3+0x62c>
 800c134:	0084303a 	nor	r2,zero,r2
 800c138:	1000381e 	bne	r2,zero,800c21c <__subdf3+0x624>
 800c13c:	3463c83a 	sub	r17,r6,r17
 800c140:	28c5c83a 	sub	r2,r5,r3
 800c144:	344d803a 	cmpltu	r6,r6,r17
 800c148:	1187c83a 	sub	r3,r2,r6
 800c14c:	4821883a 	mov	r16,r9
 800c150:	3825883a 	mov	r18,r7
 800c154:	003f0606 	br	800bd70 <__alt_data_end+0xfc00bd70>
 800c158:	2023883a 	mov	r17,r4
 800c15c:	003f0906 	br	800bd84 <__alt_data_end+0xfc00bd84>
 800c160:	0101ffc4 	movi	r4,2047
 800c164:	813f3a1e 	bne	r16,r4,800be50 <__alt_data_end+0xfc00be50>
 800c168:	003ec406 	br	800bc7c <__alt_data_end+0xfc00bc7c>
 800c16c:	0005883a 	mov	r2,zero
 800c170:	003fb106 	br	800c038 <__alt_data_end+0xfc00c038>
 800c174:	0005883a 	mov	r2,zero
 800c178:	003fbc06 	br	800c06c <__alt_data_end+0xfc00c06c>
 800c17c:	1c44b03a 	or	r2,r3,r17
 800c180:	80008e1e 	bne	r16,zero,800c3bc <__subdf3+0x7c4>
 800c184:	1000c826 	beq	r2,zero,800c4a8 <__subdf3+0x8b0>
 800c188:	2984b03a 	or	r2,r5,r6
 800c18c:	103ebb26 	beq	r2,zero,800bc7c <__alt_data_end+0xfc00bc7c>
 800c190:	8989883a 	add	r4,r17,r6
 800c194:	1945883a 	add	r2,r3,r5
 800c198:	2447803a 	cmpltu	r3,r4,r17
 800c19c:	1887883a 	add	r3,r3,r2
 800c1a0:	1880202c 	andhi	r2,r3,128
 800c1a4:	2023883a 	mov	r17,r4
 800c1a8:	103f1626 	beq	r2,zero,800be04 <__alt_data_end+0xfc00be04>
 800c1ac:	00bfe034 	movhi	r2,65408
 800c1b0:	10bfffc4 	addi	r2,r2,-1
 800c1b4:	5021883a 	mov	r16,r10
 800c1b8:	1886703a 	and	r3,r3,r2
 800c1bc:	003eaf06 	br	800bc7c <__alt_data_end+0xfc00bc7c>
 800c1c0:	3825883a 	mov	r18,r7
 800c1c4:	003f0f06 	br	800be04 <__alt_data_end+0xfc00be04>
 800c1c8:	1c44b03a 	or	r2,r3,r17
 800c1cc:	8000251e 	bne	r16,zero,800c264 <__subdf3+0x66c>
 800c1d0:	1000661e 	bne	r2,zero,800c36c <__subdf3+0x774>
 800c1d4:	2990b03a 	or	r8,r5,r6
 800c1d8:	40009626 	beq	r8,zero,800c434 <__subdf3+0x83c>
 800c1dc:	2807883a 	mov	r3,r5
 800c1e0:	3023883a 	mov	r17,r6
 800c1e4:	3825883a 	mov	r18,r7
 800c1e8:	003ea406 	br	800bc7c <__alt_data_end+0xfc00bc7c>
 800c1ec:	127ff804 	addi	r9,r2,-32
 800c1f0:	01000804 	movi	r4,32
 800c1f4:	2a52d83a 	srl	r9,r5,r9
 800c1f8:	11008c26 	beq	r2,r4,800c42c <__subdf3+0x834>
 800c1fc:	01001004 	movi	r4,64
 800c200:	2085c83a 	sub	r2,r4,r2
 800c204:	2884983a 	sll	r2,r5,r2
 800c208:	118cb03a 	or	r6,r2,r6
 800c20c:	300cc03a 	cmpne	r6,r6,zero
 800c210:	4992b03a 	or	r9,r9,r6
 800c214:	0005883a 	mov	r2,zero
 800c218:	003f1206 	br	800be64 <__alt_data_end+0xfc00be64>
 800c21c:	0101ffc4 	movi	r4,2047
 800c220:	493f9c1e 	bne	r9,r4,800c094 <__alt_data_end+0xfc00c094>
 800c224:	2807883a 	mov	r3,r5
 800c228:	3023883a 	mov	r17,r6
 800c22c:	4821883a 	mov	r16,r9
 800c230:	3825883a 	mov	r18,r7
 800c234:	003e9106 	br	800bc7c <__alt_data_end+0xfc00bc7c>
 800c238:	80001f1e 	bne	r16,zero,800c2b8 <__subdf3+0x6c0>
 800c23c:	1c48b03a 	or	r4,r3,r17
 800c240:	20005a26 	beq	r4,zero,800c3ac <__subdf3+0x7b4>
 800c244:	0084303a 	nor	r2,zero,r2
 800c248:	1000561e 	bne	r2,zero,800c3a4 <__subdf3+0x7ac>
 800c24c:	89a3883a 	add	r17,r17,r6
 800c250:	1945883a 	add	r2,r3,r5
 800c254:	898d803a 	cmpltu	r6,r17,r6
 800c258:	3087883a 	add	r3,r6,r2
 800c25c:	4821883a 	mov	r16,r9
 800c260:	003f0506 	br	800be78 <__alt_data_end+0xfc00be78>
 800c264:	10002b1e 	bne	r2,zero,800c314 <__subdf3+0x71c>
 800c268:	2984b03a 	or	r2,r5,r6
 800c26c:	10008026 	beq	r2,zero,800c470 <__subdf3+0x878>
 800c270:	2807883a 	mov	r3,r5
 800c274:	3023883a 	mov	r17,r6
 800c278:	3825883a 	mov	r18,r7
 800c27c:	0401ffc4 	movi	r16,2047
 800c280:	003e7e06 	br	800bc7c <__alt_data_end+0xfc00bc7c>
 800c284:	3809883a 	mov	r4,r7
 800c288:	0011883a 	mov	r8,zero
 800c28c:	0005883a 	mov	r2,zero
 800c290:	003ee306 	br	800be20 <__alt_data_end+0xfc00be20>
 800c294:	1c62b03a 	or	r17,r3,r17
 800c298:	8822c03a 	cmpne	r17,r17,zero
 800c29c:	0005883a 	mov	r2,zero
 800c2a0:	003f8906 	br	800c0c8 <__alt_data_end+0xfc00c0c8>
 800c2a4:	3809883a 	mov	r4,r7
 800c2a8:	4821883a 	mov	r16,r9
 800c2ac:	0011883a 	mov	r8,zero
 800c2b0:	0005883a 	mov	r2,zero
 800c2b4:	003eda06 	br	800be20 <__alt_data_end+0xfc00be20>
 800c2b8:	0101ffc4 	movi	r4,2047
 800c2bc:	49003b26 	beq	r9,r4,800c3ac <__subdf3+0x7b4>
 800c2c0:	0085c83a 	sub	r2,zero,r2
 800c2c4:	18c02034 	orhi	r3,r3,128
 800c2c8:	01000e04 	movi	r4,56
 800c2cc:	20806e16 	blt	r4,r2,800c488 <__subdf3+0x890>
 800c2d0:	010007c4 	movi	r4,31
 800c2d4:	20807716 	blt	r4,r2,800c4b4 <__subdf3+0x8bc>
 800c2d8:	01000804 	movi	r4,32
 800c2dc:	2089c83a 	sub	r4,r4,r2
 800c2e0:	1914983a 	sll	r10,r3,r4
 800c2e4:	8890d83a 	srl	r8,r17,r2
 800c2e8:	8908983a 	sll	r4,r17,r4
 800c2ec:	1884d83a 	srl	r2,r3,r2
 800c2f0:	5222b03a 	or	r17,r10,r8
 800c2f4:	2006c03a 	cmpne	r3,r4,zero
 800c2f8:	88e2b03a 	or	r17,r17,r3
 800c2fc:	89a3883a 	add	r17,r17,r6
 800c300:	1145883a 	add	r2,r2,r5
 800c304:	898d803a 	cmpltu	r6,r17,r6
 800c308:	3087883a 	add	r3,r6,r2
 800c30c:	4821883a 	mov	r16,r9
 800c310:	003ed906 	br	800be78 <__alt_data_end+0xfc00be78>
 800c314:	2984b03a 	or	r2,r5,r6
 800c318:	10004226 	beq	r2,zero,800c424 <__subdf3+0x82c>
 800c31c:	1808d0fa 	srli	r4,r3,3
 800c320:	8822d0fa 	srli	r17,r17,3
 800c324:	1806977a 	slli	r3,r3,29
 800c328:	2080022c 	andhi	r2,r4,8
 800c32c:	1c62b03a 	or	r17,r3,r17
 800c330:	10000826 	beq	r2,zero,800c354 <__subdf3+0x75c>
 800c334:	2812d0fa 	srli	r9,r5,3
 800c338:	4880022c 	andhi	r2,r9,8
 800c33c:	1000051e 	bne	r2,zero,800c354 <__subdf3+0x75c>
 800c340:	300cd0fa 	srli	r6,r6,3
 800c344:	2804977a 	slli	r2,r5,29
 800c348:	4809883a 	mov	r4,r9
 800c34c:	3825883a 	mov	r18,r7
 800c350:	11a2b03a 	or	r17,r2,r6
 800c354:	8806d77a 	srli	r3,r17,29
 800c358:	200890fa 	slli	r4,r4,3
 800c35c:	882290fa 	slli	r17,r17,3
 800c360:	0401ffc4 	movi	r16,2047
 800c364:	1906b03a 	or	r3,r3,r4
 800c368:	003e4406 	br	800bc7c <__alt_data_end+0xfc00bc7c>
 800c36c:	2984b03a 	or	r2,r5,r6
 800c370:	103e4226 	beq	r2,zero,800bc7c <__alt_data_end+0xfc00bc7c>
 800c374:	8989c83a 	sub	r4,r17,r6
 800c378:	8911803a 	cmpltu	r8,r17,r4
 800c37c:	1945c83a 	sub	r2,r3,r5
 800c380:	1205c83a 	sub	r2,r2,r8
 800c384:	1200202c 	andhi	r8,r2,128
 800c388:	403e9a26 	beq	r8,zero,800bdf4 <__alt_data_end+0xfc00bdf4>
 800c38c:	3463c83a 	sub	r17,r6,r17
 800c390:	28c5c83a 	sub	r2,r5,r3
 800c394:	344d803a 	cmpltu	r6,r6,r17
 800c398:	1187c83a 	sub	r3,r2,r6
 800c39c:	3825883a 	mov	r18,r7
 800c3a0:	003e3606 	br	800bc7c <__alt_data_end+0xfc00bc7c>
 800c3a4:	0101ffc4 	movi	r4,2047
 800c3a8:	493fc71e 	bne	r9,r4,800c2c8 <__alt_data_end+0xfc00c2c8>
 800c3ac:	2807883a 	mov	r3,r5
 800c3b0:	3023883a 	mov	r17,r6
 800c3b4:	4821883a 	mov	r16,r9
 800c3b8:	003e3006 	br	800bc7c <__alt_data_end+0xfc00bc7c>
 800c3bc:	10003626 	beq	r2,zero,800c498 <__subdf3+0x8a0>
 800c3c0:	2984b03a 	or	r2,r5,r6
 800c3c4:	10001726 	beq	r2,zero,800c424 <__subdf3+0x82c>
 800c3c8:	1808d0fa 	srli	r4,r3,3
 800c3cc:	8822d0fa 	srli	r17,r17,3
 800c3d0:	1806977a 	slli	r3,r3,29
 800c3d4:	2080022c 	andhi	r2,r4,8
 800c3d8:	1c62b03a 	or	r17,r3,r17
 800c3dc:	10000726 	beq	r2,zero,800c3fc <__subdf3+0x804>
 800c3e0:	2812d0fa 	srli	r9,r5,3
 800c3e4:	4880022c 	andhi	r2,r9,8
 800c3e8:	1000041e 	bne	r2,zero,800c3fc <__subdf3+0x804>
 800c3ec:	300cd0fa 	srli	r6,r6,3
 800c3f0:	2804977a 	slli	r2,r5,29
 800c3f4:	4809883a 	mov	r4,r9
 800c3f8:	11a2b03a 	or	r17,r2,r6
 800c3fc:	8806d77a 	srli	r3,r17,29
 800c400:	200890fa 	slli	r4,r4,3
 800c404:	882290fa 	slli	r17,r17,3
 800c408:	3825883a 	mov	r18,r7
 800c40c:	1906b03a 	or	r3,r3,r4
 800c410:	0401ffc4 	movi	r16,2047
 800c414:	003e1906 	br	800bc7c <__alt_data_end+0xfc00bc7c>
 800c418:	000b883a 	mov	r5,zero
 800c41c:	0005883a 	mov	r2,zero
 800c420:	003e2e06 	br	800bcdc <__alt_data_end+0xfc00bcdc>
 800c424:	0401ffc4 	movi	r16,2047
 800c428:	003e1406 	br	800bc7c <__alt_data_end+0xfc00bc7c>
 800c42c:	0005883a 	mov	r2,zero
 800c430:	003f7506 	br	800c208 <__alt_data_end+0xfc00c208>
 800c434:	0005883a 	mov	r2,zero
 800c438:	0009883a 	mov	r4,zero
 800c43c:	003e7806 	br	800be20 <__alt_data_end+0xfc00be20>
 800c440:	123ff804 	addi	r8,r2,-32
 800c444:	01000804 	movi	r4,32
 800c448:	1a10d83a 	srl	r8,r3,r8
 800c44c:	11002526 	beq	r2,r4,800c4e4 <__subdf3+0x8ec>
 800c450:	01001004 	movi	r4,64
 800c454:	2085c83a 	sub	r2,r4,r2
 800c458:	1884983a 	sll	r2,r3,r2
 800c45c:	1444b03a 	or	r2,r2,r17
 800c460:	1004c03a 	cmpne	r2,r2,zero
 800c464:	40a2b03a 	or	r17,r8,r2
 800c468:	0005883a 	mov	r2,zero
 800c46c:	003f1606 	br	800c0c8 <__alt_data_end+0xfc00c0c8>
 800c470:	02000434 	movhi	r8,16
 800c474:	0009883a 	mov	r4,zero
 800c478:	423fffc4 	addi	r8,r8,-1
 800c47c:	00bfffc4 	movi	r2,-1
 800c480:	0401ffc4 	movi	r16,2047
 800c484:	003e6606 	br	800be20 <__alt_data_end+0xfc00be20>
 800c488:	1c62b03a 	or	r17,r3,r17
 800c48c:	8822c03a 	cmpne	r17,r17,zero
 800c490:	0005883a 	mov	r2,zero
 800c494:	003f9906 	br	800c2fc <__alt_data_end+0xfc00c2fc>
 800c498:	2807883a 	mov	r3,r5
 800c49c:	3023883a 	mov	r17,r6
 800c4a0:	0401ffc4 	movi	r16,2047
 800c4a4:	003df506 	br	800bc7c <__alt_data_end+0xfc00bc7c>
 800c4a8:	2807883a 	mov	r3,r5
 800c4ac:	3023883a 	mov	r17,r6
 800c4b0:	003df206 	br	800bc7c <__alt_data_end+0xfc00bc7c>
 800c4b4:	123ff804 	addi	r8,r2,-32
 800c4b8:	01000804 	movi	r4,32
 800c4bc:	1a10d83a 	srl	r8,r3,r8
 800c4c0:	11000a26 	beq	r2,r4,800c4ec <__subdf3+0x8f4>
 800c4c4:	01001004 	movi	r4,64
 800c4c8:	2085c83a 	sub	r2,r4,r2
 800c4cc:	1884983a 	sll	r2,r3,r2
 800c4d0:	1444b03a 	or	r2,r2,r17
 800c4d4:	1004c03a 	cmpne	r2,r2,zero
 800c4d8:	40a2b03a 	or	r17,r8,r2
 800c4dc:	0005883a 	mov	r2,zero
 800c4e0:	003f8606 	br	800c2fc <__alt_data_end+0xfc00c2fc>
 800c4e4:	0005883a 	mov	r2,zero
 800c4e8:	003fdc06 	br	800c45c <__alt_data_end+0xfc00c45c>
 800c4ec:	0005883a 	mov	r2,zero
 800c4f0:	003ff706 	br	800c4d0 <__alt_data_end+0xfc00c4d0>

0800c4f4 <__fixdfsi>:
 800c4f4:	280cd53a 	srli	r6,r5,20
 800c4f8:	00c00434 	movhi	r3,16
 800c4fc:	18ffffc4 	addi	r3,r3,-1
 800c500:	3181ffcc 	andi	r6,r6,2047
 800c504:	01c0ff84 	movi	r7,1022
 800c508:	28c6703a 	and	r3,r5,r3
 800c50c:	280ad7fa 	srli	r5,r5,31
 800c510:	3980120e 	bge	r7,r6,800c55c <__fixdfsi+0x68>
 800c514:	00810744 	movi	r2,1053
 800c518:	11800c16 	blt	r2,r6,800c54c <__fixdfsi+0x58>
 800c51c:	00810cc4 	movi	r2,1075
 800c520:	1185c83a 	sub	r2,r2,r6
 800c524:	01c007c4 	movi	r7,31
 800c528:	18c00434 	orhi	r3,r3,16
 800c52c:	38800d16 	blt	r7,r2,800c564 <__fixdfsi+0x70>
 800c530:	31befb44 	addi	r6,r6,-1043
 800c534:	2084d83a 	srl	r2,r4,r2
 800c538:	1986983a 	sll	r3,r3,r6
 800c53c:	1884b03a 	or	r2,r3,r2
 800c540:	28000726 	beq	r5,zero,800c560 <__fixdfsi+0x6c>
 800c544:	0085c83a 	sub	r2,zero,r2
 800c548:	f800283a 	ret
 800c54c:	00a00034 	movhi	r2,32768
 800c550:	10bfffc4 	addi	r2,r2,-1
 800c554:	2885883a 	add	r2,r5,r2
 800c558:	f800283a 	ret
 800c55c:	0005883a 	mov	r2,zero
 800c560:	f800283a 	ret
 800c564:	008104c4 	movi	r2,1043
 800c568:	1185c83a 	sub	r2,r2,r6
 800c56c:	1884d83a 	srl	r2,r3,r2
 800c570:	003ff306 	br	800c540 <__alt_data_end+0xfc00c540>

0800c574 <__floatsidf>:
 800c574:	defffd04 	addi	sp,sp,-12
 800c578:	dfc00215 	stw	ra,8(sp)
 800c57c:	dc400115 	stw	r17,4(sp)
 800c580:	dc000015 	stw	r16,0(sp)
 800c584:	20002b26 	beq	r4,zero,800c634 <__floatsidf+0xc0>
 800c588:	2023883a 	mov	r17,r4
 800c58c:	2020d7fa 	srli	r16,r4,31
 800c590:	20002d16 	blt	r4,zero,800c648 <__floatsidf+0xd4>
 800c594:	8809883a 	mov	r4,r17
 800c598:	800c6f80 	call	800c6f8 <__clzsi2>
 800c59c:	01410784 	movi	r5,1054
 800c5a0:	288bc83a 	sub	r5,r5,r2
 800c5a4:	01010cc4 	movi	r4,1075
 800c5a8:	2149c83a 	sub	r4,r4,r5
 800c5ac:	00c007c4 	movi	r3,31
 800c5b0:	1900160e 	bge	r3,r4,800c60c <__floatsidf+0x98>
 800c5b4:	00c104c4 	movi	r3,1043
 800c5b8:	1947c83a 	sub	r3,r3,r5
 800c5bc:	88c6983a 	sll	r3,r17,r3
 800c5c0:	00800434 	movhi	r2,16
 800c5c4:	10bfffc4 	addi	r2,r2,-1
 800c5c8:	1886703a 	and	r3,r3,r2
 800c5cc:	2941ffcc 	andi	r5,r5,2047
 800c5d0:	800d883a 	mov	r6,r16
 800c5d4:	0005883a 	mov	r2,zero
 800c5d8:	280a953a 	slli	r5,r5,20
 800c5dc:	31803fcc 	andi	r6,r6,255
 800c5e0:	01000434 	movhi	r4,16
 800c5e4:	300c97fa 	slli	r6,r6,31
 800c5e8:	213fffc4 	addi	r4,r4,-1
 800c5ec:	1906703a 	and	r3,r3,r4
 800c5f0:	1946b03a 	or	r3,r3,r5
 800c5f4:	1986b03a 	or	r3,r3,r6
 800c5f8:	dfc00217 	ldw	ra,8(sp)
 800c5fc:	dc400117 	ldw	r17,4(sp)
 800c600:	dc000017 	ldw	r16,0(sp)
 800c604:	dec00304 	addi	sp,sp,12
 800c608:	f800283a 	ret
 800c60c:	00c002c4 	movi	r3,11
 800c610:	1887c83a 	sub	r3,r3,r2
 800c614:	88c6d83a 	srl	r3,r17,r3
 800c618:	8904983a 	sll	r2,r17,r4
 800c61c:	01000434 	movhi	r4,16
 800c620:	213fffc4 	addi	r4,r4,-1
 800c624:	2941ffcc 	andi	r5,r5,2047
 800c628:	1906703a 	and	r3,r3,r4
 800c62c:	800d883a 	mov	r6,r16
 800c630:	003fe906 	br	800c5d8 <__alt_data_end+0xfc00c5d8>
 800c634:	000d883a 	mov	r6,zero
 800c638:	000b883a 	mov	r5,zero
 800c63c:	0007883a 	mov	r3,zero
 800c640:	0005883a 	mov	r2,zero
 800c644:	003fe406 	br	800c5d8 <__alt_data_end+0xfc00c5d8>
 800c648:	0123c83a 	sub	r17,zero,r4
 800c64c:	003fd106 	br	800c594 <__alt_data_end+0xfc00c594>

0800c650 <__floatunsidf>:
 800c650:	defffe04 	addi	sp,sp,-8
 800c654:	dc000015 	stw	r16,0(sp)
 800c658:	dfc00115 	stw	ra,4(sp)
 800c65c:	2021883a 	mov	r16,r4
 800c660:	20002226 	beq	r4,zero,800c6ec <__floatunsidf+0x9c>
 800c664:	800c6f80 	call	800c6f8 <__clzsi2>
 800c668:	01010784 	movi	r4,1054
 800c66c:	2089c83a 	sub	r4,r4,r2
 800c670:	01810cc4 	movi	r6,1075
 800c674:	310dc83a 	sub	r6,r6,r4
 800c678:	00c007c4 	movi	r3,31
 800c67c:	1980120e 	bge	r3,r6,800c6c8 <__floatunsidf+0x78>
 800c680:	00c104c4 	movi	r3,1043
 800c684:	1907c83a 	sub	r3,r3,r4
 800c688:	80ca983a 	sll	r5,r16,r3
 800c68c:	00800434 	movhi	r2,16
 800c690:	10bfffc4 	addi	r2,r2,-1
 800c694:	2101ffcc 	andi	r4,r4,2047
 800c698:	0021883a 	mov	r16,zero
 800c69c:	288a703a 	and	r5,r5,r2
 800c6a0:	2008953a 	slli	r4,r4,20
 800c6a4:	00c00434 	movhi	r3,16
 800c6a8:	18ffffc4 	addi	r3,r3,-1
 800c6ac:	28c6703a 	and	r3,r5,r3
 800c6b0:	8005883a 	mov	r2,r16
 800c6b4:	1906b03a 	or	r3,r3,r4
 800c6b8:	dfc00117 	ldw	ra,4(sp)
 800c6bc:	dc000017 	ldw	r16,0(sp)
 800c6c0:	dec00204 	addi	sp,sp,8
 800c6c4:	f800283a 	ret
 800c6c8:	00c002c4 	movi	r3,11
 800c6cc:	188bc83a 	sub	r5,r3,r2
 800c6d0:	814ad83a 	srl	r5,r16,r5
 800c6d4:	00c00434 	movhi	r3,16
 800c6d8:	18ffffc4 	addi	r3,r3,-1
 800c6dc:	81a0983a 	sll	r16,r16,r6
 800c6e0:	2101ffcc 	andi	r4,r4,2047
 800c6e4:	28ca703a 	and	r5,r5,r3
 800c6e8:	003fed06 	br	800c6a0 <__alt_data_end+0xfc00c6a0>
 800c6ec:	0009883a 	mov	r4,zero
 800c6f0:	000b883a 	mov	r5,zero
 800c6f4:	003fea06 	br	800c6a0 <__alt_data_end+0xfc00c6a0>

0800c6f8 <__clzsi2>:
 800c6f8:	00bfffd4 	movui	r2,65535
 800c6fc:	11000536 	bltu	r2,r4,800c714 <__clzsi2+0x1c>
 800c700:	00803fc4 	movi	r2,255
 800c704:	11000f36 	bltu	r2,r4,800c744 <__clzsi2+0x4c>
 800c708:	00800804 	movi	r2,32
 800c70c:	0007883a 	mov	r3,zero
 800c710:	00000506 	br	800c728 <__clzsi2+0x30>
 800c714:	00804034 	movhi	r2,256
 800c718:	10bfffc4 	addi	r2,r2,-1
 800c71c:	11000c2e 	bgeu	r2,r4,800c750 <__clzsi2+0x58>
 800c720:	00800204 	movi	r2,8
 800c724:	00c00604 	movi	r3,24
 800c728:	20c8d83a 	srl	r4,r4,r3
 800c72c:	00c20074 	movhi	r3,2049
 800c730:	18fb6604 	addi	r3,r3,-4712
 800c734:	1909883a 	add	r4,r3,r4
 800c738:	20c00003 	ldbu	r3,0(r4)
 800c73c:	10c5c83a 	sub	r2,r2,r3
 800c740:	f800283a 	ret
 800c744:	00800604 	movi	r2,24
 800c748:	00c00204 	movi	r3,8
 800c74c:	003ff606 	br	800c728 <__alt_data_end+0xfc00c728>
 800c750:	00800404 	movi	r2,16
 800c754:	1007883a 	mov	r3,r2
 800c758:	003ff306 	br	800c728 <__alt_data_end+0xfc00c728>

0800c75c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 800c75c:	defffc04 	addi	sp,sp,-16
 800c760:	df000315 	stw	fp,12(sp)
 800c764:	df000304 	addi	fp,sp,12
 800c768:	e13ffd15 	stw	r4,-12(fp)
 800c76c:	e17ffe15 	stw	r5,-8(fp)
 800c770:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 800c774:	e0fffe17 	ldw	r3,-8(fp)
 800c778:	e0bffd17 	ldw	r2,-12(fp)
 800c77c:	18800c26 	beq	r3,r2,800c7b0 <alt_load_section+0x54>
  {
    while( to != end )
 800c780:	00000806 	br	800c7a4 <alt_load_section+0x48>
    {
      *to++ = *from++;
 800c784:	e0bffe17 	ldw	r2,-8(fp)
 800c788:	10c00104 	addi	r3,r2,4
 800c78c:	e0fffe15 	stw	r3,-8(fp)
 800c790:	e0fffd17 	ldw	r3,-12(fp)
 800c794:	19000104 	addi	r4,r3,4
 800c798:	e13ffd15 	stw	r4,-12(fp)
 800c79c:	18c00017 	ldw	r3,0(r3)
 800c7a0:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 800c7a4:	e0fffe17 	ldw	r3,-8(fp)
 800c7a8:	e0bfff17 	ldw	r2,-4(fp)
 800c7ac:	18bff51e 	bne	r3,r2,800c784 <__alt_data_end+0xfc00c784>
    {
      *to++ = *from++;
    }
  }
}
 800c7b0:	0001883a 	nop
 800c7b4:	e037883a 	mov	sp,fp
 800c7b8:	df000017 	ldw	fp,0(sp)
 800c7bc:	dec00104 	addi	sp,sp,4
 800c7c0:	f800283a 	ret

0800c7c4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 800c7c4:	defffe04 	addi	sp,sp,-8
 800c7c8:	dfc00115 	stw	ra,4(sp)
 800c7cc:	df000015 	stw	fp,0(sp)
 800c7d0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 800c7d4:	01820074 	movhi	r6,2049
 800c7d8:	3182ca04 	addi	r6,r6,2856
 800c7dc:	01420074 	movhi	r5,2049
 800c7e0:	297bb304 	addi	r5,r5,-4404
 800c7e4:	01020074 	movhi	r4,2049
 800c7e8:	2102ca04 	addi	r4,r4,2856
 800c7ec:	800c75c0 	call	800c75c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 800c7f0:	01820034 	movhi	r6,2048
 800c7f4:	31808c04 	addi	r6,r6,560
 800c7f8:	01420034 	movhi	r5,2048
 800c7fc:	29400804 	addi	r5,r5,32
 800c800:	01020034 	movhi	r4,2048
 800c804:	21000804 	addi	r4,r4,32
 800c808:	800c75c0 	call	800c75c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 800c80c:	01820074 	movhi	r6,2049
 800c810:	31bbb304 	addi	r6,r6,-4404
 800c814:	01420074 	movhi	r5,2049
 800c818:	297ac604 	addi	r5,r5,-5352
 800c81c:	01020074 	movhi	r4,2049
 800c820:	213ac604 	addi	r4,r4,-5352
 800c824:	800c75c0 	call	800c75c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 800c828:	800d9b00 	call	800d9b0 <alt_dcache_flush_all>
  alt_icache_flush_all();
 800c82c:	800db9c0 	call	800db9c <alt_icache_flush_all>
}
 800c830:	0001883a 	nop
 800c834:	e037883a 	mov	sp,fp
 800c838:	dfc00117 	ldw	ra,4(sp)
 800c83c:	df000017 	ldw	fp,0(sp)
 800c840:	dec00204 	addi	sp,sp,8
 800c844:	f800283a 	ret

0800c848 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 800c848:	defffd04 	addi	sp,sp,-12
 800c84c:	dfc00215 	stw	ra,8(sp)
 800c850:	df000115 	stw	fp,4(sp)
 800c854:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 800c858:	0009883a 	mov	r4,zero
 800c85c:	800ca200 	call	800ca20 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 800c860:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 800c864:	800ca580 	call	800ca58 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 800c868:	01820074 	movhi	r6,2049
 800c86c:	31bba604 	addi	r6,r6,-4456
 800c870:	01420074 	movhi	r5,2049
 800c874:	297ba604 	addi	r5,r5,-4456
 800c878:	01020074 	movhi	r4,2049
 800c87c:	213ba604 	addi	r4,r4,-4456
 800c880:	800df400 	call	800df40 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 800c884:	800dadc0 	call	800dadc <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 800c888:	01020074 	movhi	r4,2049
 800c88c:	2136cf04 	addi	r4,r4,-9412
 800c890:	800e7840 	call	800e784 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 800c894:	d0a72e17 	ldw	r2,-25416(gp)
 800c898:	d0e72f17 	ldw	r3,-25412(gp)
 800c89c:	d1273017 	ldw	r4,-25408(gp)
 800c8a0:	200d883a 	mov	r6,r4
 800c8a4:	180b883a 	mov	r5,r3
 800c8a8:	1009883a 	mov	r4,r2
 800c8ac:	800026c0 	call	800026c <main>
 800c8b0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 800c8b4:	01000044 	movi	r4,1
 800c8b8:	800d8d80 	call	800d8d8 <close>
  exit (result);
 800c8bc:	e13fff17 	ldw	r4,-4(fp)
 800c8c0:	800e7980 	call	800e798 <exit>

0800c8c4 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 800c8c4:	defffe04 	addi	sp,sp,-8
 800c8c8:	df000115 	stw	fp,4(sp)
 800c8cc:	df000104 	addi	fp,sp,4
 800c8d0:	e13fff15 	stw	r4,-4(fp)
}
 800c8d4:	0001883a 	nop
 800c8d8:	e037883a 	mov	sp,fp
 800c8dc:	df000017 	ldw	fp,0(sp)
 800c8e0:	dec00104 	addi	sp,sp,4
 800c8e4:	f800283a 	ret

0800c8e8 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 800c8e8:	defffe04 	addi	sp,sp,-8
 800c8ec:	df000115 	stw	fp,4(sp)
 800c8f0:	df000104 	addi	fp,sp,4
 800c8f4:	e13fff15 	stw	r4,-4(fp)
}
 800c8f8:	0001883a 	nop
 800c8fc:	e037883a 	mov	sp,fp
 800c900:	df000017 	ldw	fp,0(sp)
 800c904:	dec00104 	addi	sp,sp,4
 800c908:	f800283a 	ret

0800c90c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 800c90c:	defff904 	addi	sp,sp,-28
 800c910:	df000615 	stw	fp,24(sp)
 800c914:	df000604 	addi	fp,sp,24
 800c918:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800c91c:	0005303a 	rdctl	r2,status
 800c920:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800c924:	e0fffe17 	ldw	r3,-8(fp)
 800c928:	00bfff84 	movi	r2,-2
 800c92c:	1884703a 	and	r2,r3,r2
 800c930:	1001703a 	wrctl	status,r2
  
  return context;
 800c934:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 800c938:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 800c93c:	d0a00617 	ldw	r2,-32744(gp)
 800c940:	10c000c4 	addi	r3,r2,3
 800c944:	00bfff04 	movi	r2,-4
 800c948:	1884703a 	and	r2,r3,r2
 800c94c:	d0a00615 	stw	r2,-32744(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 800c950:	d0e00617 	ldw	r3,-32744(gp)
 800c954:	e0bfff17 	ldw	r2,-4(fp)
 800c958:	1887883a 	add	r3,r3,r2
 800c95c:	00830034 	movhi	r2,3072
 800c960:	10800004 	addi	r2,r2,0
 800c964:	10c0062e 	bgeu	r2,r3,800c980 <sbrk+0x74>
 800c968:	e0bffb17 	ldw	r2,-20(fp)
 800c96c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800c970:	e0bffa17 	ldw	r2,-24(fp)
 800c974:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 800c978:	00bfffc4 	movi	r2,-1
 800c97c:	00000b06 	br	800c9ac <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 800c980:	d0a00617 	ldw	r2,-32744(gp)
 800c984:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 800c988:	d0e00617 	ldw	r3,-32744(gp)
 800c98c:	e0bfff17 	ldw	r2,-4(fp)
 800c990:	1885883a 	add	r2,r3,r2
 800c994:	d0a00615 	stw	r2,-32744(gp)
 800c998:	e0bffb17 	ldw	r2,-20(fp)
 800c99c:	e0bffc15 	stw	r2,-16(fp)
 800c9a0:	e0bffc17 	ldw	r2,-16(fp)
 800c9a4:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 800c9a8:	e0bffd17 	ldw	r2,-12(fp)
} 
 800c9ac:	e037883a 	mov	sp,fp
 800c9b0:	df000017 	ldw	fp,0(sp)
 800c9b4:	dec00104 	addi	sp,sp,4
 800c9b8:	f800283a 	ret

0800c9bc <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 800c9bc:	defffd04 	addi	sp,sp,-12
 800c9c0:	dfc00215 	stw	ra,8(sp)
 800c9c4:	df000115 	stw	fp,4(sp)
 800c9c8:	df000104 	addi	fp,sp,4
 800c9cc:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 800c9d0:	e13fff17 	ldw	r4,-4(fp)
 800c9d4:	800d7440 	call	800d744 <alt_busy_sleep>
}
 800c9d8:	e037883a 	mov	sp,fp
 800c9dc:	dfc00117 	ldw	ra,4(sp)
 800c9e0:	df000017 	ldw	fp,0(sp)
 800c9e4:	dec00204 	addi	sp,sp,8
 800c9e8:	f800283a 	ret

0800c9ec <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 800c9ec:	defffd04 	addi	sp,sp,-12
 800c9f0:	dfc00215 	stw	ra,8(sp)
 800c9f4:	df000115 	stw	fp,4(sp)
 800c9f8:	df000104 	addi	fp,sp,4
 800c9fc:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 800ca00:	d1600904 	addi	r5,gp,-32732
 800ca04:	e13fff17 	ldw	r4,-4(fp)
 800ca08:	800da380 	call	800da38 <alt_dev_llist_insert>
}
 800ca0c:	e037883a 	mov	sp,fp
 800ca10:	dfc00117 	ldw	ra,4(sp)
 800ca14:	df000017 	ldw	fp,0(sp)
 800ca18:	dec00204 	addi	sp,sp,8
 800ca1c:	f800283a 	ret

0800ca20 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 800ca20:	defffd04 	addi	sp,sp,-12
 800ca24:	dfc00215 	stw	ra,8(sp)
 800ca28:	df000115 	stw	fp,4(sp)
 800ca2c:	df000104 	addi	fp,sp,4
 800ca30:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 800ca34:	800e4680 	call	800e468 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 800ca38:	00800044 	movi	r2,1
 800ca3c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 800ca40:	0001883a 	nop
 800ca44:	e037883a 	mov	sp,fp
 800ca48:	dfc00117 	ldw	ra,4(sp)
 800ca4c:	df000017 	ldw	fp,0(sp)
 800ca50:	dec00204 	addi	sp,sp,8
 800ca54:	f800283a 	ret

0800ca58 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 800ca58:	defffe04 	addi	sp,sp,-8
 800ca5c:	dfc00115 	stw	ra,4(sp)
 800ca60:	df000015 	stw	fp,0(sp)
 800ca64:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 800ca68:	01c0fa04 	movi	r7,1000
 800ca6c:	01800084 	movi	r6,2
 800ca70:	000b883a 	mov	r5,zero
 800ca74:	01003004 	movi	r4,192
 800ca78:	800d59c0 	call	800d59c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 800ca7c:	01800044 	movi	r6,1
 800ca80:	000b883a 	mov	r5,zero
 800ca84:	01020074 	movhi	r4,2049
 800ca88:	213e4204 	addi	r4,r4,-1784
 800ca8c:	800cc200 	call	800cc20 <altera_avalon_jtag_uart_init>
 800ca90:	01020074 	movhi	r4,2049
 800ca94:	213e3804 	addi	r4,r4,-1824
 800ca98:	800c9ec0 	call	800c9ec <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SPI_0, spi_0);
 800ca9c:	0001883a 	nop
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
 800caa0:	0001883a 	nop
}
 800caa4:	0001883a 	nop
 800caa8:	e037883a 	mov	sp,fp
 800caac:	dfc00117 	ldw	ra,4(sp)
 800cab0:	df000017 	ldw	fp,0(sp)
 800cab4:	dec00204 	addi	sp,sp,8
 800cab8:	f800283a 	ret

0800cabc <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 800cabc:	defffa04 	addi	sp,sp,-24
 800cac0:	dfc00515 	stw	ra,20(sp)
 800cac4:	df000415 	stw	fp,16(sp)
 800cac8:	df000404 	addi	fp,sp,16
 800cacc:	e13ffd15 	stw	r4,-12(fp)
 800cad0:	e17ffe15 	stw	r5,-8(fp)
 800cad4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800cad8:	e0bffd17 	ldw	r2,-12(fp)
 800cadc:	10800017 	ldw	r2,0(r2)
 800cae0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 800cae4:	e0bffc17 	ldw	r2,-16(fp)
 800cae8:	10c00a04 	addi	r3,r2,40
 800caec:	e0bffd17 	ldw	r2,-12(fp)
 800caf0:	10800217 	ldw	r2,8(r2)
 800caf4:	100f883a 	mov	r7,r2
 800caf8:	e1bfff17 	ldw	r6,-4(fp)
 800cafc:	e17ffe17 	ldw	r5,-8(fp)
 800cb00:	1809883a 	mov	r4,r3
 800cb04:	800d0e40 	call	800d0e4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 800cb08:	e037883a 	mov	sp,fp
 800cb0c:	dfc00117 	ldw	ra,4(sp)
 800cb10:	df000017 	ldw	fp,0(sp)
 800cb14:	dec00204 	addi	sp,sp,8
 800cb18:	f800283a 	ret

0800cb1c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 800cb1c:	defffa04 	addi	sp,sp,-24
 800cb20:	dfc00515 	stw	ra,20(sp)
 800cb24:	df000415 	stw	fp,16(sp)
 800cb28:	df000404 	addi	fp,sp,16
 800cb2c:	e13ffd15 	stw	r4,-12(fp)
 800cb30:	e17ffe15 	stw	r5,-8(fp)
 800cb34:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800cb38:	e0bffd17 	ldw	r2,-12(fp)
 800cb3c:	10800017 	ldw	r2,0(r2)
 800cb40:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 800cb44:	e0bffc17 	ldw	r2,-16(fp)
 800cb48:	10c00a04 	addi	r3,r2,40
 800cb4c:	e0bffd17 	ldw	r2,-12(fp)
 800cb50:	10800217 	ldw	r2,8(r2)
 800cb54:	100f883a 	mov	r7,r2
 800cb58:	e1bfff17 	ldw	r6,-4(fp)
 800cb5c:	e17ffe17 	ldw	r5,-8(fp)
 800cb60:	1809883a 	mov	r4,r3
 800cb64:	800d3000 	call	800d300 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 800cb68:	e037883a 	mov	sp,fp
 800cb6c:	dfc00117 	ldw	ra,4(sp)
 800cb70:	df000017 	ldw	fp,0(sp)
 800cb74:	dec00204 	addi	sp,sp,8
 800cb78:	f800283a 	ret

0800cb7c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 800cb7c:	defffc04 	addi	sp,sp,-16
 800cb80:	dfc00315 	stw	ra,12(sp)
 800cb84:	df000215 	stw	fp,8(sp)
 800cb88:	df000204 	addi	fp,sp,8
 800cb8c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800cb90:	e0bfff17 	ldw	r2,-4(fp)
 800cb94:	10800017 	ldw	r2,0(r2)
 800cb98:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 800cb9c:	e0bffe17 	ldw	r2,-8(fp)
 800cba0:	10c00a04 	addi	r3,r2,40
 800cba4:	e0bfff17 	ldw	r2,-4(fp)
 800cba8:	10800217 	ldw	r2,8(r2)
 800cbac:	100b883a 	mov	r5,r2
 800cbb0:	1809883a 	mov	r4,r3
 800cbb4:	800cf8c0 	call	800cf8c <altera_avalon_jtag_uart_close>
}
 800cbb8:	e037883a 	mov	sp,fp
 800cbbc:	dfc00117 	ldw	ra,4(sp)
 800cbc0:	df000017 	ldw	fp,0(sp)
 800cbc4:	dec00204 	addi	sp,sp,8
 800cbc8:	f800283a 	ret

0800cbcc <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 800cbcc:	defffa04 	addi	sp,sp,-24
 800cbd0:	dfc00515 	stw	ra,20(sp)
 800cbd4:	df000415 	stw	fp,16(sp)
 800cbd8:	df000404 	addi	fp,sp,16
 800cbdc:	e13ffd15 	stw	r4,-12(fp)
 800cbe0:	e17ffe15 	stw	r5,-8(fp)
 800cbe4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 800cbe8:	e0bffd17 	ldw	r2,-12(fp)
 800cbec:	10800017 	ldw	r2,0(r2)
 800cbf0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 800cbf4:	e0bffc17 	ldw	r2,-16(fp)
 800cbf8:	10800a04 	addi	r2,r2,40
 800cbfc:	e1bfff17 	ldw	r6,-4(fp)
 800cc00:	e17ffe17 	ldw	r5,-8(fp)
 800cc04:	1009883a 	mov	r4,r2
 800cc08:	800cff40 	call	800cff4 <altera_avalon_jtag_uart_ioctl>
}
 800cc0c:	e037883a 	mov	sp,fp
 800cc10:	dfc00117 	ldw	ra,4(sp)
 800cc14:	df000017 	ldw	fp,0(sp)
 800cc18:	dec00204 	addi	sp,sp,8
 800cc1c:	f800283a 	ret

0800cc20 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 800cc20:	defffa04 	addi	sp,sp,-24
 800cc24:	dfc00515 	stw	ra,20(sp)
 800cc28:	df000415 	stw	fp,16(sp)
 800cc2c:	df000404 	addi	fp,sp,16
 800cc30:	e13ffd15 	stw	r4,-12(fp)
 800cc34:	e17ffe15 	stw	r5,-8(fp)
 800cc38:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 800cc3c:	e0bffd17 	ldw	r2,-12(fp)
 800cc40:	00c00044 	movi	r3,1
 800cc44:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 800cc48:	e0bffd17 	ldw	r2,-12(fp)
 800cc4c:	10800017 	ldw	r2,0(r2)
 800cc50:	10800104 	addi	r2,r2,4
 800cc54:	1007883a 	mov	r3,r2
 800cc58:	e0bffd17 	ldw	r2,-12(fp)
 800cc5c:	10800817 	ldw	r2,32(r2)
 800cc60:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 800cc64:	e0bffe17 	ldw	r2,-8(fp)
 800cc68:	e0ffff17 	ldw	r3,-4(fp)
 800cc6c:	d8000015 	stw	zero,0(sp)
 800cc70:	e1fffd17 	ldw	r7,-12(fp)
 800cc74:	01820074 	movhi	r6,2049
 800cc78:	31b33804 	addi	r6,r6,-13088
 800cc7c:	180b883a 	mov	r5,r3
 800cc80:	1009883a 	mov	r4,r2
 800cc84:	800dbbc0 	call	800dbbc <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 800cc88:	e0bffd17 	ldw	r2,-12(fp)
 800cc8c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 800cc90:	e0bffd17 	ldw	r2,-12(fp)
 800cc94:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 800cc98:	d0e73217 	ldw	r3,-25400(gp)
 800cc9c:	e1fffd17 	ldw	r7,-12(fp)
 800cca0:	01820074 	movhi	r6,2049
 800cca4:	31b3bb04 	addi	r6,r6,-12564
 800cca8:	180b883a 	mov	r5,r3
 800ccac:	1009883a 	mov	r4,r2
 800ccb0:	800d6180 	call	800d618 <alt_alarm_start>
 800ccb4:	1000040e 	bge	r2,zero,800ccc8 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 800ccb8:	e0fffd17 	ldw	r3,-12(fp)
 800ccbc:	00a00034 	movhi	r2,32768
 800ccc0:	10bfffc4 	addi	r2,r2,-1
 800ccc4:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 800ccc8:	0001883a 	nop
 800cccc:	e037883a 	mov	sp,fp
 800ccd0:	dfc00117 	ldw	ra,4(sp)
 800ccd4:	df000017 	ldw	fp,0(sp)
 800ccd8:	dec00204 	addi	sp,sp,8
 800ccdc:	f800283a 	ret

0800cce0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 800cce0:	defff804 	addi	sp,sp,-32
 800cce4:	df000715 	stw	fp,28(sp)
 800cce8:	df000704 	addi	fp,sp,28
 800ccec:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 800ccf0:	e0bfff17 	ldw	r2,-4(fp)
 800ccf4:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 800ccf8:	e0bffb17 	ldw	r2,-20(fp)
 800ccfc:	10800017 	ldw	r2,0(r2)
 800cd00:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 800cd04:	e0bffc17 	ldw	r2,-16(fp)
 800cd08:	10800104 	addi	r2,r2,4
 800cd0c:	10800037 	ldwio	r2,0(r2)
 800cd10:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 800cd14:	e0bffd17 	ldw	r2,-12(fp)
 800cd18:	1080c00c 	andi	r2,r2,768
 800cd1c:	10006d26 	beq	r2,zero,800ced4 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 800cd20:	e0bffd17 	ldw	r2,-12(fp)
 800cd24:	1080400c 	andi	r2,r2,256
 800cd28:	10003526 	beq	r2,zero,800ce00 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 800cd2c:	00800074 	movhi	r2,1
 800cd30:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800cd34:	e0bffb17 	ldw	r2,-20(fp)
 800cd38:	10800a17 	ldw	r2,40(r2)
 800cd3c:	10800044 	addi	r2,r2,1
 800cd40:	1081ffcc 	andi	r2,r2,2047
 800cd44:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 800cd48:	e0bffb17 	ldw	r2,-20(fp)
 800cd4c:	10c00b17 	ldw	r3,44(r2)
 800cd50:	e0bffe17 	ldw	r2,-8(fp)
 800cd54:	18801526 	beq	r3,r2,800cdac <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 800cd58:	e0bffc17 	ldw	r2,-16(fp)
 800cd5c:	10800037 	ldwio	r2,0(r2)
 800cd60:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 800cd64:	e0bff917 	ldw	r2,-28(fp)
 800cd68:	10a0000c 	andi	r2,r2,32768
 800cd6c:	10001126 	beq	r2,zero,800cdb4 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 800cd70:	e0bffb17 	ldw	r2,-20(fp)
 800cd74:	10800a17 	ldw	r2,40(r2)
 800cd78:	e0fff917 	ldw	r3,-28(fp)
 800cd7c:	1809883a 	mov	r4,r3
 800cd80:	e0fffb17 	ldw	r3,-20(fp)
 800cd84:	1885883a 	add	r2,r3,r2
 800cd88:	10800e04 	addi	r2,r2,56
 800cd8c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800cd90:	e0bffb17 	ldw	r2,-20(fp)
 800cd94:	10800a17 	ldw	r2,40(r2)
 800cd98:	10800044 	addi	r2,r2,1
 800cd9c:	10c1ffcc 	andi	r3,r2,2047
 800cda0:	e0bffb17 	ldw	r2,-20(fp)
 800cda4:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 800cda8:	003fe206 	br	800cd34 <__alt_data_end+0xfc00cd34>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 800cdac:	0001883a 	nop
 800cdb0:	00000106 	br	800cdb8 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 800cdb4:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 800cdb8:	e0bff917 	ldw	r2,-28(fp)
 800cdbc:	10bfffec 	andhi	r2,r2,65535
 800cdc0:	10000f26 	beq	r2,zero,800ce00 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 800cdc4:	e0bffb17 	ldw	r2,-20(fp)
 800cdc8:	10c00817 	ldw	r3,32(r2)
 800cdcc:	00bfff84 	movi	r2,-2
 800cdd0:	1886703a 	and	r3,r3,r2
 800cdd4:	e0bffb17 	ldw	r2,-20(fp)
 800cdd8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 800cddc:	e0bffc17 	ldw	r2,-16(fp)
 800cde0:	10800104 	addi	r2,r2,4
 800cde4:	1007883a 	mov	r3,r2
 800cde8:	e0bffb17 	ldw	r2,-20(fp)
 800cdec:	10800817 	ldw	r2,32(r2)
 800cdf0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 800cdf4:	e0bffc17 	ldw	r2,-16(fp)
 800cdf8:	10800104 	addi	r2,r2,4
 800cdfc:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 800ce00:	e0bffd17 	ldw	r2,-12(fp)
 800ce04:	1080800c 	andi	r2,r2,512
 800ce08:	103fbe26 	beq	r2,zero,800cd04 <__alt_data_end+0xfc00cd04>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 800ce0c:	e0bffd17 	ldw	r2,-12(fp)
 800ce10:	1004d43a 	srli	r2,r2,16
 800ce14:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 800ce18:	00001406 	br	800ce6c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 800ce1c:	e0bffc17 	ldw	r2,-16(fp)
 800ce20:	e0fffb17 	ldw	r3,-20(fp)
 800ce24:	18c00d17 	ldw	r3,52(r3)
 800ce28:	e13ffb17 	ldw	r4,-20(fp)
 800ce2c:	20c7883a 	add	r3,r4,r3
 800ce30:	18c20e04 	addi	r3,r3,2104
 800ce34:	18c00003 	ldbu	r3,0(r3)
 800ce38:	18c03fcc 	andi	r3,r3,255
 800ce3c:	18c0201c 	xori	r3,r3,128
 800ce40:	18ffe004 	addi	r3,r3,-128
 800ce44:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800ce48:	e0bffb17 	ldw	r2,-20(fp)
 800ce4c:	10800d17 	ldw	r2,52(r2)
 800ce50:	10800044 	addi	r2,r2,1
 800ce54:	10c1ffcc 	andi	r3,r2,2047
 800ce58:	e0bffb17 	ldw	r2,-20(fp)
 800ce5c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 800ce60:	e0bffa17 	ldw	r2,-24(fp)
 800ce64:	10bfffc4 	addi	r2,r2,-1
 800ce68:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 800ce6c:	e0bffa17 	ldw	r2,-24(fp)
 800ce70:	10000526 	beq	r2,zero,800ce88 <altera_avalon_jtag_uart_irq+0x1a8>
 800ce74:	e0bffb17 	ldw	r2,-20(fp)
 800ce78:	10c00d17 	ldw	r3,52(r2)
 800ce7c:	e0bffb17 	ldw	r2,-20(fp)
 800ce80:	10800c17 	ldw	r2,48(r2)
 800ce84:	18bfe51e 	bne	r3,r2,800ce1c <__alt_data_end+0xfc00ce1c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 800ce88:	e0bffa17 	ldw	r2,-24(fp)
 800ce8c:	103f9d26 	beq	r2,zero,800cd04 <__alt_data_end+0xfc00cd04>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 800ce90:	e0bffb17 	ldw	r2,-20(fp)
 800ce94:	10c00817 	ldw	r3,32(r2)
 800ce98:	00bfff44 	movi	r2,-3
 800ce9c:	1886703a 	and	r3,r3,r2
 800cea0:	e0bffb17 	ldw	r2,-20(fp)
 800cea4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 800cea8:	e0bffb17 	ldw	r2,-20(fp)
 800ceac:	10800017 	ldw	r2,0(r2)
 800ceb0:	10800104 	addi	r2,r2,4
 800ceb4:	1007883a 	mov	r3,r2
 800ceb8:	e0bffb17 	ldw	r2,-20(fp)
 800cebc:	10800817 	ldw	r2,32(r2)
 800cec0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 800cec4:	e0bffc17 	ldw	r2,-16(fp)
 800cec8:	10800104 	addi	r2,r2,4
 800cecc:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 800ced0:	003f8c06 	br	800cd04 <__alt_data_end+0xfc00cd04>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 800ced4:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 800ced8:	0001883a 	nop
 800cedc:	e037883a 	mov	sp,fp
 800cee0:	df000017 	ldw	fp,0(sp)
 800cee4:	dec00104 	addi	sp,sp,4
 800cee8:	f800283a 	ret

0800ceec <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 800ceec:	defff804 	addi	sp,sp,-32
 800cef0:	df000715 	stw	fp,28(sp)
 800cef4:	df000704 	addi	fp,sp,28
 800cef8:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 800cefc:	e0bffb17 	ldw	r2,-20(fp)
 800cf00:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 800cf04:	e0bff917 	ldw	r2,-28(fp)
 800cf08:	10800017 	ldw	r2,0(r2)
 800cf0c:	10800104 	addi	r2,r2,4
 800cf10:	10800037 	ldwio	r2,0(r2)
 800cf14:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 800cf18:	e0bffa17 	ldw	r2,-24(fp)
 800cf1c:	1081000c 	andi	r2,r2,1024
 800cf20:	10000b26 	beq	r2,zero,800cf50 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 800cf24:	e0bff917 	ldw	r2,-28(fp)
 800cf28:	10800017 	ldw	r2,0(r2)
 800cf2c:	10800104 	addi	r2,r2,4
 800cf30:	1007883a 	mov	r3,r2
 800cf34:	e0bff917 	ldw	r2,-28(fp)
 800cf38:	10800817 	ldw	r2,32(r2)
 800cf3c:	10810014 	ori	r2,r2,1024
 800cf40:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 800cf44:	e0bff917 	ldw	r2,-28(fp)
 800cf48:	10000915 	stw	zero,36(r2)
 800cf4c:	00000a06 	br	800cf78 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 800cf50:	e0bff917 	ldw	r2,-28(fp)
 800cf54:	10c00917 	ldw	r3,36(r2)
 800cf58:	00a00034 	movhi	r2,32768
 800cf5c:	10bfff04 	addi	r2,r2,-4
 800cf60:	10c00536 	bltu	r2,r3,800cf78 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 800cf64:	e0bff917 	ldw	r2,-28(fp)
 800cf68:	10800917 	ldw	r2,36(r2)
 800cf6c:	10c00044 	addi	r3,r2,1
 800cf70:	e0bff917 	ldw	r2,-28(fp)
 800cf74:	10c00915 	stw	r3,36(r2)
 800cf78:	d0a73217 	ldw	r2,-25400(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 800cf7c:	e037883a 	mov	sp,fp
 800cf80:	df000017 	ldw	fp,0(sp)
 800cf84:	dec00104 	addi	sp,sp,4
 800cf88:	f800283a 	ret

0800cf8c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 800cf8c:	defffd04 	addi	sp,sp,-12
 800cf90:	df000215 	stw	fp,8(sp)
 800cf94:	df000204 	addi	fp,sp,8
 800cf98:	e13ffe15 	stw	r4,-8(fp)
 800cf9c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 800cfa0:	00000506 	br	800cfb8 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 800cfa4:	e0bfff17 	ldw	r2,-4(fp)
 800cfa8:	1090000c 	andi	r2,r2,16384
 800cfac:	10000226 	beq	r2,zero,800cfb8 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 800cfb0:	00bffd44 	movi	r2,-11
 800cfb4:	00000b06 	br	800cfe4 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 800cfb8:	e0bffe17 	ldw	r2,-8(fp)
 800cfbc:	10c00d17 	ldw	r3,52(r2)
 800cfc0:	e0bffe17 	ldw	r2,-8(fp)
 800cfc4:	10800c17 	ldw	r2,48(r2)
 800cfc8:	18800526 	beq	r3,r2,800cfe0 <altera_avalon_jtag_uart_close+0x54>
 800cfcc:	e0bffe17 	ldw	r2,-8(fp)
 800cfd0:	10c00917 	ldw	r3,36(r2)
 800cfd4:	e0bffe17 	ldw	r2,-8(fp)
 800cfd8:	10800117 	ldw	r2,4(r2)
 800cfdc:	18bff136 	bltu	r3,r2,800cfa4 <__alt_data_end+0xfc00cfa4>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 800cfe0:	0005883a 	mov	r2,zero
}
 800cfe4:	e037883a 	mov	sp,fp
 800cfe8:	df000017 	ldw	fp,0(sp)
 800cfec:	dec00104 	addi	sp,sp,4
 800cff0:	f800283a 	ret

0800cff4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 800cff4:	defffa04 	addi	sp,sp,-24
 800cff8:	df000515 	stw	fp,20(sp)
 800cffc:	df000504 	addi	fp,sp,20
 800d000:	e13ffd15 	stw	r4,-12(fp)
 800d004:	e17ffe15 	stw	r5,-8(fp)
 800d008:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 800d00c:	00bff9c4 	movi	r2,-25
 800d010:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 800d014:	e0bffe17 	ldw	r2,-8(fp)
 800d018:	10da8060 	cmpeqi	r3,r2,27137
 800d01c:	1800031e 	bne	r3,zero,800d02c <altera_avalon_jtag_uart_ioctl+0x38>
 800d020:	109a80a0 	cmpeqi	r2,r2,27138
 800d024:	1000181e 	bne	r2,zero,800d088 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 800d028:	00002906 	br	800d0d0 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 800d02c:	e0bffd17 	ldw	r2,-12(fp)
 800d030:	10c00117 	ldw	r3,4(r2)
 800d034:	00a00034 	movhi	r2,32768
 800d038:	10bfffc4 	addi	r2,r2,-1
 800d03c:	18802126 	beq	r3,r2,800d0c4 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 800d040:	e0bfff17 	ldw	r2,-4(fp)
 800d044:	10800017 	ldw	r2,0(r2)
 800d048:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 800d04c:	e0bffc17 	ldw	r2,-16(fp)
 800d050:	10800090 	cmplti	r2,r2,2
 800d054:	1000061e 	bne	r2,zero,800d070 <altera_avalon_jtag_uart_ioctl+0x7c>
 800d058:	e0fffc17 	ldw	r3,-16(fp)
 800d05c:	00a00034 	movhi	r2,32768
 800d060:	10bfffc4 	addi	r2,r2,-1
 800d064:	18800226 	beq	r3,r2,800d070 <altera_avalon_jtag_uart_ioctl+0x7c>
 800d068:	e0bffc17 	ldw	r2,-16(fp)
 800d06c:	00000206 	br	800d078 <altera_avalon_jtag_uart_ioctl+0x84>
 800d070:	00a00034 	movhi	r2,32768
 800d074:	10bfff84 	addi	r2,r2,-2
 800d078:	e0fffd17 	ldw	r3,-12(fp)
 800d07c:	18800115 	stw	r2,4(r3)
      rc = 0;
 800d080:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 800d084:	00000f06 	br	800d0c4 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 800d088:	e0bffd17 	ldw	r2,-12(fp)
 800d08c:	10c00117 	ldw	r3,4(r2)
 800d090:	00a00034 	movhi	r2,32768
 800d094:	10bfffc4 	addi	r2,r2,-1
 800d098:	18800c26 	beq	r3,r2,800d0cc <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 800d09c:	e0bffd17 	ldw	r2,-12(fp)
 800d0a0:	10c00917 	ldw	r3,36(r2)
 800d0a4:	e0bffd17 	ldw	r2,-12(fp)
 800d0a8:	10800117 	ldw	r2,4(r2)
 800d0ac:	1885803a 	cmpltu	r2,r3,r2
 800d0b0:	10c03fcc 	andi	r3,r2,255
 800d0b4:	e0bfff17 	ldw	r2,-4(fp)
 800d0b8:	10c00015 	stw	r3,0(r2)
      rc = 0;
 800d0bc:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 800d0c0:	00000206 	br	800d0cc <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 800d0c4:	0001883a 	nop
 800d0c8:	00000106 	br	800d0d0 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 800d0cc:	0001883a 	nop

  default:
    break;
  }

  return rc;
 800d0d0:	e0bffb17 	ldw	r2,-20(fp)
}
 800d0d4:	e037883a 	mov	sp,fp
 800d0d8:	df000017 	ldw	fp,0(sp)
 800d0dc:	dec00104 	addi	sp,sp,4
 800d0e0:	f800283a 	ret

0800d0e4 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 800d0e4:	defff304 	addi	sp,sp,-52
 800d0e8:	dfc00c15 	stw	ra,48(sp)
 800d0ec:	df000b15 	stw	fp,44(sp)
 800d0f0:	df000b04 	addi	fp,sp,44
 800d0f4:	e13ffc15 	stw	r4,-16(fp)
 800d0f8:	e17ffd15 	stw	r5,-12(fp)
 800d0fc:	e1bffe15 	stw	r6,-8(fp)
 800d100:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 800d104:	e0bffd17 	ldw	r2,-12(fp)
 800d108:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 800d10c:	00004706 	br	800d22c <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 800d110:	e0bffc17 	ldw	r2,-16(fp)
 800d114:	10800a17 	ldw	r2,40(r2)
 800d118:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 800d11c:	e0bffc17 	ldw	r2,-16(fp)
 800d120:	10800b17 	ldw	r2,44(r2)
 800d124:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 800d128:	e0fff717 	ldw	r3,-36(fp)
 800d12c:	e0bff817 	ldw	r2,-32(fp)
 800d130:	18800536 	bltu	r3,r2,800d148 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 800d134:	e0fff717 	ldw	r3,-36(fp)
 800d138:	e0bff817 	ldw	r2,-32(fp)
 800d13c:	1885c83a 	sub	r2,r3,r2
 800d140:	e0bff615 	stw	r2,-40(fp)
 800d144:	00000406 	br	800d158 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 800d148:	00c20004 	movi	r3,2048
 800d14c:	e0bff817 	ldw	r2,-32(fp)
 800d150:	1885c83a 	sub	r2,r3,r2
 800d154:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 800d158:	e0bff617 	ldw	r2,-40(fp)
 800d15c:	10001e26 	beq	r2,zero,800d1d8 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 800d160:	e0fffe17 	ldw	r3,-8(fp)
 800d164:	e0bff617 	ldw	r2,-40(fp)
 800d168:	1880022e 	bgeu	r3,r2,800d174 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 800d16c:	e0bffe17 	ldw	r2,-8(fp)
 800d170:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 800d174:	e0bffc17 	ldw	r2,-16(fp)
 800d178:	10c00e04 	addi	r3,r2,56
 800d17c:	e0bff817 	ldw	r2,-32(fp)
 800d180:	1885883a 	add	r2,r3,r2
 800d184:	e1bff617 	ldw	r6,-40(fp)
 800d188:	100b883a 	mov	r5,r2
 800d18c:	e13ff517 	ldw	r4,-44(fp)
 800d190:	8005be00 	call	8005be0 <memcpy>
      ptr   += n;
 800d194:	e0fff517 	ldw	r3,-44(fp)
 800d198:	e0bff617 	ldw	r2,-40(fp)
 800d19c:	1885883a 	add	r2,r3,r2
 800d1a0:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 800d1a4:	e0fffe17 	ldw	r3,-8(fp)
 800d1a8:	e0bff617 	ldw	r2,-40(fp)
 800d1ac:	1885c83a 	sub	r2,r3,r2
 800d1b0:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800d1b4:	e0fff817 	ldw	r3,-32(fp)
 800d1b8:	e0bff617 	ldw	r2,-40(fp)
 800d1bc:	1885883a 	add	r2,r3,r2
 800d1c0:	10c1ffcc 	andi	r3,r2,2047
 800d1c4:	e0bffc17 	ldw	r2,-16(fp)
 800d1c8:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 800d1cc:	e0bffe17 	ldw	r2,-8(fp)
 800d1d0:	00bfcf16 	blt	zero,r2,800d110 <__alt_data_end+0xfc00d110>
 800d1d4:	00000106 	br	800d1dc <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 800d1d8:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 800d1dc:	e0fff517 	ldw	r3,-44(fp)
 800d1e0:	e0bffd17 	ldw	r2,-12(fp)
 800d1e4:	1880141e 	bne	r3,r2,800d238 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 800d1e8:	e0bfff17 	ldw	r2,-4(fp)
 800d1ec:	1090000c 	andi	r2,r2,16384
 800d1f0:	1000131e 	bne	r2,zero,800d240 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 800d1f4:	0001883a 	nop
 800d1f8:	e0bffc17 	ldw	r2,-16(fp)
 800d1fc:	10c00a17 	ldw	r3,40(r2)
 800d200:	e0bff717 	ldw	r2,-36(fp)
 800d204:	1880051e 	bne	r3,r2,800d21c <altera_avalon_jtag_uart_read+0x138>
 800d208:	e0bffc17 	ldw	r2,-16(fp)
 800d20c:	10c00917 	ldw	r3,36(r2)
 800d210:	e0bffc17 	ldw	r2,-16(fp)
 800d214:	10800117 	ldw	r2,4(r2)
 800d218:	18bff736 	bltu	r3,r2,800d1f8 <__alt_data_end+0xfc00d1f8>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 800d21c:	e0bffc17 	ldw	r2,-16(fp)
 800d220:	10c00a17 	ldw	r3,40(r2)
 800d224:	e0bff717 	ldw	r2,-36(fp)
 800d228:	18800726 	beq	r3,r2,800d248 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 800d22c:	e0bffe17 	ldw	r2,-8(fp)
 800d230:	00bfb716 	blt	zero,r2,800d110 <__alt_data_end+0xfc00d110>
 800d234:	00000506 	br	800d24c <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 800d238:	0001883a 	nop
 800d23c:	00000306 	br	800d24c <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 800d240:	0001883a 	nop
 800d244:	00000106 	br	800d24c <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 800d248:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 800d24c:	e0fff517 	ldw	r3,-44(fp)
 800d250:	e0bffd17 	ldw	r2,-12(fp)
 800d254:	18801826 	beq	r3,r2,800d2b8 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800d258:	0005303a 	rdctl	r2,status
 800d25c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800d260:	e0fffb17 	ldw	r3,-20(fp)
 800d264:	00bfff84 	movi	r2,-2
 800d268:	1884703a 	and	r2,r3,r2
 800d26c:	1001703a 	wrctl	status,r2
  
  return context;
 800d270:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 800d274:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 800d278:	e0bffc17 	ldw	r2,-16(fp)
 800d27c:	10800817 	ldw	r2,32(r2)
 800d280:	10c00054 	ori	r3,r2,1
 800d284:	e0bffc17 	ldw	r2,-16(fp)
 800d288:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 800d28c:	e0bffc17 	ldw	r2,-16(fp)
 800d290:	10800017 	ldw	r2,0(r2)
 800d294:	10800104 	addi	r2,r2,4
 800d298:	1007883a 	mov	r3,r2
 800d29c:	e0bffc17 	ldw	r2,-16(fp)
 800d2a0:	10800817 	ldw	r2,32(r2)
 800d2a4:	18800035 	stwio	r2,0(r3)
 800d2a8:	e0bffa17 	ldw	r2,-24(fp)
 800d2ac:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800d2b0:	e0bff917 	ldw	r2,-28(fp)
 800d2b4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 800d2b8:	e0fff517 	ldw	r3,-44(fp)
 800d2bc:	e0bffd17 	ldw	r2,-12(fp)
 800d2c0:	18800426 	beq	r3,r2,800d2d4 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 800d2c4:	e0fff517 	ldw	r3,-44(fp)
 800d2c8:	e0bffd17 	ldw	r2,-12(fp)
 800d2cc:	1885c83a 	sub	r2,r3,r2
 800d2d0:	00000606 	br	800d2ec <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 800d2d4:	e0bfff17 	ldw	r2,-4(fp)
 800d2d8:	1090000c 	andi	r2,r2,16384
 800d2dc:	10000226 	beq	r2,zero,800d2e8 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 800d2e0:	00bffd44 	movi	r2,-11
 800d2e4:	00000106 	br	800d2ec <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 800d2e8:	00bffec4 	movi	r2,-5
}
 800d2ec:	e037883a 	mov	sp,fp
 800d2f0:	dfc00117 	ldw	ra,4(sp)
 800d2f4:	df000017 	ldw	fp,0(sp)
 800d2f8:	dec00204 	addi	sp,sp,8
 800d2fc:	f800283a 	ret

0800d300 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 800d300:	defff304 	addi	sp,sp,-52
 800d304:	dfc00c15 	stw	ra,48(sp)
 800d308:	df000b15 	stw	fp,44(sp)
 800d30c:	df000b04 	addi	fp,sp,44
 800d310:	e13ffc15 	stw	r4,-16(fp)
 800d314:	e17ffd15 	stw	r5,-12(fp)
 800d318:	e1bffe15 	stw	r6,-8(fp)
 800d31c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 800d320:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 800d324:	e0bffd17 	ldw	r2,-12(fp)
 800d328:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 800d32c:	00003706 	br	800d40c <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 800d330:	e0bffc17 	ldw	r2,-16(fp)
 800d334:	10800c17 	ldw	r2,48(r2)
 800d338:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 800d33c:	e0bffc17 	ldw	r2,-16(fp)
 800d340:	10800d17 	ldw	r2,52(r2)
 800d344:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 800d348:	e0fff917 	ldw	r3,-28(fp)
 800d34c:	e0bff517 	ldw	r2,-44(fp)
 800d350:	1880062e 	bgeu	r3,r2,800d36c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 800d354:	e0fff517 	ldw	r3,-44(fp)
 800d358:	e0bff917 	ldw	r2,-28(fp)
 800d35c:	1885c83a 	sub	r2,r3,r2
 800d360:	10bfffc4 	addi	r2,r2,-1
 800d364:	e0bff615 	stw	r2,-40(fp)
 800d368:	00000b06 	br	800d398 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 800d36c:	e0bff517 	ldw	r2,-44(fp)
 800d370:	10000526 	beq	r2,zero,800d388 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 800d374:	00c20004 	movi	r3,2048
 800d378:	e0bff917 	ldw	r2,-28(fp)
 800d37c:	1885c83a 	sub	r2,r3,r2
 800d380:	e0bff615 	stw	r2,-40(fp)
 800d384:	00000406 	br	800d398 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 800d388:	00c1ffc4 	movi	r3,2047
 800d38c:	e0bff917 	ldw	r2,-28(fp)
 800d390:	1885c83a 	sub	r2,r3,r2
 800d394:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 800d398:	e0bff617 	ldw	r2,-40(fp)
 800d39c:	10001e26 	beq	r2,zero,800d418 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 800d3a0:	e0fffe17 	ldw	r3,-8(fp)
 800d3a4:	e0bff617 	ldw	r2,-40(fp)
 800d3a8:	1880022e 	bgeu	r3,r2,800d3b4 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 800d3ac:	e0bffe17 	ldw	r2,-8(fp)
 800d3b0:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 800d3b4:	e0bffc17 	ldw	r2,-16(fp)
 800d3b8:	10c20e04 	addi	r3,r2,2104
 800d3bc:	e0bff917 	ldw	r2,-28(fp)
 800d3c0:	1885883a 	add	r2,r3,r2
 800d3c4:	e1bff617 	ldw	r6,-40(fp)
 800d3c8:	e17ffd17 	ldw	r5,-12(fp)
 800d3cc:	1009883a 	mov	r4,r2
 800d3d0:	8005be00 	call	8005be0 <memcpy>
      ptr   += n;
 800d3d4:	e0fffd17 	ldw	r3,-12(fp)
 800d3d8:	e0bff617 	ldw	r2,-40(fp)
 800d3dc:	1885883a 	add	r2,r3,r2
 800d3e0:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 800d3e4:	e0fffe17 	ldw	r3,-8(fp)
 800d3e8:	e0bff617 	ldw	r2,-40(fp)
 800d3ec:	1885c83a 	sub	r2,r3,r2
 800d3f0:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800d3f4:	e0fff917 	ldw	r3,-28(fp)
 800d3f8:	e0bff617 	ldw	r2,-40(fp)
 800d3fc:	1885883a 	add	r2,r3,r2
 800d400:	10c1ffcc 	andi	r3,r2,2047
 800d404:	e0bffc17 	ldw	r2,-16(fp)
 800d408:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 800d40c:	e0bffe17 	ldw	r2,-8(fp)
 800d410:	00bfc716 	blt	zero,r2,800d330 <__alt_data_end+0xfc00d330>
 800d414:	00000106 	br	800d41c <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 800d418:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800d41c:	0005303a 	rdctl	r2,status
 800d420:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800d424:	e0fffb17 	ldw	r3,-20(fp)
 800d428:	00bfff84 	movi	r2,-2
 800d42c:	1884703a 	and	r2,r3,r2
 800d430:	1001703a 	wrctl	status,r2
  
  return context;
 800d434:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 800d438:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 800d43c:	e0bffc17 	ldw	r2,-16(fp)
 800d440:	10800817 	ldw	r2,32(r2)
 800d444:	10c00094 	ori	r3,r2,2
 800d448:	e0bffc17 	ldw	r2,-16(fp)
 800d44c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 800d450:	e0bffc17 	ldw	r2,-16(fp)
 800d454:	10800017 	ldw	r2,0(r2)
 800d458:	10800104 	addi	r2,r2,4
 800d45c:	1007883a 	mov	r3,r2
 800d460:	e0bffc17 	ldw	r2,-16(fp)
 800d464:	10800817 	ldw	r2,32(r2)
 800d468:	18800035 	stwio	r2,0(r3)
 800d46c:	e0bffa17 	ldw	r2,-24(fp)
 800d470:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800d474:	e0bff817 	ldw	r2,-32(fp)
 800d478:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 800d47c:	e0bffe17 	ldw	r2,-8(fp)
 800d480:	0080100e 	bge	zero,r2,800d4c4 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 800d484:	e0bfff17 	ldw	r2,-4(fp)
 800d488:	1090000c 	andi	r2,r2,16384
 800d48c:	1000101e 	bne	r2,zero,800d4d0 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 800d490:	0001883a 	nop
 800d494:	e0bffc17 	ldw	r2,-16(fp)
 800d498:	10c00d17 	ldw	r3,52(r2)
 800d49c:	e0bff517 	ldw	r2,-44(fp)
 800d4a0:	1880051e 	bne	r3,r2,800d4b8 <altera_avalon_jtag_uart_write+0x1b8>
 800d4a4:	e0bffc17 	ldw	r2,-16(fp)
 800d4a8:	10c00917 	ldw	r3,36(r2)
 800d4ac:	e0bffc17 	ldw	r2,-16(fp)
 800d4b0:	10800117 	ldw	r2,4(r2)
 800d4b4:	18bff736 	bltu	r3,r2,800d494 <__alt_data_end+0xfc00d494>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 800d4b8:	e0bffc17 	ldw	r2,-16(fp)
 800d4bc:	10800917 	ldw	r2,36(r2)
 800d4c0:	1000051e 	bne	r2,zero,800d4d8 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 800d4c4:	e0bffe17 	ldw	r2,-8(fp)
 800d4c8:	00bfd016 	blt	zero,r2,800d40c <__alt_data_end+0xfc00d40c>
 800d4cc:	00000306 	br	800d4dc <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 800d4d0:	0001883a 	nop
 800d4d4:	00000106 	br	800d4dc <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 800d4d8:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 800d4dc:	e0fffd17 	ldw	r3,-12(fp)
 800d4e0:	e0bff717 	ldw	r2,-36(fp)
 800d4e4:	18800426 	beq	r3,r2,800d4f8 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 800d4e8:	e0fffd17 	ldw	r3,-12(fp)
 800d4ec:	e0bff717 	ldw	r2,-36(fp)
 800d4f0:	1885c83a 	sub	r2,r3,r2
 800d4f4:	00000606 	br	800d510 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 800d4f8:	e0bfff17 	ldw	r2,-4(fp)
 800d4fc:	1090000c 	andi	r2,r2,16384
 800d500:	10000226 	beq	r2,zero,800d50c <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 800d504:	00bffd44 	movi	r2,-11
 800d508:	00000106 	br	800d510 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 800d50c:	00bffec4 	movi	r2,-5
}
 800d510:	e037883a 	mov	sp,fp
 800d514:	dfc00117 	ldw	ra,4(sp)
 800d518:	df000017 	ldw	fp,0(sp)
 800d51c:	dec00204 	addi	sp,sp,8
 800d520:	f800283a 	ret

0800d524 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 800d524:	defffa04 	addi	sp,sp,-24
 800d528:	dfc00515 	stw	ra,20(sp)
 800d52c:	df000415 	stw	fp,16(sp)
 800d530:	df000404 	addi	fp,sp,16
 800d534:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 800d538:	0007883a 	mov	r3,zero
 800d53c:	e0bfff17 	ldw	r2,-4(fp)
 800d540:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 800d544:	e0bfff17 	ldw	r2,-4(fp)
 800d548:	10800104 	addi	r2,r2,4
 800d54c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800d550:	0005303a 	rdctl	r2,status
 800d554:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800d558:	e0fffd17 	ldw	r3,-12(fp)
 800d55c:	00bfff84 	movi	r2,-2
 800d560:	1884703a 	and	r2,r3,r2
 800d564:	1001703a 	wrctl	status,r2
  
  return context;
 800d568:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 800d56c:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 800d570:	800e3600 	call	800e360 <alt_tick>
 800d574:	e0bffc17 	ldw	r2,-16(fp)
 800d578:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800d57c:	e0bffe17 	ldw	r2,-8(fp)
 800d580:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 800d584:	0001883a 	nop
 800d588:	e037883a 	mov	sp,fp
 800d58c:	dfc00117 	ldw	ra,4(sp)
 800d590:	df000017 	ldw	fp,0(sp)
 800d594:	dec00204 	addi	sp,sp,8
 800d598:	f800283a 	ret

0800d59c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 800d59c:	defff804 	addi	sp,sp,-32
 800d5a0:	dfc00715 	stw	ra,28(sp)
 800d5a4:	df000615 	stw	fp,24(sp)
 800d5a8:	df000604 	addi	fp,sp,24
 800d5ac:	e13ffc15 	stw	r4,-16(fp)
 800d5b0:	e17ffd15 	stw	r5,-12(fp)
 800d5b4:	e1bffe15 	stw	r6,-8(fp)
 800d5b8:	e1ffff15 	stw	r7,-4(fp)
 800d5bc:	e0bfff17 	ldw	r2,-4(fp)
 800d5c0:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 800d5c4:	d0a73217 	ldw	r2,-25400(gp)
 800d5c8:	1000021e 	bne	r2,zero,800d5d4 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 800d5cc:	e0bffb17 	ldw	r2,-20(fp)
 800d5d0:	d0a73215 	stw	r2,-25400(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 800d5d4:	e0bffc17 	ldw	r2,-16(fp)
 800d5d8:	10800104 	addi	r2,r2,4
 800d5dc:	00c001c4 	movi	r3,7
 800d5e0:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 800d5e4:	d8000015 	stw	zero,0(sp)
 800d5e8:	e1fffc17 	ldw	r7,-16(fp)
 800d5ec:	01820074 	movhi	r6,2049
 800d5f0:	31b54904 	addi	r6,r6,-10972
 800d5f4:	e17ffe17 	ldw	r5,-8(fp)
 800d5f8:	e13ffd17 	ldw	r4,-12(fp)
 800d5fc:	800dbbc0 	call	800dbbc <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 800d600:	0001883a 	nop
 800d604:	e037883a 	mov	sp,fp
 800d608:	dfc00117 	ldw	ra,4(sp)
 800d60c:	df000017 	ldw	fp,0(sp)
 800d610:	dec00204 	addi	sp,sp,8
 800d614:	f800283a 	ret

0800d618 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 800d618:	defff504 	addi	sp,sp,-44
 800d61c:	df000a15 	stw	fp,40(sp)
 800d620:	df000a04 	addi	fp,sp,40
 800d624:	e13ffc15 	stw	r4,-16(fp)
 800d628:	e17ffd15 	stw	r5,-12(fp)
 800d62c:	e1bffe15 	stw	r6,-8(fp)
 800d630:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 800d634:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 800d638:	d0a73217 	ldw	r2,-25400(gp)
  
  if (alt_ticks_per_second ())
 800d63c:	10003c26 	beq	r2,zero,800d730 <alt_alarm_start+0x118>
  {
    if (alarm)
 800d640:	e0bffc17 	ldw	r2,-16(fp)
 800d644:	10003826 	beq	r2,zero,800d728 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 800d648:	e0bffc17 	ldw	r2,-16(fp)
 800d64c:	e0fffe17 	ldw	r3,-8(fp)
 800d650:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 800d654:	e0bffc17 	ldw	r2,-16(fp)
 800d658:	e0ffff17 	ldw	r3,-4(fp)
 800d65c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800d660:	0005303a 	rdctl	r2,status
 800d664:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800d668:	e0fff917 	ldw	r3,-28(fp)
 800d66c:	00bfff84 	movi	r2,-2
 800d670:	1884703a 	and	r2,r3,r2
 800d674:	1001703a 	wrctl	status,r2
  
  return context;
 800d678:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 800d67c:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 800d680:	d0a73317 	ldw	r2,-25396(gp)
      
      current_nticks = alt_nticks();
 800d684:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 800d688:	e0fffd17 	ldw	r3,-12(fp)
 800d68c:	e0bff617 	ldw	r2,-40(fp)
 800d690:	1885883a 	add	r2,r3,r2
 800d694:	10c00044 	addi	r3,r2,1
 800d698:	e0bffc17 	ldw	r2,-16(fp)
 800d69c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 800d6a0:	e0bffc17 	ldw	r2,-16(fp)
 800d6a4:	10c00217 	ldw	r3,8(r2)
 800d6a8:	e0bff617 	ldw	r2,-40(fp)
 800d6ac:	1880042e 	bgeu	r3,r2,800d6c0 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 800d6b0:	e0bffc17 	ldw	r2,-16(fp)
 800d6b4:	00c00044 	movi	r3,1
 800d6b8:	10c00405 	stb	r3,16(r2)
 800d6bc:	00000206 	br	800d6c8 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 800d6c0:	e0bffc17 	ldw	r2,-16(fp)
 800d6c4:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 800d6c8:	e0bffc17 	ldw	r2,-16(fp)
 800d6cc:	d0e00e04 	addi	r3,gp,-32712
 800d6d0:	e0fffa15 	stw	r3,-24(fp)
 800d6d4:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 800d6d8:	e0bffb17 	ldw	r2,-20(fp)
 800d6dc:	e0fffa17 	ldw	r3,-24(fp)
 800d6e0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 800d6e4:	e0bffa17 	ldw	r2,-24(fp)
 800d6e8:	10c00017 	ldw	r3,0(r2)
 800d6ec:	e0bffb17 	ldw	r2,-20(fp)
 800d6f0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 800d6f4:	e0bffa17 	ldw	r2,-24(fp)
 800d6f8:	10800017 	ldw	r2,0(r2)
 800d6fc:	e0fffb17 	ldw	r3,-20(fp)
 800d700:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 800d704:	e0bffa17 	ldw	r2,-24(fp)
 800d708:	e0fffb17 	ldw	r3,-20(fp)
 800d70c:	10c00015 	stw	r3,0(r2)
 800d710:	e0bff817 	ldw	r2,-32(fp)
 800d714:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800d718:	e0bff717 	ldw	r2,-36(fp)
 800d71c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 800d720:	0005883a 	mov	r2,zero
 800d724:	00000306 	br	800d734 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 800d728:	00bffa84 	movi	r2,-22
 800d72c:	00000106 	br	800d734 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 800d730:	00bfde84 	movi	r2,-134
  }
}
 800d734:	e037883a 	mov	sp,fp
 800d738:	df000017 	ldw	fp,0(sp)
 800d73c:	dec00104 	addi	sp,sp,4
 800d740:	f800283a 	ret

0800d744 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 800d744:	defffa04 	addi	sp,sp,-24
 800d748:	dfc00515 	stw	ra,20(sp)
 800d74c:	df000415 	stw	fp,16(sp)
 800d750:	df000404 	addi	fp,sp,16
 800d754:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
 800d758:	00800244 	movi	r2,9
 800d75c:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 800d760:	014003f4 	movhi	r5,15
 800d764:	29509004 	addi	r5,r5,16960
 800d768:	e13ffd17 	ldw	r4,-12(fp)
 800d76c:	80014a80 	call	80014a8 <__mulsi3>
 800d770:	100b883a 	mov	r5,r2
 800d774:	0100bef4 	movhi	r4,763
 800d778:	213c2004 	addi	r4,r4,-3968
 800d77c:	80013ec0 	call	80013ec <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 800d780:	100b883a 	mov	r5,r2
 800d784:	01200034 	movhi	r4,32768
 800d788:	213fffc4 	addi	r4,r4,-1
 800d78c:	80013ec0 	call	80013ec <__udivsi3>
 800d790:	100b883a 	mov	r5,r2
 800d794:	e13fff17 	ldw	r4,-4(fp)
 800d798:	80013ec0 	call	80013ec <__udivsi3>
 800d79c:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 800d7a0:	e0bffe17 	ldw	r2,-8(fp)
 800d7a4:	10002a26 	beq	r2,zero,800d850 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 800d7a8:	e03ffc15 	stw	zero,-16(fp)
 800d7ac:	00001706 	br	800d80c <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 800d7b0:	00a00034 	movhi	r2,32768
 800d7b4:	10bfffc4 	addi	r2,r2,-1
 800d7b8:	10bfffc4 	addi	r2,r2,-1
 800d7bc:	103ffe1e 	bne	r2,zero,800d7b8 <__alt_data_end+0xfc00d7b8>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 800d7c0:	014003f4 	movhi	r5,15
 800d7c4:	29509004 	addi	r5,r5,16960
 800d7c8:	e13ffd17 	ldw	r4,-12(fp)
 800d7cc:	80014a80 	call	80014a8 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 800d7d0:	100b883a 	mov	r5,r2
 800d7d4:	0100bef4 	movhi	r4,763
 800d7d8:	213c2004 	addi	r4,r4,-3968
 800d7dc:	80013ec0 	call	80013ec <__udivsi3>
 800d7e0:	100b883a 	mov	r5,r2
 800d7e4:	01200034 	movhi	r4,32768
 800d7e8:	213fffc4 	addi	r4,r4,-1
 800d7ec:	80013ec0 	call	80013ec <__udivsi3>
 800d7f0:	1007883a 	mov	r3,r2
 800d7f4:	e0bfff17 	ldw	r2,-4(fp)
 800d7f8:	10c5c83a 	sub	r2,r2,r3
 800d7fc:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 800d800:	e0bffc17 	ldw	r2,-16(fp)
 800d804:	10800044 	addi	r2,r2,1
 800d808:	e0bffc15 	stw	r2,-16(fp)
 800d80c:	e0fffc17 	ldw	r3,-16(fp)
 800d810:	e0bffe17 	ldw	r2,-8(fp)
 800d814:	18bfe616 	blt	r3,r2,800d7b0 <__alt_data_end+0xfc00d7b0>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 800d818:	014003f4 	movhi	r5,15
 800d81c:	29509004 	addi	r5,r5,16960
 800d820:	e13ffd17 	ldw	r4,-12(fp)
 800d824:	80014a80 	call	80014a8 <__mulsi3>
 800d828:	100b883a 	mov	r5,r2
 800d82c:	0100bef4 	movhi	r4,763
 800d830:	213c2004 	addi	r4,r4,-3968
 800d834:	80013ec0 	call	80013ec <__udivsi3>
 800d838:	e17fff17 	ldw	r5,-4(fp)
 800d83c:	1009883a 	mov	r4,r2
 800d840:	80014a80 	call	80014a8 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 800d844:	10bfffc4 	addi	r2,r2,-1
 800d848:	103ffe1e 	bne	r2,zero,800d844 <__alt_data_end+0xfc00d844>
 800d84c:	00000d06 	br	800d884 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 800d850:	014003f4 	movhi	r5,15
 800d854:	29509004 	addi	r5,r5,16960
 800d858:	e13ffd17 	ldw	r4,-12(fp)
 800d85c:	80014a80 	call	80014a8 <__mulsi3>
 800d860:	100b883a 	mov	r5,r2
 800d864:	0100bef4 	movhi	r4,763
 800d868:	213c2004 	addi	r4,r4,-3968
 800d86c:	80013ec0 	call	80013ec <__udivsi3>
 800d870:	e17fff17 	ldw	r5,-4(fp)
 800d874:	1009883a 	mov	r4,r2
 800d878:	80014a80 	call	80014a8 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 800d87c:	10bfffc4 	addi	r2,r2,-1
 800d880:	00bffe16 	blt	zero,r2,800d87c <__alt_data_end+0xfc00d87c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 800d884:	0005883a 	mov	r2,zero
}
 800d888:	e037883a 	mov	sp,fp
 800d88c:	dfc00117 	ldw	ra,4(sp)
 800d890:	df000017 	ldw	fp,0(sp)
 800d894:	dec00204 	addi	sp,sp,8
 800d898:	f800283a 	ret

0800d89c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800d89c:	defffe04 	addi	sp,sp,-8
 800d8a0:	dfc00115 	stw	ra,4(sp)
 800d8a4:	df000015 	stw	fp,0(sp)
 800d8a8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800d8ac:	d0a00c17 	ldw	r2,-32720(gp)
 800d8b0:	10000326 	beq	r2,zero,800d8c0 <alt_get_errno+0x24>
 800d8b4:	d0a00c17 	ldw	r2,-32720(gp)
 800d8b8:	103ee83a 	callr	r2
 800d8bc:	00000106 	br	800d8c4 <alt_get_errno+0x28>
 800d8c0:	d0a72d04 	addi	r2,gp,-25420
}
 800d8c4:	e037883a 	mov	sp,fp
 800d8c8:	dfc00117 	ldw	ra,4(sp)
 800d8cc:	df000017 	ldw	fp,0(sp)
 800d8d0:	dec00204 	addi	sp,sp,8
 800d8d4:	f800283a 	ret

0800d8d8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 800d8d8:	defffb04 	addi	sp,sp,-20
 800d8dc:	dfc00415 	stw	ra,16(sp)
 800d8e0:	df000315 	stw	fp,12(sp)
 800d8e4:	df000304 	addi	fp,sp,12
 800d8e8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 800d8ec:	e0bfff17 	ldw	r2,-4(fp)
 800d8f0:	10000816 	blt	r2,zero,800d914 <close+0x3c>
 800d8f4:	01400304 	movi	r5,12
 800d8f8:	e13fff17 	ldw	r4,-4(fp)
 800d8fc:	80014a80 	call	80014a8 <__mulsi3>
 800d900:	1007883a 	mov	r3,r2
 800d904:	00820074 	movhi	r2,2049
 800d908:	10825a04 	addi	r2,r2,2408
 800d90c:	1885883a 	add	r2,r3,r2
 800d910:	00000106 	br	800d918 <close+0x40>
 800d914:	0005883a 	mov	r2,zero
 800d918:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 800d91c:	e0bffd17 	ldw	r2,-12(fp)
 800d920:	10001926 	beq	r2,zero,800d988 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 800d924:	e0bffd17 	ldw	r2,-12(fp)
 800d928:	10800017 	ldw	r2,0(r2)
 800d92c:	10800417 	ldw	r2,16(r2)
 800d930:	10000626 	beq	r2,zero,800d94c <close+0x74>
 800d934:	e0bffd17 	ldw	r2,-12(fp)
 800d938:	10800017 	ldw	r2,0(r2)
 800d93c:	10800417 	ldw	r2,16(r2)
 800d940:	e13ffd17 	ldw	r4,-12(fp)
 800d944:	103ee83a 	callr	r2
 800d948:	00000106 	br	800d950 <close+0x78>
 800d94c:	0005883a 	mov	r2,zero
 800d950:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 800d954:	e13fff17 	ldw	r4,-4(fp)
 800d958:	800e2400 	call	800e240 <alt_release_fd>
    if (rval < 0)
 800d95c:	e0bffe17 	ldw	r2,-8(fp)
 800d960:	1000070e 	bge	r2,zero,800d980 <close+0xa8>
    {
      ALT_ERRNO = -rval;
 800d964:	800d89c0 	call	800d89c <alt_get_errno>
 800d968:	1007883a 	mov	r3,r2
 800d96c:	e0bffe17 	ldw	r2,-8(fp)
 800d970:	0085c83a 	sub	r2,zero,r2
 800d974:	18800015 	stw	r2,0(r3)
      return -1;
 800d978:	00bfffc4 	movi	r2,-1
 800d97c:	00000706 	br	800d99c <close+0xc4>
    }
    return 0;
 800d980:	0005883a 	mov	r2,zero
 800d984:	00000506 	br	800d99c <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800d988:	800d89c0 	call	800d89c <alt_get_errno>
 800d98c:	1007883a 	mov	r3,r2
 800d990:	00801444 	movi	r2,81
 800d994:	18800015 	stw	r2,0(r3)
    return -1;
 800d998:	00bfffc4 	movi	r2,-1
  }
}
 800d99c:	e037883a 	mov	sp,fp
 800d9a0:	dfc00117 	ldw	ra,4(sp)
 800d9a4:	df000017 	ldw	fp,0(sp)
 800d9a8:	dec00204 	addi	sp,sp,8
 800d9ac:	f800283a 	ret

0800d9b0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 800d9b0:	deffff04 	addi	sp,sp,-4
 800d9b4:	df000015 	stw	fp,0(sp)
 800d9b8:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 800d9bc:	0001883a 	nop
 800d9c0:	e037883a 	mov	sp,fp
 800d9c4:	df000017 	ldw	fp,0(sp)
 800d9c8:	dec00104 	addi	sp,sp,4
 800d9cc:	f800283a 	ret

0800d9d0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 800d9d0:	defffc04 	addi	sp,sp,-16
 800d9d4:	df000315 	stw	fp,12(sp)
 800d9d8:	df000304 	addi	fp,sp,12
 800d9dc:	e13ffd15 	stw	r4,-12(fp)
 800d9e0:	e17ffe15 	stw	r5,-8(fp)
 800d9e4:	e1bfff15 	stw	r6,-4(fp)
  return len;
 800d9e8:	e0bfff17 	ldw	r2,-4(fp)
}
 800d9ec:	e037883a 	mov	sp,fp
 800d9f0:	df000017 	ldw	fp,0(sp)
 800d9f4:	dec00104 	addi	sp,sp,4
 800d9f8:	f800283a 	ret

0800d9fc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800d9fc:	defffe04 	addi	sp,sp,-8
 800da00:	dfc00115 	stw	ra,4(sp)
 800da04:	df000015 	stw	fp,0(sp)
 800da08:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800da0c:	d0a00c17 	ldw	r2,-32720(gp)
 800da10:	10000326 	beq	r2,zero,800da20 <alt_get_errno+0x24>
 800da14:	d0a00c17 	ldw	r2,-32720(gp)
 800da18:	103ee83a 	callr	r2
 800da1c:	00000106 	br	800da24 <alt_get_errno+0x28>
 800da20:	d0a72d04 	addi	r2,gp,-25420
}
 800da24:	e037883a 	mov	sp,fp
 800da28:	dfc00117 	ldw	ra,4(sp)
 800da2c:	df000017 	ldw	fp,0(sp)
 800da30:	dec00204 	addi	sp,sp,8
 800da34:	f800283a 	ret

0800da38 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 800da38:	defffa04 	addi	sp,sp,-24
 800da3c:	dfc00515 	stw	ra,20(sp)
 800da40:	df000415 	stw	fp,16(sp)
 800da44:	df000404 	addi	fp,sp,16
 800da48:	e13ffe15 	stw	r4,-8(fp)
 800da4c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 800da50:	e0bffe17 	ldw	r2,-8(fp)
 800da54:	10000326 	beq	r2,zero,800da64 <alt_dev_llist_insert+0x2c>
 800da58:	e0bffe17 	ldw	r2,-8(fp)
 800da5c:	10800217 	ldw	r2,8(r2)
 800da60:	1000061e 	bne	r2,zero,800da7c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 800da64:	800d9fc0 	call	800d9fc <alt_get_errno>
 800da68:	1007883a 	mov	r3,r2
 800da6c:	00800584 	movi	r2,22
 800da70:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 800da74:	00bffa84 	movi	r2,-22
 800da78:	00001306 	br	800dac8 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 800da7c:	e0bffe17 	ldw	r2,-8(fp)
 800da80:	e0ffff17 	ldw	r3,-4(fp)
 800da84:	e0fffc15 	stw	r3,-16(fp)
 800da88:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 800da8c:	e0bffd17 	ldw	r2,-12(fp)
 800da90:	e0fffc17 	ldw	r3,-16(fp)
 800da94:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 800da98:	e0bffc17 	ldw	r2,-16(fp)
 800da9c:	10c00017 	ldw	r3,0(r2)
 800daa0:	e0bffd17 	ldw	r2,-12(fp)
 800daa4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 800daa8:	e0bffc17 	ldw	r2,-16(fp)
 800daac:	10800017 	ldw	r2,0(r2)
 800dab0:	e0fffd17 	ldw	r3,-12(fp)
 800dab4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 800dab8:	e0bffc17 	ldw	r2,-16(fp)
 800dabc:	e0fffd17 	ldw	r3,-12(fp)
 800dac0:	10c00015 	stw	r3,0(r2)

  return 0;  
 800dac4:	0005883a 	mov	r2,zero
}
 800dac8:	e037883a 	mov	sp,fp
 800dacc:	dfc00117 	ldw	ra,4(sp)
 800dad0:	df000017 	ldw	fp,0(sp)
 800dad4:	dec00204 	addi	sp,sp,8
 800dad8:	f800283a 	ret

0800dadc <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 800dadc:	defffd04 	addi	sp,sp,-12
 800dae0:	dfc00215 	stw	ra,8(sp)
 800dae4:	df000115 	stw	fp,4(sp)
 800dae8:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 800daec:	00820074 	movhi	r2,2049
 800daf0:	10bac504 	addi	r2,r2,-5356
 800daf4:	e0bfff15 	stw	r2,-4(fp)
 800daf8:	00000606 	br	800db14 <_do_ctors+0x38>
        (*ctor) (); 
 800dafc:	e0bfff17 	ldw	r2,-4(fp)
 800db00:	10800017 	ldw	r2,0(r2)
 800db04:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 800db08:	e0bfff17 	ldw	r2,-4(fp)
 800db0c:	10bfff04 	addi	r2,r2,-4
 800db10:	e0bfff15 	stw	r2,-4(fp)
 800db14:	e0ffff17 	ldw	r3,-4(fp)
 800db18:	00820074 	movhi	r2,2049
 800db1c:	10bac604 	addi	r2,r2,-5352
 800db20:	18bff62e 	bgeu	r3,r2,800dafc <__alt_data_end+0xfc00dafc>
        (*ctor) (); 
}
 800db24:	0001883a 	nop
 800db28:	e037883a 	mov	sp,fp
 800db2c:	dfc00117 	ldw	ra,4(sp)
 800db30:	df000017 	ldw	fp,0(sp)
 800db34:	dec00204 	addi	sp,sp,8
 800db38:	f800283a 	ret

0800db3c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 800db3c:	defffd04 	addi	sp,sp,-12
 800db40:	dfc00215 	stw	ra,8(sp)
 800db44:	df000115 	stw	fp,4(sp)
 800db48:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 800db4c:	00820074 	movhi	r2,2049
 800db50:	10bac504 	addi	r2,r2,-5356
 800db54:	e0bfff15 	stw	r2,-4(fp)
 800db58:	00000606 	br	800db74 <_do_dtors+0x38>
        (*dtor) (); 
 800db5c:	e0bfff17 	ldw	r2,-4(fp)
 800db60:	10800017 	ldw	r2,0(r2)
 800db64:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 800db68:	e0bfff17 	ldw	r2,-4(fp)
 800db6c:	10bfff04 	addi	r2,r2,-4
 800db70:	e0bfff15 	stw	r2,-4(fp)
 800db74:	e0ffff17 	ldw	r3,-4(fp)
 800db78:	00820074 	movhi	r2,2049
 800db7c:	10bac604 	addi	r2,r2,-5352
 800db80:	18bff62e 	bgeu	r3,r2,800db5c <__alt_data_end+0xfc00db5c>
        (*dtor) (); 
}
 800db84:	0001883a 	nop
 800db88:	e037883a 	mov	sp,fp
 800db8c:	dfc00117 	ldw	ra,4(sp)
 800db90:	df000017 	ldw	fp,0(sp)
 800db94:	dec00204 	addi	sp,sp,8
 800db98:	f800283a 	ret

0800db9c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 800db9c:	deffff04 	addi	sp,sp,-4
 800dba0:	df000015 	stw	fp,0(sp)
 800dba4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 800dba8:	0001883a 	nop
 800dbac:	e037883a 	mov	sp,fp
 800dbb0:	df000017 	ldw	fp,0(sp)
 800dbb4:	dec00104 	addi	sp,sp,4
 800dbb8:	f800283a 	ret

0800dbbc <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 800dbbc:	defff904 	addi	sp,sp,-28
 800dbc0:	dfc00615 	stw	ra,24(sp)
 800dbc4:	df000515 	stw	fp,20(sp)
 800dbc8:	df000504 	addi	fp,sp,20
 800dbcc:	e13ffc15 	stw	r4,-16(fp)
 800dbd0:	e17ffd15 	stw	r5,-12(fp)
 800dbd4:	e1bffe15 	stw	r6,-8(fp)
 800dbd8:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 800dbdc:	e0800217 	ldw	r2,8(fp)
 800dbe0:	d8800015 	stw	r2,0(sp)
 800dbe4:	e1ffff17 	ldw	r7,-4(fp)
 800dbe8:	e1bffe17 	ldw	r6,-8(fp)
 800dbec:	e17ffd17 	ldw	r5,-12(fp)
 800dbf0:	e13ffc17 	ldw	r4,-16(fp)
 800dbf4:	800dd6c0 	call	800dd6c <alt_iic_isr_register>
}  
 800dbf8:	e037883a 	mov	sp,fp
 800dbfc:	dfc00117 	ldw	ra,4(sp)
 800dc00:	df000017 	ldw	fp,0(sp)
 800dc04:	dec00204 	addi	sp,sp,8
 800dc08:	f800283a 	ret

0800dc0c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 800dc0c:	defff904 	addi	sp,sp,-28
 800dc10:	df000615 	stw	fp,24(sp)
 800dc14:	df000604 	addi	fp,sp,24
 800dc18:	e13ffe15 	stw	r4,-8(fp)
 800dc1c:	e17fff15 	stw	r5,-4(fp)
 800dc20:	e0bfff17 	ldw	r2,-4(fp)
 800dc24:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800dc28:	0005303a 	rdctl	r2,status
 800dc2c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800dc30:	e0fffb17 	ldw	r3,-20(fp)
 800dc34:	00bfff84 	movi	r2,-2
 800dc38:	1884703a 	and	r2,r3,r2
 800dc3c:	1001703a 	wrctl	status,r2
  
  return context;
 800dc40:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 800dc44:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 800dc48:	00c00044 	movi	r3,1
 800dc4c:	e0bffa17 	ldw	r2,-24(fp)
 800dc50:	1884983a 	sll	r2,r3,r2
 800dc54:	1007883a 	mov	r3,r2
 800dc58:	d0a73117 	ldw	r2,-25404(gp)
 800dc5c:	1884b03a 	or	r2,r3,r2
 800dc60:	d0a73115 	stw	r2,-25404(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 800dc64:	d0a73117 	ldw	r2,-25404(gp)
 800dc68:	100170fa 	wrctl	ienable,r2
 800dc6c:	e0bffc17 	ldw	r2,-16(fp)
 800dc70:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800dc74:	e0bffd17 	ldw	r2,-12(fp)
 800dc78:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 800dc7c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 800dc80:	0001883a 	nop
}
 800dc84:	e037883a 	mov	sp,fp
 800dc88:	df000017 	ldw	fp,0(sp)
 800dc8c:	dec00104 	addi	sp,sp,4
 800dc90:	f800283a 	ret

0800dc94 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 800dc94:	defff904 	addi	sp,sp,-28
 800dc98:	df000615 	stw	fp,24(sp)
 800dc9c:	df000604 	addi	fp,sp,24
 800dca0:	e13ffe15 	stw	r4,-8(fp)
 800dca4:	e17fff15 	stw	r5,-4(fp)
 800dca8:	e0bfff17 	ldw	r2,-4(fp)
 800dcac:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800dcb0:	0005303a 	rdctl	r2,status
 800dcb4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800dcb8:	e0fffb17 	ldw	r3,-20(fp)
 800dcbc:	00bfff84 	movi	r2,-2
 800dcc0:	1884703a 	and	r2,r3,r2
 800dcc4:	1001703a 	wrctl	status,r2
  
  return context;
 800dcc8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 800dccc:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 800dcd0:	00c00044 	movi	r3,1
 800dcd4:	e0bffa17 	ldw	r2,-24(fp)
 800dcd8:	1884983a 	sll	r2,r3,r2
 800dcdc:	0084303a 	nor	r2,zero,r2
 800dce0:	1007883a 	mov	r3,r2
 800dce4:	d0a73117 	ldw	r2,-25404(gp)
 800dce8:	1884703a 	and	r2,r3,r2
 800dcec:	d0a73115 	stw	r2,-25404(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 800dcf0:	d0a73117 	ldw	r2,-25404(gp)
 800dcf4:	100170fa 	wrctl	ienable,r2
 800dcf8:	e0bffc17 	ldw	r2,-16(fp)
 800dcfc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800dd00:	e0bffd17 	ldw	r2,-12(fp)
 800dd04:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 800dd08:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 800dd0c:	0001883a 	nop
}
 800dd10:	e037883a 	mov	sp,fp
 800dd14:	df000017 	ldw	fp,0(sp)
 800dd18:	dec00104 	addi	sp,sp,4
 800dd1c:	f800283a 	ret

0800dd20 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 800dd20:	defffc04 	addi	sp,sp,-16
 800dd24:	df000315 	stw	fp,12(sp)
 800dd28:	df000304 	addi	fp,sp,12
 800dd2c:	e13ffe15 	stw	r4,-8(fp)
 800dd30:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 800dd34:	000530fa 	rdctl	r2,ienable
 800dd38:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 800dd3c:	00c00044 	movi	r3,1
 800dd40:	e0bfff17 	ldw	r2,-4(fp)
 800dd44:	1884983a 	sll	r2,r3,r2
 800dd48:	1007883a 	mov	r3,r2
 800dd4c:	e0bffd17 	ldw	r2,-12(fp)
 800dd50:	1884703a 	and	r2,r3,r2
 800dd54:	1004c03a 	cmpne	r2,r2,zero
 800dd58:	10803fcc 	andi	r2,r2,255
}
 800dd5c:	e037883a 	mov	sp,fp
 800dd60:	df000017 	ldw	fp,0(sp)
 800dd64:	dec00104 	addi	sp,sp,4
 800dd68:	f800283a 	ret

0800dd6c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 800dd6c:	defff504 	addi	sp,sp,-44
 800dd70:	dfc00a15 	stw	ra,40(sp)
 800dd74:	df000915 	stw	fp,36(sp)
 800dd78:	df000904 	addi	fp,sp,36
 800dd7c:	e13ffc15 	stw	r4,-16(fp)
 800dd80:	e17ffd15 	stw	r5,-12(fp)
 800dd84:	e1bffe15 	stw	r6,-8(fp)
 800dd88:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 800dd8c:	00bffa84 	movi	r2,-22
 800dd90:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 800dd94:	e0bffd17 	ldw	r2,-12(fp)
 800dd98:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 800dd9c:	e0bff817 	ldw	r2,-32(fp)
 800dda0:	10800808 	cmpgei	r2,r2,32
 800dda4:	1000271e 	bne	r2,zero,800de44 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800dda8:	0005303a 	rdctl	r2,status
 800ddac:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800ddb0:	e0fffb17 	ldw	r3,-20(fp)
 800ddb4:	00bfff84 	movi	r2,-2
 800ddb8:	1884703a 	and	r2,r3,r2
 800ddbc:	1001703a 	wrctl	status,r2
  
  return context;
 800ddc0:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 800ddc4:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 800ddc8:	00820074 	movhi	r2,2049
 800ddcc:	1089f904 	addi	r2,r2,10212
 800ddd0:	e0fff817 	ldw	r3,-32(fp)
 800ddd4:	180690fa 	slli	r3,r3,3
 800ddd8:	10c5883a 	add	r2,r2,r3
 800dddc:	e0fffe17 	ldw	r3,-8(fp)
 800dde0:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 800dde4:	00820074 	movhi	r2,2049
 800dde8:	1089f904 	addi	r2,r2,10212
 800ddec:	e0fff817 	ldw	r3,-32(fp)
 800ddf0:	180690fa 	slli	r3,r3,3
 800ddf4:	10c5883a 	add	r2,r2,r3
 800ddf8:	10800104 	addi	r2,r2,4
 800ddfc:	e0ffff17 	ldw	r3,-4(fp)
 800de00:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 800de04:	e0bffe17 	ldw	r2,-8(fp)
 800de08:	10000526 	beq	r2,zero,800de20 <alt_iic_isr_register+0xb4>
 800de0c:	e0bff817 	ldw	r2,-32(fp)
 800de10:	100b883a 	mov	r5,r2
 800de14:	e13ffc17 	ldw	r4,-16(fp)
 800de18:	800dc0c0 	call	800dc0c <alt_ic_irq_enable>
 800de1c:	00000406 	br	800de30 <alt_iic_isr_register+0xc4>
 800de20:	e0bff817 	ldw	r2,-32(fp)
 800de24:	100b883a 	mov	r5,r2
 800de28:	e13ffc17 	ldw	r4,-16(fp)
 800de2c:	800dc940 	call	800dc94 <alt_ic_irq_disable>
 800de30:	e0bff715 	stw	r2,-36(fp)
 800de34:	e0bffa17 	ldw	r2,-24(fp)
 800de38:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800de3c:	e0bff917 	ldw	r2,-28(fp)
 800de40:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 800de44:	e0bff717 	ldw	r2,-36(fp)
}
 800de48:	e037883a 	mov	sp,fp
 800de4c:	dfc00117 	ldw	ra,4(sp)
 800de50:	df000017 	ldw	fp,0(sp)
 800de54:	dec00204 	addi	sp,sp,8
 800de58:	f800283a 	ret

0800de5c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 800de5c:	defff804 	addi	sp,sp,-32
 800de60:	dfc00715 	stw	ra,28(sp)
 800de64:	df000615 	stw	fp,24(sp)
 800de68:	dc000515 	stw	r16,20(sp)
 800de6c:	df000604 	addi	fp,sp,24
 800de70:	e13ffb15 	stw	r4,-20(fp)
 800de74:	e17ffc15 	stw	r5,-16(fp)
 800de78:	e1bffd15 	stw	r6,-12(fp)
 800de7c:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
 800de80:	e1bffe17 	ldw	r6,-8(fp)
 800de84:	e17ffd17 	ldw	r5,-12(fp)
 800de88:	e13ffc17 	ldw	r4,-16(fp)
 800de8c:	800e0e40 	call	800e0e4 <open>
 800de90:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
 800de94:	e0bffa17 	ldw	r2,-24(fp)
 800de98:	10002216 	blt	r2,zero,800df24 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 800de9c:	04020074 	movhi	r16,2049
 800dea0:	84025a04 	addi	r16,r16,2408
 800dea4:	e0bffa17 	ldw	r2,-24(fp)
 800dea8:	01400304 	movi	r5,12
 800deac:	1009883a 	mov	r4,r2
 800deb0:	80014a80 	call	80014a8 <__mulsi3>
 800deb4:	8085883a 	add	r2,r16,r2
 800deb8:	10c00017 	ldw	r3,0(r2)
 800debc:	e0bffb17 	ldw	r2,-20(fp)
 800dec0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 800dec4:	04020074 	movhi	r16,2049
 800dec8:	84025a04 	addi	r16,r16,2408
 800decc:	e0bffa17 	ldw	r2,-24(fp)
 800ded0:	01400304 	movi	r5,12
 800ded4:	1009883a 	mov	r4,r2
 800ded8:	80014a80 	call	80014a8 <__mulsi3>
 800dedc:	8085883a 	add	r2,r16,r2
 800dee0:	10800104 	addi	r2,r2,4
 800dee4:	10c00017 	ldw	r3,0(r2)
 800dee8:	e0bffb17 	ldw	r2,-20(fp)
 800deec:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 800def0:	04020074 	movhi	r16,2049
 800def4:	84025a04 	addi	r16,r16,2408
 800def8:	e0bffa17 	ldw	r2,-24(fp)
 800defc:	01400304 	movi	r5,12
 800df00:	1009883a 	mov	r4,r2
 800df04:	80014a80 	call	80014a8 <__mulsi3>
 800df08:	8085883a 	add	r2,r16,r2
 800df0c:	10800204 	addi	r2,r2,8
 800df10:	10c00017 	ldw	r3,0(r2)
 800df14:	e0bffb17 	ldw	r2,-20(fp)
 800df18:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 800df1c:	e13ffa17 	ldw	r4,-24(fp)
 800df20:	800e2400 	call	800e240 <alt_release_fd>
  }
} 
 800df24:	0001883a 	nop
 800df28:	e6ffff04 	addi	sp,fp,-4
 800df2c:	dfc00217 	ldw	ra,8(sp)
 800df30:	df000117 	ldw	fp,4(sp)
 800df34:	dc000017 	ldw	r16,0(sp)
 800df38:	dec00304 	addi	sp,sp,12
 800df3c:	f800283a 	ret

0800df40 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 800df40:	defffb04 	addi	sp,sp,-20
 800df44:	dfc00415 	stw	ra,16(sp)
 800df48:	df000315 	stw	fp,12(sp)
 800df4c:	df000304 	addi	fp,sp,12
 800df50:	e13ffd15 	stw	r4,-12(fp)
 800df54:	e17ffe15 	stw	r5,-8(fp)
 800df58:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 800df5c:	01c07fc4 	movi	r7,511
 800df60:	01800044 	movi	r6,1
 800df64:	e17ffd17 	ldw	r5,-12(fp)
 800df68:	01020074 	movhi	r4,2049
 800df6c:	21025d04 	addi	r4,r4,2420
 800df70:	800de5c0 	call	800de5c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 800df74:	01c07fc4 	movi	r7,511
 800df78:	000d883a 	mov	r6,zero
 800df7c:	e17ffe17 	ldw	r5,-8(fp)
 800df80:	01020074 	movhi	r4,2049
 800df84:	21025a04 	addi	r4,r4,2408
 800df88:	800de5c0 	call	800de5c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 800df8c:	01c07fc4 	movi	r7,511
 800df90:	01800044 	movi	r6,1
 800df94:	e17fff17 	ldw	r5,-4(fp)
 800df98:	01020074 	movhi	r4,2049
 800df9c:	21026004 	addi	r4,r4,2432
 800dfa0:	800de5c0 	call	800de5c <alt_open_fd>
}  
 800dfa4:	0001883a 	nop
 800dfa8:	e037883a 	mov	sp,fp
 800dfac:	dfc00117 	ldw	ra,4(sp)
 800dfb0:	df000017 	ldw	fp,0(sp)
 800dfb4:	dec00204 	addi	sp,sp,8
 800dfb8:	f800283a 	ret

0800dfbc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800dfbc:	defffe04 	addi	sp,sp,-8
 800dfc0:	dfc00115 	stw	ra,4(sp)
 800dfc4:	df000015 	stw	fp,0(sp)
 800dfc8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800dfcc:	d0a00c17 	ldw	r2,-32720(gp)
 800dfd0:	10000326 	beq	r2,zero,800dfe0 <alt_get_errno+0x24>
 800dfd4:	d0a00c17 	ldw	r2,-32720(gp)
 800dfd8:	103ee83a 	callr	r2
 800dfdc:	00000106 	br	800dfe4 <alt_get_errno+0x28>
 800dfe0:	d0a72d04 	addi	r2,gp,-25420
}
 800dfe4:	e037883a 	mov	sp,fp
 800dfe8:	dfc00117 	ldw	ra,4(sp)
 800dfec:	df000017 	ldw	fp,0(sp)
 800dff0:	dec00204 	addi	sp,sp,8
 800dff4:	f800283a 	ret

0800dff8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 800dff8:	defffb04 	addi	sp,sp,-20
 800dffc:	dfc00415 	stw	ra,16(sp)
 800e000:	df000315 	stw	fp,12(sp)
 800e004:	dc000215 	stw	r16,8(sp)
 800e008:	df000304 	addi	fp,sp,12
 800e00c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 800e010:	e0bffe17 	ldw	r2,-8(fp)
 800e014:	10800217 	ldw	r2,8(r2)
 800e018:	10d00034 	orhi	r3,r2,16384
 800e01c:	e0bffe17 	ldw	r2,-8(fp)
 800e020:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 800e024:	e03ffd15 	stw	zero,-12(fp)
 800e028:	00002306 	br	800e0b8 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 800e02c:	04020074 	movhi	r16,2049
 800e030:	84025a04 	addi	r16,r16,2408
 800e034:	e0bffd17 	ldw	r2,-12(fp)
 800e038:	01400304 	movi	r5,12
 800e03c:	1009883a 	mov	r4,r2
 800e040:	80014a80 	call	80014a8 <__mulsi3>
 800e044:	8085883a 	add	r2,r16,r2
 800e048:	10c00017 	ldw	r3,0(r2)
 800e04c:	e0bffe17 	ldw	r2,-8(fp)
 800e050:	10800017 	ldw	r2,0(r2)
 800e054:	1880151e 	bne	r3,r2,800e0ac <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 800e058:	04020074 	movhi	r16,2049
 800e05c:	84025a04 	addi	r16,r16,2408
 800e060:	e0bffd17 	ldw	r2,-12(fp)
 800e064:	01400304 	movi	r5,12
 800e068:	1009883a 	mov	r4,r2
 800e06c:	80014a80 	call	80014a8 <__mulsi3>
 800e070:	8085883a 	add	r2,r16,r2
 800e074:	10800204 	addi	r2,r2,8
 800e078:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 800e07c:	10000b0e 	bge	r2,zero,800e0ac <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 800e080:	01400304 	movi	r5,12
 800e084:	e13ffd17 	ldw	r4,-12(fp)
 800e088:	80014a80 	call	80014a8 <__mulsi3>
 800e08c:	1007883a 	mov	r3,r2
 800e090:	00820074 	movhi	r2,2049
 800e094:	10825a04 	addi	r2,r2,2408
 800e098:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 800e09c:	e0bffe17 	ldw	r2,-8(fp)
 800e0a0:	18800226 	beq	r3,r2,800e0ac <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 800e0a4:	00bffcc4 	movi	r2,-13
 800e0a8:	00000806 	br	800e0cc <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 800e0ac:	e0bffd17 	ldw	r2,-12(fp)
 800e0b0:	10800044 	addi	r2,r2,1
 800e0b4:	e0bffd15 	stw	r2,-12(fp)
 800e0b8:	d0a00b17 	ldw	r2,-32724(gp)
 800e0bc:	1007883a 	mov	r3,r2
 800e0c0:	e0bffd17 	ldw	r2,-12(fp)
 800e0c4:	18bfd92e 	bgeu	r3,r2,800e02c <__alt_data_end+0xfc00e02c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 800e0c8:	0005883a 	mov	r2,zero
}
 800e0cc:	e6ffff04 	addi	sp,fp,-4
 800e0d0:	dfc00217 	ldw	ra,8(sp)
 800e0d4:	df000117 	ldw	fp,4(sp)
 800e0d8:	dc000017 	ldw	r16,0(sp)
 800e0dc:	dec00304 	addi	sp,sp,12
 800e0e0:	f800283a 	ret

0800e0e4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 800e0e4:	defff604 	addi	sp,sp,-40
 800e0e8:	dfc00915 	stw	ra,36(sp)
 800e0ec:	df000815 	stw	fp,32(sp)
 800e0f0:	df000804 	addi	fp,sp,32
 800e0f4:	e13ffd15 	stw	r4,-12(fp)
 800e0f8:	e17ffe15 	stw	r5,-8(fp)
 800e0fc:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 800e100:	00bfffc4 	movi	r2,-1
 800e104:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 800e108:	00bffb44 	movi	r2,-19
 800e10c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 800e110:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 800e114:	d1600904 	addi	r5,gp,-32732
 800e118:	e13ffd17 	ldw	r4,-12(fp)
 800e11c:	800e48c0 	call	800e48c <alt_find_dev>
 800e120:	e0bff815 	stw	r2,-32(fp)
 800e124:	e0bff817 	ldw	r2,-32(fp)
 800e128:	1000051e 	bne	r2,zero,800e140 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 800e12c:	e13ffd17 	ldw	r4,-12(fp)
 800e130:	800e51c0 	call	800e51c <alt_find_file>
 800e134:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 800e138:	00800044 	movi	r2,1
 800e13c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 800e140:	e0bff817 	ldw	r2,-32(fp)
 800e144:	10002b26 	beq	r2,zero,800e1f4 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
 800e148:	e13ff817 	ldw	r4,-32(fp)
 800e14c:	800e6240 	call	800e624 <alt_get_fd>
 800e150:	e0bff915 	stw	r2,-28(fp)
 800e154:	e0bff917 	ldw	r2,-28(fp)
 800e158:	1000030e 	bge	r2,zero,800e168 <open+0x84>
    {
      status = index;
 800e15c:	e0bff917 	ldw	r2,-28(fp)
 800e160:	e0bffa15 	stw	r2,-24(fp)
 800e164:	00002506 	br	800e1fc <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
 800e168:	01400304 	movi	r5,12
 800e16c:	e13ff917 	ldw	r4,-28(fp)
 800e170:	80014a80 	call	80014a8 <__mulsi3>
 800e174:	1007883a 	mov	r3,r2
 800e178:	00820074 	movhi	r2,2049
 800e17c:	10825a04 	addi	r2,r2,2408
 800e180:	1885883a 	add	r2,r3,r2
 800e184:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 800e188:	e0fffe17 	ldw	r3,-8(fp)
 800e18c:	00900034 	movhi	r2,16384
 800e190:	10bfffc4 	addi	r2,r2,-1
 800e194:	1886703a 	and	r3,r3,r2
 800e198:	e0bffc17 	ldw	r2,-16(fp)
 800e19c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 800e1a0:	e0bffb17 	ldw	r2,-20(fp)
 800e1a4:	1000051e 	bne	r2,zero,800e1bc <open+0xd8>
 800e1a8:	e13ffc17 	ldw	r4,-16(fp)
 800e1ac:	800dff80 	call	800dff8 <alt_file_locked>
 800e1b0:	e0bffa15 	stw	r2,-24(fp)
 800e1b4:	e0bffa17 	ldw	r2,-24(fp)
 800e1b8:	10001016 	blt	r2,zero,800e1fc <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 800e1bc:	e0bff817 	ldw	r2,-32(fp)
 800e1c0:	10800317 	ldw	r2,12(r2)
 800e1c4:	10000826 	beq	r2,zero,800e1e8 <open+0x104>
 800e1c8:	e0bff817 	ldw	r2,-32(fp)
 800e1cc:	10800317 	ldw	r2,12(r2)
 800e1d0:	e1ffff17 	ldw	r7,-4(fp)
 800e1d4:	e1bffe17 	ldw	r6,-8(fp)
 800e1d8:	e17ffd17 	ldw	r5,-12(fp)
 800e1dc:	e13ffc17 	ldw	r4,-16(fp)
 800e1e0:	103ee83a 	callr	r2
 800e1e4:	00000106 	br	800e1ec <open+0x108>
 800e1e8:	0005883a 	mov	r2,zero
 800e1ec:	e0bffa15 	stw	r2,-24(fp)
 800e1f0:	00000206 	br	800e1fc <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
 800e1f4:	00bffb44 	movi	r2,-19
 800e1f8:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 800e1fc:	e0bffa17 	ldw	r2,-24(fp)
 800e200:	1000090e 	bge	r2,zero,800e228 <open+0x144>
  {
    alt_release_fd (index);  
 800e204:	e13ff917 	ldw	r4,-28(fp)
 800e208:	800e2400 	call	800e240 <alt_release_fd>
    ALT_ERRNO = -status;
 800e20c:	800dfbc0 	call	800dfbc <alt_get_errno>
 800e210:	1007883a 	mov	r3,r2
 800e214:	e0bffa17 	ldw	r2,-24(fp)
 800e218:	0085c83a 	sub	r2,zero,r2
 800e21c:	18800015 	stw	r2,0(r3)
    return -1;
 800e220:	00bfffc4 	movi	r2,-1
 800e224:	00000106 	br	800e22c <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
 800e228:	e0bff917 	ldw	r2,-28(fp)
}
 800e22c:	e037883a 	mov	sp,fp
 800e230:	dfc00117 	ldw	ra,4(sp)
 800e234:	df000017 	ldw	fp,0(sp)
 800e238:	dec00204 	addi	sp,sp,8
 800e23c:	f800283a 	ret

0800e240 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 800e240:	defffc04 	addi	sp,sp,-16
 800e244:	dfc00315 	stw	ra,12(sp)
 800e248:	df000215 	stw	fp,8(sp)
 800e24c:	dc000115 	stw	r16,4(sp)
 800e250:	df000204 	addi	fp,sp,8
 800e254:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
 800e258:	e0bffe17 	ldw	r2,-8(fp)
 800e25c:	108000d0 	cmplti	r2,r2,3
 800e260:	1000111e 	bne	r2,zero,800e2a8 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 800e264:	04020074 	movhi	r16,2049
 800e268:	84025a04 	addi	r16,r16,2408
 800e26c:	e0bffe17 	ldw	r2,-8(fp)
 800e270:	01400304 	movi	r5,12
 800e274:	1009883a 	mov	r4,r2
 800e278:	80014a80 	call	80014a8 <__mulsi3>
 800e27c:	8085883a 	add	r2,r16,r2
 800e280:	10800204 	addi	r2,r2,8
 800e284:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 800e288:	04020074 	movhi	r16,2049
 800e28c:	84025a04 	addi	r16,r16,2408
 800e290:	e0bffe17 	ldw	r2,-8(fp)
 800e294:	01400304 	movi	r5,12
 800e298:	1009883a 	mov	r4,r2
 800e29c:	80014a80 	call	80014a8 <__mulsi3>
 800e2a0:	8085883a 	add	r2,r16,r2
 800e2a4:	10000015 	stw	zero,0(r2)
  }
}
 800e2a8:	0001883a 	nop
 800e2ac:	e6ffff04 	addi	sp,fp,-4
 800e2b0:	dfc00217 	ldw	ra,8(sp)
 800e2b4:	df000117 	ldw	fp,4(sp)
 800e2b8:	dc000017 	ldw	r16,0(sp)
 800e2bc:	dec00304 	addi	sp,sp,12
 800e2c0:	f800283a 	ret

0800e2c4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 800e2c4:	defffa04 	addi	sp,sp,-24
 800e2c8:	df000515 	stw	fp,20(sp)
 800e2cc:	df000504 	addi	fp,sp,20
 800e2d0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800e2d4:	0005303a 	rdctl	r2,status
 800e2d8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800e2dc:	e0fffc17 	ldw	r3,-16(fp)
 800e2e0:	00bfff84 	movi	r2,-2
 800e2e4:	1884703a 	and	r2,r3,r2
 800e2e8:	1001703a 	wrctl	status,r2
  
  return context;
 800e2ec:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 800e2f0:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 800e2f4:	e0bfff17 	ldw	r2,-4(fp)
 800e2f8:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 800e2fc:	e0bffd17 	ldw	r2,-12(fp)
 800e300:	10800017 	ldw	r2,0(r2)
 800e304:	e0fffd17 	ldw	r3,-12(fp)
 800e308:	18c00117 	ldw	r3,4(r3)
 800e30c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 800e310:	e0bffd17 	ldw	r2,-12(fp)
 800e314:	10800117 	ldw	r2,4(r2)
 800e318:	e0fffd17 	ldw	r3,-12(fp)
 800e31c:	18c00017 	ldw	r3,0(r3)
 800e320:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 800e324:	e0bffd17 	ldw	r2,-12(fp)
 800e328:	e0fffd17 	ldw	r3,-12(fp)
 800e32c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 800e330:	e0bffd17 	ldw	r2,-12(fp)
 800e334:	e0fffd17 	ldw	r3,-12(fp)
 800e338:	10c00015 	stw	r3,0(r2)
 800e33c:	e0bffb17 	ldw	r2,-20(fp)
 800e340:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800e344:	e0bffe17 	ldw	r2,-8(fp)
 800e348:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 800e34c:	0001883a 	nop
 800e350:	e037883a 	mov	sp,fp
 800e354:	df000017 	ldw	fp,0(sp)
 800e358:	dec00104 	addi	sp,sp,4
 800e35c:	f800283a 	ret

0800e360 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 800e360:	defffb04 	addi	sp,sp,-20
 800e364:	dfc00415 	stw	ra,16(sp)
 800e368:	df000315 	stw	fp,12(sp)
 800e36c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 800e370:	d0a00e17 	ldw	r2,-32712(gp)
 800e374:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 800e378:	d0a73317 	ldw	r2,-25396(gp)
 800e37c:	10800044 	addi	r2,r2,1
 800e380:	d0a73315 	stw	r2,-25396(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 800e384:	00002e06 	br	800e440 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 800e388:	e0bffd17 	ldw	r2,-12(fp)
 800e38c:	10800017 	ldw	r2,0(r2)
 800e390:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 800e394:	e0bffd17 	ldw	r2,-12(fp)
 800e398:	10800403 	ldbu	r2,16(r2)
 800e39c:	10803fcc 	andi	r2,r2,255
 800e3a0:	10000426 	beq	r2,zero,800e3b4 <alt_tick+0x54>
 800e3a4:	d0a73317 	ldw	r2,-25396(gp)
 800e3a8:	1000021e 	bne	r2,zero,800e3b4 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 800e3ac:	e0bffd17 	ldw	r2,-12(fp)
 800e3b0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 800e3b4:	e0bffd17 	ldw	r2,-12(fp)
 800e3b8:	10800217 	ldw	r2,8(r2)
 800e3bc:	d0e73317 	ldw	r3,-25396(gp)
 800e3c0:	18801d36 	bltu	r3,r2,800e438 <alt_tick+0xd8>
 800e3c4:	e0bffd17 	ldw	r2,-12(fp)
 800e3c8:	10800403 	ldbu	r2,16(r2)
 800e3cc:	10803fcc 	andi	r2,r2,255
 800e3d0:	1000191e 	bne	r2,zero,800e438 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 800e3d4:	e0bffd17 	ldw	r2,-12(fp)
 800e3d8:	10800317 	ldw	r2,12(r2)
 800e3dc:	e0fffd17 	ldw	r3,-12(fp)
 800e3e0:	18c00517 	ldw	r3,20(r3)
 800e3e4:	1809883a 	mov	r4,r3
 800e3e8:	103ee83a 	callr	r2
 800e3ec:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 800e3f0:	e0bfff17 	ldw	r2,-4(fp)
 800e3f4:	1000031e 	bne	r2,zero,800e404 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 800e3f8:	e13ffd17 	ldw	r4,-12(fp)
 800e3fc:	800e2c40 	call	800e2c4 <alt_alarm_stop>
 800e400:	00000d06 	br	800e438 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 800e404:	e0bffd17 	ldw	r2,-12(fp)
 800e408:	10c00217 	ldw	r3,8(r2)
 800e40c:	e0bfff17 	ldw	r2,-4(fp)
 800e410:	1887883a 	add	r3,r3,r2
 800e414:	e0bffd17 	ldw	r2,-12(fp)
 800e418:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 800e41c:	e0bffd17 	ldw	r2,-12(fp)
 800e420:	10c00217 	ldw	r3,8(r2)
 800e424:	d0a73317 	ldw	r2,-25396(gp)
 800e428:	1880032e 	bgeu	r3,r2,800e438 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 800e42c:	e0bffd17 	ldw	r2,-12(fp)
 800e430:	00c00044 	movi	r3,1
 800e434:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 800e438:	e0bffe17 	ldw	r2,-8(fp)
 800e43c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 800e440:	e0fffd17 	ldw	r3,-12(fp)
 800e444:	d0a00e04 	addi	r2,gp,-32712
 800e448:	18bfcf1e 	bne	r3,r2,800e388 <__alt_data_end+0xfc00e388>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 800e44c:	0001883a 	nop
}
 800e450:	0001883a 	nop
 800e454:	e037883a 	mov	sp,fp
 800e458:	dfc00117 	ldw	ra,4(sp)
 800e45c:	df000017 	ldw	fp,0(sp)
 800e460:	dec00204 	addi	sp,sp,8
 800e464:	f800283a 	ret

0800e468 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 800e468:	deffff04 	addi	sp,sp,-4
 800e46c:	df000015 	stw	fp,0(sp)
 800e470:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 800e474:	000170fa 	wrctl	ienable,zero
}
 800e478:	0001883a 	nop
 800e47c:	e037883a 	mov	sp,fp
 800e480:	df000017 	ldw	fp,0(sp)
 800e484:	dec00104 	addi	sp,sp,4
 800e488:	f800283a 	ret

0800e48c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 800e48c:	defffa04 	addi	sp,sp,-24
 800e490:	dfc00515 	stw	ra,20(sp)
 800e494:	df000415 	stw	fp,16(sp)
 800e498:	df000404 	addi	fp,sp,16
 800e49c:	e13ffe15 	stw	r4,-8(fp)
 800e4a0:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 800e4a4:	e0bfff17 	ldw	r2,-4(fp)
 800e4a8:	10800017 	ldw	r2,0(r2)
 800e4ac:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 800e4b0:	e13ffe17 	ldw	r4,-8(fp)
 800e4b4:	80016100 	call	8001610 <strlen>
 800e4b8:	10800044 	addi	r2,r2,1
 800e4bc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 800e4c0:	00000d06 	br	800e4f8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 800e4c4:	e0bffc17 	ldw	r2,-16(fp)
 800e4c8:	10800217 	ldw	r2,8(r2)
 800e4cc:	e0fffd17 	ldw	r3,-12(fp)
 800e4d0:	180d883a 	mov	r6,r3
 800e4d4:	e17ffe17 	ldw	r5,-8(fp)
 800e4d8:	1009883a 	mov	r4,r2
 800e4dc:	800e7d00 	call	800e7d0 <memcmp>
 800e4e0:	1000021e 	bne	r2,zero,800e4ec <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 800e4e4:	e0bffc17 	ldw	r2,-16(fp)
 800e4e8:	00000706 	br	800e508 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 800e4ec:	e0bffc17 	ldw	r2,-16(fp)
 800e4f0:	10800017 	ldw	r2,0(r2)
 800e4f4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 800e4f8:	e0fffc17 	ldw	r3,-16(fp)
 800e4fc:	e0bfff17 	ldw	r2,-4(fp)
 800e500:	18bff01e 	bne	r3,r2,800e4c4 <__alt_data_end+0xfc00e4c4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 800e504:	0005883a 	mov	r2,zero
}
 800e508:	e037883a 	mov	sp,fp
 800e50c:	dfc00117 	ldw	ra,4(sp)
 800e510:	df000017 	ldw	fp,0(sp)
 800e514:	dec00204 	addi	sp,sp,8
 800e518:	f800283a 	ret

0800e51c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 800e51c:	defffb04 	addi	sp,sp,-20
 800e520:	dfc00415 	stw	ra,16(sp)
 800e524:	df000315 	stw	fp,12(sp)
 800e528:	df000304 	addi	fp,sp,12
 800e52c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 800e530:	d0a00717 	ldw	r2,-32740(gp)
 800e534:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 800e538:	00003106 	br	800e600 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 800e53c:	e0bffd17 	ldw	r2,-12(fp)
 800e540:	10800217 	ldw	r2,8(r2)
 800e544:	1009883a 	mov	r4,r2
 800e548:	80016100 	call	8001610 <strlen>
 800e54c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 800e550:	e0bffd17 	ldw	r2,-12(fp)
 800e554:	10c00217 	ldw	r3,8(r2)
 800e558:	e0bffe17 	ldw	r2,-8(fp)
 800e55c:	10bfffc4 	addi	r2,r2,-1
 800e560:	1885883a 	add	r2,r3,r2
 800e564:	10800003 	ldbu	r2,0(r2)
 800e568:	10803fcc 	andi	r2,r2,255
 800e56c:	1080201c 	xori	r2,r2,128
 800e570:	10bfe004 	addi	r2,r2,-128
 800e574:	10800bd8 	cmpnei	r2,r2,47
 800e578:	1000031e 	bne	r2,zero,800e588 <alt_find_file+0x6c>
    {
      len -= 1;
 800e57c:	e0bffe17 	ldw	r2,-8(fp)
 800e580:	10bfffc4 	addi	r2,r2,-1
 800e584:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 800e588:	e0bffe17 	ldw	r2,-8(fp)
 800e58c:	e0ffff17 	ldw	r3,-4(fp)
 800e590:	1885883a 	add	r2,r3,r2
 800e594:	10800003 	ldbu	r2,0(r2)
 800e598:	10803fcc 	andi	r2,r2,255
 800e59c:	1080201c 	xori	r2,r2,128
 800e5a0:	10bfe004 	addi	r2,r2,-128
 800e5a4:	10800be0 	cmpeqi	r2,r2,47
 800e5a8:	1000081e 	bne	r2,zero,800e5cc <alt_find_file+0xb0>
 800e5ac:	e0bffe17 	ldw	r2,-8(fp)
 800e5b0:	e0ffff17 	ldw	r3,-4(fp)
 800e5b4:	1885883a 	add	r2,r3,r2
 800e5b8:	10800003 	ldbu	r2,0(r2)
 800e5bc:	10803fcc 	andi	r2,r2,255
 800e5c0:	1080201c 	xori	r2,r2,128
 800e5c4:	10bfe004 	addi	r2,r2,-128
 800e5c8:	10000a1e 	bne	r2,zero,800e5f4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 800e5cc:	e0bffd17 	ldw	r2,-12(fp)
 800e5d0:	10800217 	ldw	r2,8(r2)
 800e5d4:	e0fffe17 	ldw	r3,-8(fp)
 800e5d8:	180d883a 	mov	r6,r3
 800e5dc:	e17fff17 	ldw	r5,-4(fp)
 800e5e0:	1009883a 	mov	r4,r2
 800e5e4:	800e7d00 	call	800e7d0 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 800e5e8:	1000021e 	bne	r2,zero,800e5f4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 800e5ec:	e0bffd17 	ldw	r2,-12(fp)
 800e5f0:	00000706 	br	800e610 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 800e5f4:	e0bffd17 	ldw	r2,-12(fp)
 800e5f8:	10800017 	ldw	r2,0(r2)
 800e5fc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 800e600:	e0fffd17 	ldw	r3,-12(fp)
 800e604:	d0a00704 	addi	r2,gp,-32740
 800e608:	18bfcc1e 	bne	r3,r2,800e53c <__alt_data_end+0xfc00e53c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 800e60c:	0005883a 	mov	r2,zero
}
 800e610:	e037883a 	mov	sp,fp
 800e614:	dfc00117 	ldw	ra,4(sp)
 800e618:	df000017 	ldw	fp,0(sp)
 800e61c:	dec00204 	addi	sp,sp,8
 800e620:	f800283a 	ret

0800e624 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 800e624:	defffa04 	addi	sp,sp,-24
 800e628:	dfc00515 	stw	ra,20(sp)
 800e62c:	df000415 	stw	fp,16(sp)
 800e630:	dc000315 	stw	r16,12(sp)
 800e634:	df000404 	addi	fp,sp,16
 800e638:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
 800e63c:	00bffa04 	movi	r2,-24
 800e640:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 800e644:	e03ffc15 	stw	zero,-16(fp)
 800e648:	00001d06 	br	800e6c0 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
 800e64c:	04020074 	movhi	r16,2049
 800e650:	84025a04 	addi	r16,r16,2408
 800e654:	e0bffc17 	ldw	r2,-16(fp)
 800e658:	01400304 	movi	r5,12
 800e65c:	1009883a 	mov	r4,r2
 800e660:	80014a80 	call	80014a8 <__mulsi3>
 800e664:	8085883a 	add	r2,r16,r2
 800e668:	10800017 	ldw	r2,0(r2)
 800e66c:	1000111e 	bne	r2,zero,800e6b4 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
 800e670:	04020074 	movhi	r16,2049
 800e674:	84025a04 	addi	r16,r16,2408
 800e678:	e0bffc17 	ldw	r2,-16(fp)
 800e67c:	01400304 	movi	r5,12
 800e680:	1009883a 	mov	r4,r2
 800e684:	80014a80 	call	80014a8 <__mulsi3>
 800e688:	8085883a 	add	r2,r16,r2
 800e68c:	e0fffe17 	ldw	r3,-8(fp)
 800e690:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 800e694:	d0e00b17 	ldw	r3,-32724(gp)
 800e698:	e0bffc17 	ldw	r2,-16(fp)
 800e69c:	1880020e 	bge	r3,r2,800e6a8 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
 800e6a0:	e0bffc17 	ldw	r2,-16(fp)
 800e6a4:	d0a00b15 	stw	r2,-32724(gp)
      }
      rc = i;
 800e6a8:	e0bffc17 	ldw	r2,-16(fp)
 800e6ac:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 800e6b0:	00000606 	br	800e6cc <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 800e6b4:	e0bffc17 	ldw	r2,-16(fp)
 800e6b8:	10800044 	addi	r2,r2,1
 800e6bc:	e0bffc15 	stw	r2,-16(fp)
 800e6c0:	e0bffc17 	ldw	r2,-16(fp)
 800e6c4:	10800810 	cmplti	r2,r2,32
 800e6c8:	103fe01e 	bne	r2,zero,800e64c <__alt_data_end+0xfc00e64c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 800e6cc:	e0bffd17 	ldw	r2,-12(fp)
}
 800e6d0:	e6ffff04 	addi	sp,fp,-4
 800e6d4:	dfc00217 	ldw	ra,8(sp)
 800e6d8:	df000117 	ldw	fp,4(sp)
 800e6dc:	dc000017 	ldw	r16,0(sp)
 800e6e0:	dec00304 	addi	sp,sp,12
 800e6e4:	f800283a 	ret

0800e6e8 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 800e6e8:	defffe04 	addi	sp,sp,-8
 800e6ec:	df000115 	stw	fp,4(sp)
 800e6f0:	df000104 	addi	fp,sp,4
 800e6f4:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 800e6f8:	e0bfff17 	ldw	r2,-4(fp)
 800e6fc:	10bffe84 	addi	r2,r2,-6
 800e700:	10c00428 	cmpgeui	r3,r2,16
 800e704:	18001a1e 	bne	r3,zero,800e770 <alt_exception_cause_generated_bad_addr+0x88>
 800e708:	100690ba 	slli	r3,r2,2
 800e70c:	00820074 	movhi	r2,2049
 800e710:	10b9c804 	addi	r2,r2,-6368
 800e714:	1885883a 	add	r2,r3,r2
 800e718:	10800017 	ldw	r2,0(r2)
 800e71c:	1000683a 	jmp	r2
 800e720:	0800e760 	cmpeqi	zero,at,925
 800e724:	0800e760 	cmpeqi	zero,at,925
 800e728:	0800e770 	cmpltui	zero,at,925
 800e72c:	0800e770 	cmpltui	zero,at,925
 800e730:	0800e770 	cmpltui	zero,at,925
 800e734:	0800e760 	cmpeqi	zero,at,925
 800e738:	0800e768 	cmpgeui	zero,at,925
 800e73c:	0800e770 	cmpltui	zero,at,925
 800e740:	0800e760 	cmpeqi	zero,at,925
 800e744:	0800e760 	cmpeqi	zero,at,925
 800e748:	0800e770 	cmpltui	zero,at,925
 800e74c:	0800e760 	cmpeqi	zero,at,925
 800e750:	0800e768 	cmpgeui	zero,at,925
 800e754:	0800e770 	cmpltui	zero,at,925
 800e758:	0800e770 	cmpltui	zero,at,925
 800e75c:	0800e760 	cmpeqi	zero,at,925
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 800e760:	00800044 	movi	r2,1
 800e764:	00000306 	br	800e774 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 800e768:	0005883a 	mov	r2,zero
 800e76c:	00000106 	br	800e774 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 800e770:	0005883a 	mov	r2,zero
  }
}
 800e774:	e037883a 	mov	sp,fp
 800e778:	df000017 	ldw	fp,0(sp)
 800e77c:	dec00104 	addi	sp,sp,4
 800e780:	f800283a 	ret

0800e784 <atexit>:
 800e784:	200b883a 	mov	r5,r4
 800e788:	000f883a 	mov	r7,zero
 800e78c:	000d883a 	mov	r6,zero
 800e790:	0009883a 	mov	r4,zero
 800e794:	800e84c1 	jmpi	800e84c <__register_exitproc>

0800e798 <exit>:
 800e798:	defffe04 	addi	sp,sp,-8
 800e79c:	000b883a 	mov	r5,zero
 800e7a0:	dc000015 	stw	r16,0(sp)
 800e7a4:	dfc00115 	stw	ra,4(sp)
 800e7a8:	2021883a 	mov	r16,r4
 800e7ac:	800e9640 	call	800e964 <__call_exitprocs>
 800e7b0:	00820074 	movhi	r2,2049
 800e7b4:	1082bb04 	addi	r2,r2,2796
 800e7b8:	11000017 	ldw	r4,0(r2)
 800e7bc:	20800f17 	ldw	r2,60(r4)
 800e7c0:	10000126 	beq	r2,zero,800e7c8 <exit+0x30>
 800e7c4:	103ee83a 	callr	r2
 800e7c8:	8009883a 	mov	r4,r16
 800e7cc:	800eae40 	call	800eae4 <_exit>

0800e7d0 <memcmp>:
 800e7d0:	01c000c4 	movi	r7,3
 800e7d4:	3980192e 	bgeu	r7,r6,800e83c <memcmp+0x6c>
 800e7d8:	2144b03a 	or	r2,r4,r5
 800e7dc:	11c4703a 	and	r2,r2,r7
 800e7e0:	10000f26 	beq	r2,zero,800e820 <memcmp+0x50>
 800e7e4:	20800003 	ldbu	r2,0(r4)
 800e7e8:	28c00003 	ldbu	r3,0(r5)
 800e7ec:	10c0151e 	bne	r2,r3,800e844 <memcmp+0x74>
 800e7f0:	31bfff84 	addi	r6,r6,-2
 800e7f4:	01ffffc4 	movi	r7,-1
 800e7f8:	00000406 	br	800e80c <memcmp+0x3c>
 800e7fc:	20800003 	ldbu	r2,0(r4)
 800e800:	28c00003 	ldbu	r3,0(r5)
 800e804:	31bfffc4 	addi	r6,r6,-1
 800e808:	10c00e1e 	bne	r2,r3,800e844 <memcmp+0x74>
 800e80c:	21000044 	addi	r4,r4,1
 800e810:	29400044 	addi	r5,r5,1
 800e814:	31fff91e 	bne	r6,r7,800e7fc <__alt_data_end+0xfc00e7fc>
 800e818:	0005883a 	mov	r2,zero
 800e81c:	f800283a 	ret
 800e820:	20c00017 	ldw	r3,0(r4)
 800e824:	28800017 	ldw	r2,0(r5)
 800e828:	18bfee1e 	bne	r3,r2,800e7e4 <__alt_data_end+0xfc00e7e4>
 800e82c:	31bfff04 	addi	r6,r6,-4
 800e830:	21000104 	addi	r4,r4,4
 800e834:	29400104 	addi	r5,r5,4
 800e838:	39bff936 	bltu	r7,r6,800e820 <__alt_data_end+0xfc00e820>
 800e83c:	303fe91e 	bne	r6,zero,800e7e4 <__alt_data_end+0xfc00e7e4>
 800e840:	003ff506 	br	800e818 <__alt_data_end+0xfc00e818>
 800e844:	10c5c83a 	sub	r2,r2,r3
 800e848:	f800283a 	ret

0800e84c <__register_exitproc>:
 800e84c:	defffa04 	addi	sp,sp,-24
 800e850:	dc000315 	stw	r16,12(sp)
 800e854:	04020074 	movhi	r16,2049
 800e858:	8402bb04 	addi	r16,r16,2796
 800e85c:	80c00017 	ldw	r3,0(r16)
 800e860:	dc400415 	stw	r17,16(sp)
 800e864:	dfc00515 	stw	ra,20(sp)
 800e868:	18805217 	ldw	r2,328(r3)
 800e86c:	2023883a 	mov	r17,r4
 800e870:	10003726 	beq	r2,zero,800e950 <__register_exitproc+0x104>
 800e874:	10c00117 	ldw	r3,4(r2)
 800e878:	010007c4 	movi	r4,31
 800e87c:	20c00e16 	blt	r4,r3,800e8b8 <__register_exitproc+0x6c>
 800e880:	1a000044 	addi	r8,r3,1
 800e884:	8800221e 	bne	r17,zero,800e910 <__register_exitproc+0xc4>
 800e888:	18c00084 	addi	r3,r3,2
 800e88c:	18c7883a 	add	r3,r3,r3
 800e890:	18c7883a 	add	r3,r3,r3
 800e894:	12000115 	stw	r8,4(r2)
 800e898:	10c7883a 	add	r3,r2,r3
 800e89c:	19400015 	stw	r5,0(r3)
 800e8a0:	0005883a 	mov	r2,zero
 800e8a4:	dfc00517 	ldw	ra,20(sp)
 800e8a8:	dc400417 	ldw	r17,16(sp)
 800e8ac:	dc000317 	ldw	r16,12(sp)
 800e8b0:	dec00604 	addi	sp,sp,24
 800e8b4:	f800283a 	ret
 800e8b8:	00800034 	movhi	r2,0
 800e8bc:	10800004 	addi	r2,r2,0
 800e8c0:	10002626 	beq	r2,zero,800e95c <__register_exitproc+0x110>
 800e8c4:	01006404 	movi	r4,400
 800e8c8:	d9400015 	stw	r5,0(sp)
 800e8cc:	d9800115 	stw	r6,4(sp)
 800e8d0:	d9c00215 	stw	r7,8(sp)
 800e8d4:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x200>
 800e8d8:	d9400017 	ldw	r5,0(sp)
 800e8dc:	d9800117 	ldw	r6,4(sp)
 800e8e0:	d9c00217 	ldw	r7,8(sp)
 800e8e4:	10001d26 	beq	r2,zero,800e95c <__register_exitproc+0x110>
 800e8e8:	81000017 	ldw	r4,0(r16)
 800e8ec:	10000115 	stw	zero,4(r2)
 800e8f0:	02000044 	movi	r8,1
 800e8f4:	22405217 	ldw	r9,328(r4)
 800e8f8:	0007883a 	mov	r3,zero
 800e8fc:	12400015 	stw	r9,0(r2)
 800e900:	20805215 	stw	r2,328(r4)
 800e904:	10006215 	stw	zero,392(r2)
 800e908:	10006315 	stw	zero,396(r2)
 800e90c:	883fde26 	beq	r17,zero,800e888 <__alt_data_end+0xfc00e888>
 800e910:	18c9883a 	add	r4,r3,r3
 800e914:	2109883a 	add	r4,r4,r4
 800e918:	1109883a 	add	r4,r2,r4
 800e91c:	21802215 	stw	r6,136(r4)
 800e920:	01800044 	movi	r6,1
 800e924:	12406217 	ldw	r9,392(r2)
 800e928:	30cc983a 	sll	r6,r6,r3
 800e92c:	4992b03a 	or	r9,r9,r6
 800e930:	12406215 	stw	r9,392(r2)
 800e934:	21c04215 	stw	r7,264(r4)
 800e938:	01000084 	movi	r4,2
 800e93c:	893fd21e 	bne	r17,r4,800e888 <__alt_data_end+0xfc00e888>
 800e940:	11006317 	ldw	r4,396(r2)
 800e944:	218cb03a 	or	r6,r4,r6
 800e948:	11806315 	stw	r6,396(r2)
 800e94c:	003fce06 	br	800e888 <__alt_data_end+0xfc00e888>
 800e950:	18805304 	addi	r2,r3,332
 800e954:	18805215 	stw	r2,328(r3)
 800e958:	003fc606 	br	800e874 <__alt_data_end+0xfc00e874>
 800e95c:	00bfffc4 	movi	r2,-1
 800e960:	003fd006 	br	800e8a4 <__alt_data_end+0xfc00e8a4>

0800e964 <__call_exitprocs>:
 800e964:	defff504 	addi	sp,sp,-44
 800e968:	df000915 	stw	fp,36(sp)
 800e96c:	dd400615 	stw	r21,24(sp)
 800e970:	dc800315 	stw	r18,12(sp)
 800e974:	dfc00a15 	stw	ra,40(sp)
 800e978:	ddc00815 	stw	r23,32(sp)
 800e97c:	dd800715 	stw	r22,28(sp)
 800e980:	dd000515 	stw	r20,20(sp)
 800e984:	dcc00415 	stw	r19,16(sp)
 800e988:	dc400215 	stw	r17,8(sp)
 800e98c:	dc000115 	stw	r16,4(sp)
 800e990:	d9000015 	stw	r4,0(sp)
 800e994:	2839883a 	mov	fp,r5
 800e998:	04800044 	movi	r18,1
 800e99c:	057fffc4 	movi	r21,-1
 800e9a0:	00820074 	movhi	r2,2049
 800e9a4:	1082bb04 	addi	r2,r2,2796
 800e9a8:	12000017 	ldw	r8,0(r2)
 800e9ac:	45005217 	ldw	r20,328(r8)
 800e9b0:	44c05204 	addi	r19,r8,328
 800e9b4:	a0001c26 	beq	r20,zero,800ea28 <__call_exitprocs+0xc4>
 800e9b8:	a0800117 	ldw	r2,4(r20)
 800e9bc:	15ffffc4 	addi	r23,r2,-1
 800e9c0:	b8000d16 	blt	r23,zero,800e9f8 <__call_exitprocs+0x94>
 800e9c4:	14000044 	addi	r16,r2,1
 800e9c8:	8421883a 	add	r16,r16,r16
 800e9cc:	8421883a 	add	r16,r16,r16
 800e9d0:	84402004 	addi	r17,r16,128
 800e9d4:	a463883a 	add	r17,r20,r17
 800e9d8:	a421883a 	add	r16,r20,r16
 800e9dc:	e0001e26 	beq	fp,zero,800ea58 <__call_exitprocs+0xf4>
 800e9e0:	80804017 	ldw	r2,256(r16)
 800e9e4:	e0801c26 	beq	fp,r2,800ea58 <__call_exitprocs+0xf4>
 800e9e8:	bdffffc4 	addi	r23,r23,-1
 800e9ec:	843fff04 	addi	r16,r16,-4
 800e9f0:	8c7fff04 	addi	r17,r17,-4
 800e9f4:	bd7ff91e 	bne	r23,r21,800e9dc <__alt_data_end+0xfc00e9dc>
 800e9f8:	00800034 	movhi	r2,0
 800e9fc:	10800004 	addi	r2,r2,0
 800ea00:	10000926 	beq	r2,zero,800ea28 <__call_exitprocs+0xc4>
 800ea04:	a0800117 	ldw	r2,4(r20)
 800ea08:	1000301e 	bne	r2,zero,800eacc <__call_exitprocs+0x168>
 800ea0c:	a0800017 	ldw	r2,0(r20)
 800ea10:	10003226 	beq	r2,zero,800eadc <__call_exitprocs+0x178>
 800ea14:	a009883a 	mov	r4,r20
 800ea18:	98800015 	stw	r2,0(r19)
 800ea1c:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x200>
 800ea20:	9d000017 	ldw	r20,0(r19)
 800ea24:	a03fe41e 	bne	r20,zero,800e9b8 <__alt_data_end+0xfc00e9b8>
 800ea28:	dfc00a17 	ldw	ra,40(sp)
 800ea2c:	df000917 	ldw	fp,36(sp)
 800ea30:	ddc00817 	ldw	r23,32(sp)
 800ea34:	dd800717 	ldw	r22,28(sp)
 800ea38:	dd400617 	ldw	r21,24(sp)
 800ea3c:	dd000517 	ldw	r20,20(sp)
 800ea40:	dcc00417 	ldw	r19,16(sp)
 800ea44:	dc800317 	ldw	r18,12(sp)
 800ea48:	dc400217 	ldw	r17,8(sp)
 800ea4c:	dc000117 	ldw	r16,4(sp)
 800ea50:	dec00b04 	addi	sp,sp,44
 800ea54:	f800283a 	ret
 800ea58:	a0800117 	ldw	r2,4(r20)
 800ea5c:	80c00017 	ldw	r3,0(r16)
 800ea60:	10bfffc4 	addi	r2,r2,-1
 800ea64:	15c01426 	beq	r2,r23,800eab8 <__call_exitprocs+0x154>
 800ea68:	80000015 	stw	zero,0(r16)
 800ea6c:	183fde26 	beq	r3,zero,800e9e8 <__alt_data_end+0xfc00e9e8>
 800ea70:	95c8983a 	sll	r4,r18,r23
 800ea74:	a0806217 	ldw	r2,392(r20)
 800ea78:	a5800117 	ldw	r22,4(r20)
 800ea7c:	2084703a 	and	r2,r4,r2
 800ea80:	10000b26 	beq	r2,zero,800eab0 <__call_exitprocs+0x14c>
 800ea84:	a0806317 	ldw	r2,396(r20)
 800ea88:	2088703a 	and	r4,r4,r2
 800ea8c:	20000c1e 	bne	r4,zero,800eac0 <__call_exitprocs+0x15c>
 800ea90:	89400017 	ldw	r5,0(r17)
 800ea94:	d9000017 	ldw	r4,0(sp)
 800ea98:	183ee83a 	callr	r3
 800ea9c:	a0800117 	ldw	r2,4(r20)
 800eaa0:	15bfbf1e 	bne	r2,r22,800e9a0 <__alt_data_end+0xfc00e9a0>
 800eaa4:	98800017 	ldw	r2,0(r19)
 800eaa8:	153fcf26 	beq	r2,r20,800e9e8 <__alt_data_end+0xfc00e9e8>
 800eaac:	003fbc06 	br	800e9a0 <__alt_data_end+0xfc00e9a0>
 800eab0:	183ee83a 	callr	r3
 800eab4:	003ff906 	br	800ea9c <__alt_data_end+0xfc00ea9c>
 800eab8:	a5c00115 	stw	r23,4(r20)
 800eabc:	003feb06 	br	800ea6c <__alt_data_end+0xfc00ea6c>
 800eac0:	89000017 	ldw	r4,0(r17)
 800eac4:	183ee83a 	callr	r3
 800eac8:	003ff406 	br	800ea9c <__alt_data_end+0xfc00ea9c>
 800eacc:	a0800017 	ldw	r2,0(r20)
 800ead0:	a027883a 	mov	r19,r20
 800ead4:	1029883a 	mov	r20,r2
 800ead8:	003fb606 	br	800e9b4 <__alt_data_end+0xfc00e9b4>
 800eadc:	0005883a 	mov	r2,zero
 800eae0:	003ffb06 	br	800ead0 <__alt_data_end+0xfc00ead0>

0800eae4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 800eae4:	defffd04 	addi	sp,sp,-12
 800eae8:	df000215 	stw	fp,8(sp)
 800eaec:	df000204 	addi	fp,sp,8
 800eaf0:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 800eaf4:	0001883a 	nop
 800eaf8:	e0bfff17 	ldw	r2,-4(fp)
 800eafc:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 800eb00:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 800eb04:	10000226 	beq	r2,zero,800eb10 <_exit+0x2c>
    ALT_SIM_FAIL();
 800eb08:	002af070 	cmpltui	zero,zero,43969
 800eb0c:	00000106 	br	800eb14 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 800eb10:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 800eb14:	003fff06 	br	800eb14 <__alt_data_end+0xfc00eb14>
